Directives
==========

Directives control the operation of the Felix compiler.

include directive
-----------------

The include directive causes the compiler to ensure the specified file
is parsed, and ensure the abstract syntax tree generated by parsing
is prepended to the current AST being generated by the parser.

open directive
--------------

The open directive injects the set of public names of the specified
class or library specialised to the given types, in a shadow lookup scope just 
underneath the primary scope in which the open directive is written.

Symbols in shadow scopes are hidden by definitions in the primary
scope and are not exported as as public members of the current
primary class.

inherit directive
-----------------

The inherit directive injects the set of public names of the specified
class or library specialised to the given types, into the current primary scope,
as if they were defined there.

Injected symbols may clash with each other and definitions in 
the primary scope. Clashes with non-function symbols lead to
a fatal compiler error because the compiler cannot construct
a suitable entry in the symbol table. Clashes with function symbols
lead to ambiguity errors only when the function name is used
and overload resolution performed. Such clashes can be resolved
by using a qualified name.

rename directive
----------------

The rename directive can be is used to inject a single name into
the current scope defining it by another name, either from
the current scope, or some other scope. The name can either
be a non-function name, a function name, or a class name.
The name can be polymorphic and the defining expression can
be specialised.


use directive
-------------

The use directive injects a single symbol or set of function
signatures into the current scope, as if it were defined there.
It is a special shortcut version of the `rename` directive used
when the injected name is the same as the source name.

library directive
-----------------

The library directive constructs an part of an extensible scope.
Multiple library directives can be given for the same name.
Libraries can therefore be defined in multiple files,
whereas classes must be specified in a single file.

Libraries cannot be polymorphic and serve only to provide
a qualified name prefix for names.


Qualified Names
---------------

Names can be qualified by the class of library in which to lookup
the name. This can be used to resolve ambiguities, or, to find
a symbol if the class or library containing the name is not open.
Opening classes or libraries causes namespace pollution, which is especially
problematic if the open is in the top level (global or root) scope
and is generally reserved for core algebras.







