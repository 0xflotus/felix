fun f0 () : 1 => ();
fun f[T,U] (a:U) (b:T) => a,b;
println$ () . f0 . (f "hello") . (f 42.1) . (f "pye") . _strr;

include "std/strings/recognisers";
include "std/strings/parsers";
include "std/control/chips";

// So .. what if for each recognizer we read and write a Buffer
// and write the desired AST term on ANOTHER channel
// This would apply to both terminals and non-terminals!

// Using the above method, we aggregate the channel output points
// The final epsilon executable reads the channels to construct
// its term, then writes the result (on its third channel).

open BaseChips;


begin
  var s = "hello world";
  var p = Buffer &s;
  var ra,wa = mk_ioschannel_pair[string]();
  var rb,wb = mk_ioschannel_pair[string]();
  parser x =  {pstring "hello " wa} {pstring "world" wb};

  var startinp,startout= mk_ioschannel_pair[Buffer]();
  var endinp,endout= mk_ioschannel_pair[Buffer]();
  circuit
    wire startinp to x.inp        
    wire endout to x.out
  endcircuit
  write (startout,p);
  spawn_fthread {
    while true do
      var res = read endinp;
      println$ "RESULT: "+ res.str;
      var s1 = read ra; 
      var s2 = read rb;
      println$ "Parsed " + s1 + s2; 
    done
  };
  swait();
end

union abc_t = 
  | Abc of string * int * string
;
instance Str[abc_t] {
  fun str : abc_t -> string =
  | Abc (a,b,c) => "ABC("+a+","+b.str+","+c+")"
  ;
}

fun tread[T:GENERIC] (x:T) => _rev_map read x;


chip abc_parser 
  (rcba:(%<string * %<int *%<string)) 
  (term: %>abc_t)
  connector io
    pin inp:%<Buffer
    pin out:%>Buffer
{
println$ "Start abc parser";
  while true do
    var x = read io.inp;
    var abc = tread rcba;
    var d = Abc abc;
    write (io.out,x);
    write (term, d);
  done
}
open syntax Combw;
proc pcheck (rd,x12,p)
{
  var startinp,startout= mk_ioschannel_pair[Buffer]();
  var endinp,endout= mk_ioschannel_pair[Buffer]();
  circuit
    wire startinp to x12.inp
    wire endout to x12.out
  endcircuit
  write (startout,p);
  spawn_fthread {
    while true do
      var res = read endinp;
      println$ "RESULT: "+ res.str;
      var d = read rd; 
      println$ "Parsed " + d.str;
    done
  };
  swait();
}

begin
println$ "PART 2 ---------";
  var s = "hello 67world";
  var p = Buffer &s;

  var hi = pstring "hello " #> pint;
  var world = pstring "world";

  var rd,x12 = 
    pstring "hello " #> pint #> pstring "world" #> action_reduce Abc 
  #|
    pstring "hello " #> (pint #> pstring "world") #> action_reduce Abc 
  #|
    hi #> deref_first_read &world #> action_reduce Abc
  #|
    pstring "hello 6" #> pint #> pstring "world" #> action_reduce Abc
  #|
    pstring "hello 6" #> pint #> pstring "world" #> action_reduce Abc
  #|
    pstring "hello 67" #> pstring "world" #> 
      action_reduce (fun (s1:string,s2:string) : abc_t => Abc (s1,99,s2))
  #| 
     pstring "hello" #> match_white #> pint #> pstring "world" #> action_reduce Abc
  ;

  pcheck$ rd,x12,p;
end


