include "std/pthread/pthread_lf_bag";

var bag = LockFreeBag::lf_bag (16uz);

body """
  ::std::atomic<int> xxx(0);
""";

proc inc : 1 = "xxx++;";
proc dec : 1 = "xxx--;";
gen get : 1 -> int = "xxx.load()";

var N = 20;

noinline proc producer (var i: size) () 
{
  for j in 0 .. N do
    var v = i.intptr * 1000.intptr + (j+1).intptr;
    println$ "Producer " + i.str + " value " + v.str;
    LockFreeBag::enqueue (bag, C_hack::cast[address] v);
    inc();
    println$ "COUNTER " + get();
  done
  println$ "PRODUCER " + i.str + " FINISHED";
}

noinline proc consumer (i:size)  ()
{
   for j in 0 .. N do
      var x = LockFreeBag::dequeue(bag);
      dec();
      println$ "COUNTER " + get();
      var y = C_hack::cast[uintptr] x;
      println$ "Consumer "+i.str+"  got value " + y.str;
   done
   println$ "CONSUMER " + i.str + " FINISHED";
}

for i in 0 .. N do 
  spawn_pthread$ consumer i.size;

for i in 0 .. N call
  spawn_pthread$ producer i.size;

println$ "Spawning done";

