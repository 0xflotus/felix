if POSIX do
include "std/posix/faio_posix";  // aio_ropen
//open Faio_posix;
include "std/posix/signal";
include "std/posix/filesystem";
Posix_Signal::ignore_signal(Posix_Signal::SIGPIPE);
done

include "std/io/socket";
open Socket;

include "std/io/stream";
open Stream;

open TerminalIByteStream[fd_t];
open TerminalIOByteStream[socket_t];

proc dbg(x:string) { fprint (cerr,x); };

include "./cpp2html";
include "./flx2html";
include "./fdoc2html";
include "./fpc2html";
include "./py2html";
include "./ocaml2html";
include "./charclass";
include "./css4html";

// this is a hack to make close work on a listener
// RF got this right the first time:
// in the abstract a listener is NOT a socket
// In fact, it is a socket server, with accept() a way to
// read new sockets off it ..
open TerminalIByteStream[socket_t];

requires header '#include <stdlib.h>';
fun strtod: string -> double = "strtod($1.data(),0)";
fun atoi: string -> int = "atoi($1.data())";

// command line argument processing
var arg = "";
var argno = 1;
fun prefix(arg:string,key:string)=>
  arg.[to len key]==key
;
var INSTALL_ROOT = Config::FLX_INSTALL_DIR;
 
var DELAY = 0.1;
var PORT=1234;

var FLX_PATH=Empty[string];
var FDOC_PATH=Empty[string];

var C_PATH=list(
  "/usr/local/include",
  "/usr/include",
  "/usr/include/c++/4.2.1", // a hack until cmd line option or env can extend/set the path
  "/usr/include/c++/4.2.1/x86_64-apple-darwin10", // oh yeah, a worse hack!
  "/usr/include/c++/4.4.3", // a hack until cmd line option or env can extend/set the path
  "/usr/include/c++/4.4.3/x86_64-linux-gnu", // a hack until cmd line option or env can extend/set the path
  "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include"
);

var FLX_PKGCONFIG_PATH=Empty[string];

whilst argno<System::argc do
  arg = System::argv argno;
  println$ "ARG=" + arg;
  if prefix(arg,"--root=") do
    INSTALL_ROOT=arg.[7 to];
  elif prefix(arg,"--close-delay=") do
    DELAY=strtod arg.[14 to];
  elif prefix(arg,"--port=") do
    PORT=atoi arg.[7 to];
  elif prefix(arg,"--cpath=") do
    C_PATH+=arg.[8 to];
  done
  ++argno;
done

C_PATH+= INSTALL_ROOT+"/lib/rtl";
FLX_PATH+=INSTALL_ROOT+"/lib";
FDOC_PATH+=INSTALL_ROOT+"/doc";
FLX_PKGCONFIG_PATH+=INSTALL_ROOT+"/config";

println$ "INSTALL_ROOT="+INSTALL_ROOT;
println$ "FLX_PATH="+FLX_PATH;
println$ "C_PATH="+C_PATH;
println$ "FDOC_PATH="+FDOC_PATH;
println$ "DELAY="+str DELAY;
println$ "PORT="+str PORT;

fun getline_to_url (get:string) =>
  if not startswith get "GET " then
    ""
  else
    match find (get, ' ', 4) with
    | None[int] => ""
    | Some ?pos => get.[4 to pos]
    endmatch
  endif
;

// strip off the leading http:// then split on the next /
fun split_url (inurl:string) = {
  val url =
    if startswith inurl "http://" then
      inurl.[to 7]
    else
      inurl
    endif
  ;

  return
    match find (url, '/') with
    | None[int] => None[string*string]
    | Some ?pos => Some$ url.[0 to pos], url.[pos + 1 to]
    endmatch
  ;
}

// parse balance of HTTP GET request (after gthe GET keyword)
fun parse_get_line (get:string) =>
  split_url$ getline_to_url get
;

// fixup text by replacing < > and & characters
fun txt2html (x:string) =
{
  var out2 = "";
  var i:int;
  forall i in 0 upto len x-1 do
    var ch = x.[i];
    if ch == char "<" do out2+="&lt;";
    elif ch == char ">" do out2+="&gt;";
    elif ch == char "&" do out2+="&amp;";
    else out2+=ch;
    done
  done

  return out2;
}


// functions to make responses
fun make_image (suffix:string, contents:string) =>
let ?kind = if suffix == "jpg" then "jpeg" else suffix endif in
"""HTTP/0.9 200 OK\r
Date: Sun, 30 Apr 2006 07:14:50 GMT\r
Server: felix web server\r
Last-Modified: Sun, 28 Nov 2004 18:59:31 GMT\r
Connection: close\r
Content-Type: image/""" + kind + """\r
Content-Length: """ + str (len contents) + """\r
\r
"""+contents;

fun make_css (contents:string) =>
"""HTTP/0.9 200 OK\r
Date: Sun, 30 Apr 2006 07:14:50 GMT\r
Server: felix web server\r
Last-Modified: Sun, 28 Nov 2004 18:59:31 GMT\r
Connection: close\r
Content-Type: text/css\r
Content-Length: """ + str (len contents) + """\r
\r
"""+contents;


fun make_not_found (contents:string) =>
"""HTTP/0.9 404 Not Found\r
Date: Sun, 30 Apr 2006 07:14:50 GMT\r
Server: felix web server\r
Last-Modified: Sun, 28 Nov 2004 18:59:31 GMT\r
Connection: close\r
Content-Type: text/html\r
Content-Length: """ + str ((len contents) + 18) + """\r
\r
PAGE NOT FOUND: """ + contents + """\r
""";

fun make_forbidden (contents:string) =>
"""HTTP/0.9 403 Forbidden\r
Date: Sun, 30 Apr 2006 07:14:50 GMT\r
Server: felix web server\r
Last-Modified: Sun, 28 Nov 2004 18:59:31 GMT\r
Connection: close\r
Content-Type: text/html\r
Content-Length: """ + str((len contents) + 11) + """\r
\r
Forbidden: """ + contents + """\r
""";

fun make_raw (contents:string) =>
"""HTTP/0.9 200 OK\r
Date: Tue, 25 Apr 2006 00:16:12 GMT\r
Server: felix web server\r
Last-Modified: Wed, 01 Feb 2006 18:51:37 GMT\r
Connection: close\r
Content-Type: application/octet-stream\r
Content-Length: """ + str (len (contents)) +"""\r
\r
""" + contents;

fun make_html (contents:string) =>
"""HTTP/0.9 200 OK\r
Date: Tue, 25 Apr 2006 00:16:12 GMT\r
Server: felix web server\r
Last-Modified: Wed, 01 Feb 2006 18:51:37 GMT\r
Connection: close\r
Content-Type: text/html\r
Content-Length: """ + str (len contents) + """\r
\r
""" + contents;

fun make_xhtml (contents:string) =>
"""HTTP/0.9 200 OK\r
Date: Tue, 25 Apr 2006 00:16:12 GMT\r
Server: felix web server\r
Last-Modified: Wed, 01 Feb 2006 18:51:37 GMT\r
Connection: close\r
Content-Type: application/xhtml+xml\r
Content-Length: """ + str (len contents) + """\r
\r
""" + contents;


fun get_file (fname:string, path:list[string]) = {
  if fname.[0] == char "$" do fname = fname.[1 to]; done
  if FileSystem::fileexists fname do return Some fname;
  else
    var f = Filename::join(INSTALL_ROOT,fname);
    if FileSystem::fileexists f do return Some f;
    else return FileSystem::find_in_path (fname, path);
    done
  done
}


proc serve_not_found (k:socket_t, fname:string) {
   var eof_flag = false;
   val data = make_not_found(fname);
   write_string(k,data,&eof_flag);
}

proc serve_forbidden (k:socket_t, fname:string) {
   var eof_flag = false;
   val data = make_forbidden(fname);
   write_string(k,data,&eof_flag);
}

fun get_flx (fname:string) = {
  var flx =
    match get_file(fname,FLX_PATH) with
    | Some ?name => Text_file::load(name)
    | None => f"NO FILE %S FOUND IN %S" (fname, str FLX_PATH)
    endmatch
  ;
  println$ "Loaded felix file " + fname+", len="+str (len flx);
  return flx;
}

fun get_cpp (fname:string) = {
  var flx =
    match get_file(fname,C_PATH) with
    | Some ?name => Text_file::load(name)
    | None => "NO FILE "+fname+" FOUND IN " + str C_PATH
    endmatch
  ;
  println$ "Loaded c++ file " + fname+", len="+str (len flx);
  return flx;
}


proc serve_felix (k:socket_t, fname:string) {
  var eof_flag = false;

  match get_file(fname,C_PATH) with
  | Some ?path =>
    {
      val text = Text_file::load path;
      val dirname = Filename::dirname path;
      val data = make_html$
        "<html><head>%S</head><body><pre>%S</pre></body></html>\n\r"
        Css4Html::flx_head
        (Flx2Html::xlat_felix (text, dirname));

      write_string(k,data,&eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;

}

proc serve_fpc (k:socket_t, fname:string) {
  var eof_flag = false;

  match get_file (fname, FLX_PKGCONFIG_PATH) with
  | Some ?path =>
    {
      val text=Text_file::load path;
      val dirname = Filename::dirname path;
      val data = make_html$
        "<html><head>%S</head><body><pre>%S</pre></body></html>\n\r"
        Css4Html::flx_head
        (Fpc2Html::xlat_fpc (text, dirname));

      write_string(k,data,&eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;

}

fun get_py (fname:string) = {
  var flx =
    match get_file(fname,FLX_PATH) with
    | Some ?name => Text_file::load(name)
    | None => f"NO FILE %S FOUND IN %S" (fname, str FLX_PATH)
    endmatch;

  println$ f"Loaded Python file %S, len=%d" (fname, len flx);
  return flx;
}

proc serve_py (k:socket_t, fname:string) {
  var eof_flag = false;
  var flx = get_flx fname;
  val data = make_html$
    "<html><head>%S</head><body><pre>%S</pre></body></html>\n\r"
    Css4Html::flx_head
    (Py2Html::xlat_py flx);

  write_string (k, data, &eof_flag);
}

fun get_ocaml (fname:string) = {
  var flx =
    match get_file (fname, FLX_PATH) with
    | Some ?name => Text_file::load name
    | None => f"NO FILE %S FOUND IN %S" (fname, str FLX_PATH)
    endmatch
  ;

  println$ f"Loaded Ocaml file %S, len=%d" (fname, len flx);
  return flx;
}

proc serve_ocaml (k:socket_t, fname:string) {
  var eof_flag = false;
  var flx = get_flx fname;
  val data = make_html$
    "<html><head>%S</head><body><pre>%S</pre></body></html>\n\r"
    Css4Html::flx_head
    (Ocaml2Html::xlat_ocaml flx);

  write_string (k, data, &eof_flag);
}

proc serve_cpp (k:socket_t, fname:string) {
  var eof_flag = false;
  var text: string;

  match get_file(fname,C_PATH) with
  | Some ?path =>
    {
      val text=Text_file::load path;
      val dirname = Filename::dirname path;
      val data = make_html$
        "<html><head>%S</head><body><pre>%S</pre></body></html>\n\r"
        Css4Html::flx_head
        (Cpp2Html::xlat_cpp (text, dirname));

      write_string (k, data, &eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;
}

val text_suffices = (
  "txt","py","ml","mli",
  "tex","pl","dyp",
  "why","resh","pak","ipk",
  "dep","stdout","expect"
);

proc serve_text (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = Text_file::load(fname);
  println$ f"Loaded text file %S, len=%d" (fname, len txt);
  val data = make_html$
    "<html><head></head><body><pre>%S</pre></body></html>\n\r"
    txt;

  write_string (k, data, &eof_flag);
}

proc serve_html (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = Text_file::load fname;
  println$ f"Loaded html file %S, len=%d" (fname, len txt);
  val data = make_html txt;

  write_string (k, data, &eof_flag);
}

proc serve_xhtml (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = Text_file::load fname;
  println$ f"Loaded html file %S, len=%d" (fname, len txt);
  val data = make_xhtml txt;

  write_string (k, data, &eof_flag);
}


fun get_fdoc (fname:string):string = {
  var flx =
    match get_file(fname,FDOC_PATH) with
    | Some ?name => Text_file::load(name)
    | None => f"NO FILE %S FOUND IN %S" (fname, str FDOC_PATH)
    endmatch
  ;

  println$ f"Loaded fdoc file %S, len=%d" (fname, len flx);
  return flx;
}

proc serve_fdoc (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = get_fdoc(fname);
  //println$ "Contents=" + flx;
  val data = make_html(
    "<html><head>"+Css4Html::flx_head+"</head>"+
    "<body>"+
    Fdoc2Html::xlat_fdoc txt+
    "</body></html>\n\r"
  );
  write_string(k,data,&eof_flag);
}

proc serve_xfdoc (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = get_fdoc(fname);
  //println$ "Contents=" + flx;
  val data = make_xhtml(
'''<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"  
 "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">  
 <html xmlns="http://www.w3.org/1999/xhtml">'''+
    "<head>"+Css4Html::flx_head+"</head>"+
    "<body>"+
    Fdoc2Html::xlat_fdoc txt+
    "</body></html>\n\r"
  );
  write_string(k,data,&eof_flag);
}


proc serve_raw (k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = Text_file::load fname;
  println$ f"Loaded raw file %S, len=%d" (fname, len txt);
  //println$ "Contents=" + flx;
  val data = make_raw txt;
  write_string (k, data, &eof_flag);
}

proc serve_image (k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = Text_file::load fname;
  println$ f"Loaded image file %S, len=%d" (fname, len txt);
  //println$ "Contents=" + flx;
  val data = make_image (suffix,txt);
  write_string (k, data, &eof_flag);
}

proc serve_css(k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = Text_file::load fname;
  println$ f"Loaded css file %S, len=%d" (fname, len txt);
  //println$ "Contents=" + flx;
  val data = make_css txt;
  write_string(k,data,&eof_flag);
}

fun mk_dir_lines (fname:string, dirs: list[string]) = {
  fun rf(f:string)=>'  <a href="/$'+ fname + '/' +f+'">'+f+'</a>';
  return 
    fold_left (fun (acc: string) (f:string) => 
      match f with 
      | "." => acc 
      | ".." => acc
      | _ => acc + rf f + "\r\n" 
      endmatch
    ) 
    "" 
    dirs
  ;
}

  
fun mk_reg_lines (fname:string, files: list[string]) = {
  var eof = false;
  var s = "";
  var old_base = "";
  var base = "";
  var extn = "";
  var entry = "";
  var exts = Empty[string];
  var rest = files;

  proc hd() { chd; }
  proc chd() { exts=list(extn); old_base=base; }
  proc cft() {
    println$ "Cft for key " + old_base + " exts=" + str exts;
    fun rf(x:string)=>
      '  <a href="/$'+ fname + '/' +old_base+x+'">'+
      if x == "" then "(none)" else x endif +
      '</a>'
    ;
    def var extn, var rest = match exts with | Cons(?h,?t)=> h,t endmatch;
    s+= '  <a href="/$'+ fname + '/' +old_base+extn +'">'+old_base+extn+'</a>';
    List::iter (proc (x:string){ s+=" "+rf x; }) rest;
  }
  proc ft() { cft; s+="\r\n"; }
  proc twixt() { s+="\r\n"; }
  proc cbrk () { cft; twixt; chd; }
  proc nxt() { 
    match rest with 
    | Cons(?h,?t) => 
      entry = h; rest = t;
      base,extn =
        match rfind (entry, ".") with
        | None[int] => entry, "" 
        | Some ?pos => entry.[to pos], entry.[pos to]
        endmatch
      ;
    | Empty => eof = true;   
    endmatch;
  }

  //special case for empty list
  if len files == 0 do return ""; done

  nxt;                    //prime the system
  hd;                     // head off

again:>
  nxt;
  if eof goto fin;        //check for eof
  if base == old_base do  //check for control break
    exts += extn;         // nope, same key
  else 
    cbrk;                 // key changed
  done
  goto again;
fin:>
  ft;                     // foot off
  return s;
}

proc serve_directory (k:socket_t, fname:string) {
  var dirname = Filename::basename fname;
  var eof_flag = false;
  val top = "A DIRECTORY " + fname + "\r\n";
  val flist = 
    match FileSystem::filesin fname with
    | Some ?files =>
      let ?aux = 
          fun (ls2:list[string] * list[string]) (f:string) =>
          match ls2 with | ?ds,?rs => match FileSystem::filetype (Filename::join (fname,f)) with
            | DIRECTORY => Cons (f,ds), rs
            | REGULAR => ds, Cons (f,rs)
            | _ => ls2
            endmatch
          endmatch
      in
      let ?dirs,?regs = fold_left aux (Empty[string], Empty[string]) files in
      let ?dirs,?regs = sort dirs, sort regs in
      let ?dir_lines = mk_dir_lines (fname,dirs) in
      let ?reg_lines = mk_reg_lines (fname,regs) in
        "<pre>"+ 
        '  <a href="/"><em>home</em></a>\r\n'+
        if dir_lines.len != 0 then ' Directories: \r\n' + dir_lines else "" endif +
        if reg_lines.len != 0 then ' Files: \r\n' + reg_lines else "" endif +
        "</pre>"
    | None => "ERROR ACCESSING DIRECTORY"
    endmatch
  ;
  val page = make_html(top + flist);
  write_string(k,page,&eof_flag);
}


proc serve_file(s: socket_t, infname: string)
{
  var eof_flag = false;
  // if empty string, serve index.html
  // not quite right - needs to handle directories too, so
  // not only foo.com/ -> index.html, but foo.com/images/ -> images/index.html
  var fname = if "" == infname then "index.html" else infname endif;

  fname = if fname.[0] == char "$" then fname.[1 to] else fname endif;

  // set mime type depending on extension...
  // serve a "not found page" for that case (check for recursion)
  print "serve file: "; print fname; endl;

  // figure out the filetype
  // we first check if the filename has a suffix like ?cpp
  // which is a trick done by us to force the filetype
  // to be "c++" for C++ standard include file names 
  // which have no suffix. If we find that, we strip it
  // out of the filename too. Otherwise we just find
  // the suffix.

  var suffix = "";
  match rfind (fname, "?") with
  | Some ?pos => { suffix = fname.[pos + 1 to]; fname=fname.[0 to pos]; }
  | None[int] =>
    {
      match rfind (fname, ".") with
      | None[int] => {}
      | Some ?pos => { suffix = fname.[pos + 1 to]; }
      endmatch; 
    }
  endmatch;

  print "suffix is "; print suffix; endl;

  if suffix in list ("flx","flxh") do 
    serve_felix(s, fname);
  elif suffix in list ("py") do 
    serve_py(s, fname);
  elif suffix in list ("ml","mli") do 
    serve_ocaml(s, fname);
  elif suffix in list("cpp","hpp","h","c","cc","i","cxx","rtti","includes","ctors_cpp") do 
    serve_cpp(s, fname);
  elif suffix == "fpc" do 
    serve_fpc(s, fname);
  elif suffix == "fdoc" do 
    serve_xfdoc(s, fname);
  elif suffix in ("html","htm") do
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_html(s,fname);
  elif suffix == "xhtml" do
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_xhtml(s,fname);
  elif suffix in text_suffices do
    serve_text(s,fname);
  elif suffix in ("gif","png","jpg") do
    // path lookup for images
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_image(s,fname,suffix);
  elif suffix == "css" do
    // path lookup for css files
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_css(s,fname,suffix);
  else
    match get_file(fname, Empty[string]) with
    | None => { serve_not_found(s,fname); }
    | Some ?f =>
      {
        if prefix(fname,"/etc") do serve_forbidden(s,fname);
        else
        match FileSystem::filetype f with
        | FileSystem::REGULAR => { serve_raw(s,f,suffix); }
        | FileSystem::DIRECTORY => { serve_directory (s,f); }
        | _ => { serve_not_found(s,f); }
        endmatch;
        done
      }
    endmatch;
  done
}
val webby_port = PORT;

print "FLX WEB!!! listening on port "; print webby_port; endl;

// up the queue len for stress testing
var p = webby_port;
var listener: socket_t;
mk_listener(&listener, &p, 10);

var clock = Faio::mk_alarm_clock();

// noinline is necessary to stop the closure being
// inlined into the loop, preventing the socket variable k
// being duplicated as it must be [a bug in Felix]
noinline proc handler (var k:socket_t) ()
{
   dbg$ "Spawned fthread running for socket "+str k+"\n";
  // should spawn fthread here to allow for more io overlap

  var line: string;
  get_line(k, &line);  // should be the GET line.
  //cat(s, DEVNULL);

  print$ "got line from socket "+str k+": "; print line; endl;

  // now I need to parse the GET line, get a file name out of its url
  // (e.g. unqualfied -> index.html and name/flx.jpg -> flx.jpg
  match parse_get_line line with
  | None[string*string] => {
      print "BAD get line: "; print line; endl;
    }
  | Some (?base, ?file) => {
      print "well formed get...\n";
      print "base="; print base; endl;
      print "file="; print file; endl;

      serve_file(k,file);
    }
  endmatch;

  // we've only read the GET line, so let's flush out the rest of
  // the http request so we don't get connection reset errors when
  // we close the socket. shutting down stops cat blocking (?)
  //Faio_posix::shutdown(s, 1); // disallow further sends.
  //cat(s, DEVNULL);

  fprint$ cerr,"fthread socket "+str k+" close delay ..\n";
  Faio::sleep(clock,DELAY); // give OS time to empty its buffers
  fprint$ cerr,"fthread socket "+str k+" shutdown now\n";

// try this:
// Advised by: koettermarkus@gmx.de, MANY THANKS!

  gen hack_recv: socket_t * &char * int * int -> int = "recv($1,$2,$3,$4)";

  var buf:char ^1025;
  var counter = 0;
  var extra = 0;
  shutdown(k,1); // shutdown read
retry:>
  var b = hack_recv(k,C_hack::cast[&char] (&buf),1024,0);
  //println$ "Error code " + str b + " from read after shutdown";
  if b > 0 do
    extra += b;
    if extra > 2000 do
      println$ "Read too many extraneous bytes from OS buffer";
      goto force_close;
     done;
   goto retry;
  elif b == -1 do
    ++counter;
    if counter > 200 do
      println "Timeout waiting for write buffers to be flushed";
      goto force_close;
    done;
    Faio::sleep(clock,0.1); // 100 ms
    goto retry;
  done;
  assert b==0;

force_close:> 
  Socket::shutdown(k,2);
  ioclose(k);
  fprint$ cerr,"fthread "+str k+" terminating!\n";
};

forever {
  var s: socket_t;
  dbg$ "Waiting for connection\n";
  accept(listener, &s);  // blocking
  dbg$ "got connection "+str s + "\n";  // error check here

  // hmm - spawning an fthread is blocking the web server. don't know why
  print$ "spawning fthread to handle connection "+str s+"\n";
  var h = handler s;
  spawn_fthread  h;
 //collect(); // this hangs everything, no idea why!
};

println "WEB SERVER FINNISHED?";
iclose (listener);
