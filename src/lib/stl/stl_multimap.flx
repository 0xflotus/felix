include "stl/stl";
  module MultiMap[k,v]
  {
    requires std_stl_map;
    type stl_multimap = "std::multimap<?1,?2>";
    type stl_multimap_iterator = "std::multimap<?1,?2>::iterator";
    type stl_multimap_reverse_iterator = "std::multimap<?1,?2>::reverse_iterator";
    fun create : unit -> stl_multimap[k,v] = "(FLX_GXX_PARSER_HACK std::multimap<?1,?2>())";
    fun subscript: stl_multimap[k,v] * k -> lvalue[v] = "$1[$2]";
    fun find : stl_multimap[k,v] * k ->  stl_multimap_iterator[k,v] = "$1.find($2)";
    fun mem : stl_multimap[k,v] * k -> bool = "$1.find($2) != $1.end()";
    proc insert : stl_multimap[k,v] * k * v = "$1.insert(std::make_pair($2,$3));";
// MultiMap
  instance Eq[stl_multimap[k,v]] {
    fun eq: stl_multimap[k,v] * stl_multimap[k,v] -> bool = "$1==$2";
  }
  instance Container[stl_multimap[k,v],k*v] {
    fun len: stl_multimap[k,v] -> size = "$1.size()";
    fun empty: stl_multimap[k,v] -> bool = "$1.empty()";
  }
  instance Sequence[stl_multimap[k,v],stl_multimap_iterator[k,v],k*v] {
    fun begin : stl_multimap[k,v]-> stl_multimap_iterator[k,v]= "$1.begin()";
    fun end : stl_multimap[k,v]-> stl_multimap_iterator[k,v]= "$1.end()";
    proc erase : stl_multimap[k,v] * stl_multimap_iterator[k,v] = "$1.erase($1);";
    proc erase_between : stl_multimap[k,v] * stl_multimap_iterator[k,v] * stl_multimap_iterator[k,v] = "$1.erase($1,$2);";
    proc clear : stl_multimap[k,v] = "$1.clear();";
  }
  instance Reversible_Sequence[stl_multimap[k,v],stl_multimap_iterator[k,v],stl_multimap_reverse_iterator[k,v],k*v] {
    fun rbegin : stl_multimap[k,v]-> stl_multimap_reverse_iterator[k,v]= "$1.rbegin()";
    fun rend : stl_multimap[k,v]-> stl_multimap_reverse_iterator[k,v]= "$1.rend()";
  }

// MultiMap iterator
  instance Eq[stl_multimap_iterator[k,v]] {
    fun eq: stl_multimap_iterator[k,v] * stl_multimap_iterator[k,v] -> bool = "$1==$2";
  }
  instance Tord[stl_multimap_iterator[k,v]] {
    fun lt: stl_multimap_iterator[k,v] * stl_multimap_iterator[k,v] -> bool = "$1<$2";
  }
  instance Iterator[stl_multimap_iterator[k,v],k*v] {
    fun deref : stl_multimap_iterator[k,v] ->  lvalue[k*v]  = "*(#0*)(void*)&*$1";
  }
  instance Forward[stl_multimap_iterator[k,v]] {
    fun succ: stl_multimap_iterator[k,v] -> stl_multimap_iterator[k,v] = "$1+1";
    proc pre_incr : &stl_multimap_iterator[k,v] = "++*$1;";
    proc post_incr : &stl_multimap_iterator[k,v] = "++*$1;";
  }
  instance Forward_iterator[stl_multimap_iterator[k,v],k*v] {}
  instance Bidirectional[stl_multimap_iterator[k,v]] {
    fun pred: stl_multimap_iterator[k,v] -> stl_multimap_iterator[k,v] = "$1-1;";
    proc pre_decr : &stl_multimap_iterator[k,v] = "--*$1;";
    proc post_decr : &stl_multimap_iterator[k,v] = "--*$1;";
  }
  instance Bidirectional_iterator[stl_multimap_iterator[k,v],k*v] {}

//MultiMap reverse iterator
  instance Eq[stl_multimap_reverse_iterator[k,v]] {
    fun eq: stl_multimap_reverse_iterator[k,v] * stl_multimap_reverse_iterator[k,v] -> bool = "$1==$2";
  }
  instance Tord[stl_multimap_reverse_iterator[k,v]] {
    fun lt: stl_multimap_reverse_iterator[k,v] * stl_multimap_reverse_iterator[k,v] -> bool = "$1<$2";
  }
  instance Iterator[stl_multimap_reverse_iterator[k,v],k*v] {
    fun deref : stl_multimap_reverse_iterator[k,v] ->  lvalue[k*v]  = "*(#0*)(void*)&*$1";
  }
  instance Forward[stl_multimap_reverse_iterator[k,v]] {
    fun succ: stl_multimap_reverse_iterator[k,v] -> stl_multimap_reverse_iterator[k,v] = "$1+1";
    proc pre_incr : &stl_multimap_reverse_iterator[k,v] = "++*$1;";
    proc post_incr : &stl_multimap_reverse_iterator[k,v] = "++*$1;";
  }
  instance Forward_iterator[stl_multimap_reverse_iterator[k,v],k*v] {}
  instance Bidirectional[stl_multimap_reverse_iterator[k,v]] {
    fun pred: stl_multimap_reverse_iterator[k,v] -> stl_multimap_reverse_iterator[k,v] = "$1-1;";
    proc pre_decr : &stl_multimap_reverse_iterator[k,v] = "--*$1;";
    proc post_decr : &stl_multimap_reverse_iterator[k,v] = "--*$1;";
  }
  instance Bidirectional_iterator[stl_multimap_reverse_iterator[k,v],k*v] {}

}

open MultiMap;
open[k,v] Reversible_Sequence[
  MultiMap::stl_multimap[k,v],
  MultiMap::stl_multimap_iterator[k,v],
  MultiMap::stl_multimap_reverse_iterator[k,v],k*v];
open[k,v] Bidirectional_iterator[MultiMap::stl_multimap_iterator[k,v],k*v];
open[k,v] Bidirectional_iterator[MultiMap::stl_multimap_reverse_iterator[k,v],k*v];


