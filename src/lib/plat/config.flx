include "std/version";

class Config {

  fun config () = 
  {
    var install_line = RE2("FLX_INSTALL_DIR: (.*)");

    // global defaults
    var PREFIX = Filename::join ("/usr","local","lib");
    var INSTALL_ROOT_TOPDIR= Filename::join (PREFIX,"felix");
    var INSTALL_ROOT = Filename::join (INSTALL_ROOT_TOPDIR, "felix-"+Version::felix_version);
    var FLX_INSTALL_DIR = INSTALL_ROOT;
    var FLX_TARGET_SUBDIR = "host";

    // try HOME/.felix/config/felix.fpc
    var HOME = Env::getenv("HOME");
    var felix_dir = Filename::join (HOME, ".felix");
    var config_dir = Filename::join (felix_dir, "config");
    var control_file = Filename::join (config_dir, "felix.fpc");
    var text = load control_file;
    if text == "" do
      println$ "config::WARNING: No $HOME/.felix/config/felix.fpc file!";
    done
    var lines = split (text, char "\n");
    for line in lines do
      var found = Match (install_line, line);
      match found with
      | Some ?v when v.len.int == 2 => 
        println$ "Setting FLX_INSTALL_DIR from " + control_file;
        FLX_INSTALL_DIR = strip (v.1);
      | None => ;
      endmatch;
    done

    // try environment
    var env_flx_install_dir = Env::getenv ("FLX_INSTALL_DIR");
    if env_flx_install_dir != "" do
      FLX_INSTALL_DIR = env_flx_install_dir;
      println$ "Resetting FLX_INSTALL_DIR from env to '" + FLX_INSTALL_DIR+"'";
    done

    // final result can still be overriden by command line switch
    println$ "FLX_INSTALL_DIR='" + FLX_INSTALL_DIR+"'";
    return (FLX_INSTALL_DIR=FLX_INSTALL_DIR, FLX_TARGET_SUBDIR=FLX_TARGET_SUBDIR);
  }

  typedef config_type = typeof (#config);
}

