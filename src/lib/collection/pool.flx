publish """
Container to handle resource pooling, from construction to destruction.
A handle to a pool structure is obtained by calling create_pool with a
constructor function and pool size.

The pool structure contains three closures:
  get_next returns opt[pol member type] for obtaining a member of the pool
  free for returning a member to the pool
  destroy preforms custom shutdown of pool members by destroy_member on all pool members.

There are three pool types which determinie how the pool operates:
   INF   Infinte pool provides existing member if available other wise creates new.
             Freed members are returned to pool 
   CIR   Circular Pool cycles through members. Members may be handed out multiple times
   FIN;  Finite Pool hands out membebers till supply exahusted.
         Freed members are returned to the pool 

Example:
instance Pool[string] {
  proc destroy_member(s:string) { println("Shreding:"+s); }  
}

open Pool[string];
println("Circular Pool");
var j=0;
val n = pool((fun () ={ j++;return "CIR Member "+str(j);}),size(3),CIR);
for var k in 0 upto 7 do
    println(n.get_next());
done
n.destroy();

"""
class Pool[s] {
  struct pool =
  {
     get_next : unit -> opt[s];
     free : s -> void;
     destroy : unit -> void;
  };

  union pool_type = 
    |INF  /* Infinte pool provides existing member if available other wise creates new.
             Freed members are returned to pool */
    |CIR  // Circular Pool cycles through members. Members may be handed out multiple times
    |FIN; /* Finite Pool hands out membebers till supply exahusted.
             Freed members are returned to the pool */

  fun _ctor_pool (constructor:1->s,sz:size,typ:pool_type):pool = { 
    var i = size(0);
    var p:list[s] = list ( (fun () ={ if i<sz do i++;return Some (constructor()); 
                                      else return None[s]; done }) );
    var rotation =  p;
    var members = p;
    gen get_next () : opt[s] = {
       match rotation  with 
          | Cons (?h,?t) =>  rotation = t;return (Some h);
          | Empty[list[s]] => match typ with |INF => rotation = Cons(constructor(),
                                                                     rotation); 
                                                                members=rotation+members; 
                                                                return get_next();
                                             |CIR => rotation = p; return get_next();
                                             |FIN => return None[s];
                              endmatch;
        endmatch;
      done
      return None[s];
    }

    proc free(e:s)  {
      match typ with
        |FIN => rotation = Cons(e,rotation);return;
        |INF => rotation = Cons(e,rotation);return;
        |_   => return;
      endmatch;
    }

    proc destroy() { 
      iter (proc (i:s) { destroy_member i; }) members;
    }

    return pool(get_next,(free),(destroy)) ;
  }

  publish """ Implemented to allow custom shut down and deallocation """
  virtual proc destroy_member: s;

}

