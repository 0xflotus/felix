include "./fdoc-frame-interface";

fun setup (config_data:string) = {
  eprintln$ "Setup fdoc_frame v1.5 " + config_data;
  return 0;
}


object fdoc_frame (d:fdoc_frame_data_t) implements fdoc_frame_t = 
{
  val toc_width = 200; // should be 0, temporary hack for testing!

  method fun whatami () => "fdoc_frame maker";

  method proc set_toc_width (tw: int) => toc_width = tw;

  method fun make_frame (out:string) :string = 
  {
    var o = ""; // html output
    reserve(&o, 10000 + out.len.int);
    var headings = #(d.heading.get_headings);

    // Whole page defaults and background
    o+='<div class="container">';

    o+='''
      <style>
      @media (min-width: 768px) {
          .toc { float:left; width: 200px; }
          .content { margin-left:220px; }

          .affix { position: fixed; top: 0; overflow: auto; max-height: 100%; } 
          .affix-top { position: relative; top: 0; } 
          .affix-bottom { position: relative; bottom: 0; } 
      }
      @media (max-width: 767px) {
          .affix { position: relative; } 
          .affix-top { position: relative; } 
          .affix-bottom { position: relative; } 
      }
      @media (max-width: 600px) {
          .toc { display: none !important; }
      }
      </style>

      <div class="header hidden-print">
        <ul class="nav nav-pills"  role="tablist">
          <li role="presentation"><a href="/">Home</a></li>
          <li role="presentation"><a href="/share/src/web/download.html">Download</a></li>
          <li role="presentation" class="active"><a href="/share/src/web/documentation.html">Documentation</a></li>
          <li role="presentation"><a href="/share/src/web/community.html">Community</a></li>
        </ul>
        <h3 class="text-muted">Felix Documentation</h3>
      </div>
    ''';


    var previous_depth = 0;
    var sections = list[int]();


    val min_headings = 0;
    if headings.len.int > min_headings  do

        // print out the table of contents
        o+='<div class="toc nav hidden-print" data-spy="affix" data-offset-top="110" data-offset-bottom="0">\n';

        // include search form (using google)
        o+='''
        <script type="text/javascript">
            function prepend_search() {
                var search = document.getElementById("search");
                var q = document.getElementById("q");
                q.value = "site:felix-lang.org " + search.value;
                return true;
            }
        </script>
        <form action="https://www.google.com/search" method="get" onsubmit="return prepend_search()">
        <input type="text" name="search" id="search" placeholder="Search website" />
        <input type="hidden" name="q" id="q" value="" />
        </form>
        ''';

        iter proc (depth:int, heading:string) { 

            // if we are going shallow, restore previous counter i.e. list(2,2,1) -> list(2,1)
            (depth < previous_depth) ?? sections = tail sections;

            // if same depth, just increment counter  i.e. list(1,1) -> list(2,1)
            (depth == previous_depth) ?? sections = ((head sections) + 1) + (tail sections);

            // if we are going deeper, append a new counter and start it at 1
            (depth > previous_depth) ?? sections += 1;   // i.e. list(2) -> list (1,2)

            // handle open/closing of tags
            (depth > previous_depth) ?? o += "<ul>";
            (depth < previous_depth) ?? o += "</ul>";

            // conver the list to a string that represents the section number
            var str_sections = 
                sections                                    // i.e. list(3,2,1)
                |> rev                                      // i.e. list(1,2,3)
                |> map (fun (x:int) => str(x))              // i.e. list("1","2","3")
                |> (fun (x:list[string]) => strcat(".")(x)) // i.e. "1.2.3"
            ;

            // print out the link
            o += '<li class="depth'+depth+'">'+
                    '<a href="#' + heading + '_h">'+
                        heading+
                    '</a>'+
                 '</li>\n'
            ;

            // store previous depth for state change detection
            previous_depth = depth;

        } headings ;

        // unwind any nested elements
        for var x in 1 upto previous_depth do
            o+="</ul>";
        done

        o+="</div>"; // end TOC
    done


    // MAIN CONTENT
    o+='<div class="content">'+out+'</div>\n';

    o+='''</div>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
    '''; // end of class='whole_page'
    return o;
  }

}
export fun setup of (string) as "fdoc_frame_setup";
export fun fdoc_frame of (fdoc_frame_data_t) as "fdoc_frame";

