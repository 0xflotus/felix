include "sdl/SDL2";
include "sdl/SDL_ttf";
include "sdl/SDL_image";

class FlxGui 
{

proc init()
{
  if SDL_Init(SDL_INIT_AUDIO \| SDL_INIT_VIDEO) < 0  do
    eprintln$ f"Unable to init SDL: %S\n" #SDL_GetError;
    System::exit(1);
  done
  println$ "SDL_init OK";
  if TTF_Init() < 0 do 
    eprintln$ f"Unable to init TTF: %S\n" #TTF_GetError;
    System::exit(1);
  done
  println$ "TTF_init OK";
  if IMG_Init(IMG_INIT_PNG) < 0 do 
    eprintln$ f"Unable to init IMG with PNG: %S\n" #IMG_GetError;
    System::exit(1);
  done
  println$ "IMG_init OK";
}

proc versions ()
{
  begin
    var compiled = #SDL_Compiled_Version;
    var linked = #SDL_Linked_Version;
    println$ f"We compiled against SDL version %d.%d.%d ..."
      (compiled.major.int, compiled.minor.int, compiled.patch.int);
    println$ f"But we are linking against SDL version %d.%d.%d."
      (linked.major.int, linked.minor.int, linked.patch.int);
  end 

  begin
    var compiled = #TTF_Compiled_Version;
    var linked = #TTF_Linked_Version;
    println$ f"We compiled against TTF version %d.%d.%d ..."
      (compiled.major.int, compiled.minor.int, compiled.patch.int);
    println$ f"But we are linking against TTF version %d.%d.%d."
      (linked.major.int, linked.minor.int, linked.patch.int);
  end 

  begin
    var compiled = #IMG_Compiled_Version;
    var linked = #IMG_Linked_Version;
    println$ f"We compiled against IMG version %d.%d.%d ..."
      (compiled.major.int, compiled.minor.int, compiled.patch.int);
    println$ f"But we are linking against IMG version %d.%d.%d."
      (linked.major.int, linked.minor.int, linked.patch.int);
  end 

} 

fun OSX_dflt_font() => "/Library/Fonts/Courier New Bold.ttf";  

gen get_font (font_file:string) = {
  var font = TTF_OpenFont (font_file,12);
  if not (TTF_ValidFont font) do
    eprintln$ f"Unable to open TTF font %S\n" font_file;
    System::exit 1;
  done
  TTF_SetFontKerning (font,0);
  var isfixed = TTF_FontFaceIsFixedWidth (font);
  println$ "Opened Font " + font_file + 
    " Facename: " + TTF_FontFaceFamilyName font + 
    (if isfixed>0 then " MONOSPACED" else " VARIABLE WIDTH");
  return font;
}

typedef window_t = SDL_Window;
typedef font_t = TTF_Font;
typedef drawing_surface_t = SDL_Surface;
typedef colour_t = SDL_Color;
typedef point_t = SDL_Point;
typedef rect_t = SDL_Rect;

fun RBG (r:int, b:int, g:int) => 
  SDL_Color (r.uint8, b.uint8, g.uint8, 0u8)
;
 
gen create_window (title:string, xpos:int, ypos:int, width:int,height:int) : window_t =
{
  var window = SDL_CreateWindow(
    title,
    xpos,ypos,
    width, height,
    SDL_WINDOW_SHOWN \| SDL_WINDOW_RESIZABLE
  );
  return window;
}

proc destroy_window (w:window_t) { SDL_DestroyWindow w; }

fun get_lineskip (f: font_t) => TTF_FontHeight(font) + 1;

proc write(w:window_t, x:int, y:int, font:font_t, c: colour_t, s:string)
{
    var rendered = TTF_RenderText_Solid (font,s,c);
    var rect : SDL_Rect;
    rect.x = x;
    rect.y = y; // w,h are don't care
    var nullRect = C_hack::null[SDL_Rect];
    var window_surface = SDL_GetWindowSurface w;

    var result = SDL_BlitSurface (rendered, nullRect, window_surface, &rect); 
    if result != 0 do
      eprintln$ "Unable to blit text to window surface";
      System::exit 1;
    done
    SDL_FreeSurface rendered;
   
    result = SDL_UpdateWindowSurface w;
    if result != 0 do
      eprintln$ "Unable to update window";
      System::exit 1;
    done
}

// clear whole window
proc clear_window (w:window_t, c: colour_t)
{
  var surf = SDL_GetWindowSurface w;
  var pixelformat : &SDL_PixelFormat  = surf*.format;
  var bgpixels = SDL_MapRGB(pixelformat,c.r,c.b,c.g);
  SDL_ClearClipRect (surf);
  C_hack::ignore$ SDL_FillSurface (surf, bgpixels);
}

 
} // class FlxGui

