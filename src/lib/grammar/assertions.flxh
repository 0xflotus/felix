syntax assertions {
  requires statements;

  tstatement := "assert" sexpr ";" =># "`(ast_assert ,_sr ,_2)";

  tstatement  := "axiom" sdeclname sfun_arg ":" sexpr ";" =>#
    """
      `(ast_axiom ,_sr ,(first _2) ,(second _2) ,_3 (Predicate ,_5))
    """;

  tstatement  := "axiom" sdeclname sfun_arg ":" sexpr = sexpr ";" =>#
    """
      `(ast_axiom ,_sr ,(first _2) ,(second _2) ,_3 (Equation (,_5 ,_7)))
    """;

  tstatement  := "lemma" sdeclname sfun_arg ":" sexpr ";" =>#
    """
      `(ast_lemma ,_sr ,(first _2) ,(second _2) ,_3 (Predicate ,_5))
    """;

  tstatement  := "lemma" sdeclname sfun_arg ":" sexpr = sexpr ";" =>#
    """
      `(ast_lemma ,_sr ,(first _2) ,(second _2) ,_3 (Equation (,_5 ,_7)))
    """;

  sreduce_args := "(" stypeparameter_comma_list ")" =># "_2";

  tstatement  := "reduce" sdeclname sreduce_args ":" sexpr "=>" sexpr ";" =>#
    """
      `(ast_reduce ,_sr ,(first _2) ,(second _2) ,_3 ,_5 ,_7)
    """;
}

