//$ Primary looping contructs.
syntax loops
{
  //$ Labelled break.
  //$ Use to exit from the loop with the specified label.
  tstatement := "break" sname =># '`(ast_goto ,_sr ,(string-append "break_" _2))';


  //$ Labelled continue.
  //$ Use to continue with the next iteration of the loop with the specified label.
  tstatement := "continue" sname =># '`(ast_goto ,_sr ,(string-append "continue_" _2))';

  //$ Labelled redo.
  //$ Use to restart this iteration of the loop with the specified label.
  tstatement := "redo" sname =># '`(ast_goto ,_sr ,(string-append "redo_" _2))';

  //$ Syntax for a loop label.
  //$ Use just before the loop.
  optlabel := sname ":" =># "_1";

  //$ Loop labels aren't required.
  optlabel := sepsilon =># "(number->string (fresh_int ()))";

  //$ Standard while loop.
  tstatement := optlabel "while" sexpr "do" sstatements "done" =>#
    """ 
    `(ast_seq ,_sr
      ,(append 
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr ,_3 ,(string-append "break_" _1)))
        _5
        `((ast_goto ,_sr ,(string-append "continue_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
    ))
    """;

  //$ Negated while loop.
  tstatement := optlabel "until" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `(( ast_label ,_sr ,(string-append "continue_" _1)))
        `(( ast_unlikely_ifgoto ,_sr ,_3 ,(string-append "break_" _1)))
        _5
        `(( ast_goto ,_sr ,(string-append "continue_" _1)))
        `(( ast_label ,_sr ,(string-append "break_" _1)))
    ))
    """;

  //$ Numeric upwards for loop, existing control variable.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types and the declared control variable type must be the same.

  // Unfortunately we have to have TWO comparisons with the terminating value
  // the first to see if the body is to execute and the second to see if 
  // the incr/decr is to be done, this is because it might be the max/min value
  // in the range and the incr/decr would be invalid.

  tstatement := optlabel "for" sname "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_assign ,_sr _set ((Expr ,_sr (ast_name ,_sr ,_3 ())) none) ,_5))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        _9
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_3()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  //$ Numeric upwards for loop, also declares the control variable with type.
  //$ The control variable is local to the enclosing context, 
  //$ NOT the loop, so it can be inspected in code following the loop.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types and the declared control variable type must be the same.
  tstatement := optlabel "for" "var" sname ":" sexpr "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs (some ,_6) (some ,_8)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        _12
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  //$ Numeric upwards for loop, also declares the control variable.
  //$ The control variable is local to the enclosing context, 
  //$ NOT the loop, so it can be inspected in code following the loop.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types must be the same.
  tstatement := optlabel "for" "var" sname "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs none (some ,_6)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        _10
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;


  //$ Numeric downwards for loop, existing control variable.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types and the declared control variable type must be the same.
  tstatement := optlabel "for" sname "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_assign ,_sr _set ((Expr ,_sr (ast_name ,_sr ,_3 ())) none) ,_5))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        _9
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_3()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  //$ Numeric downwards for loop, also declares the control variable with type.
  //$ The control variable is local to the enclosing context, 
  //$ NOT the loop, so it can be inspected in code following the loop.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types and the declared control variable type must be the same.
  tstatement := optlabel "for" "var" sname ":" sexpr "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs (some ,_6) (some ,_8)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        _12
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  //$ Numeric downwards for loop, also declares the control variable.
  //$ The control variable is local to the enclosing context, 
  //$ NOT the loop, so it can be inspected in code following the loop.
  //$ Ranges are inclusive. This is essential in case
  //$ the loops if over the complete domain of the control variable type.
  //$ The start and end argument types and the declared control variable type must be the same.
  tstatement := optlabel "for" "var" sname "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs none (some ,_6)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        _10
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  //$ Basic stream consumer.
  //$ The second argument must either be a function of type:
  //$
  //$   unit -> opt[T]
  //$
  //$ or any data structure D with a function
  //$ 
  //$   iterator : D -> unit -> opt[T]
  //$
  //$ 1. The iterator function is called.
  //$ 2. If the result is None, the loop exits.
  //$ 3. If the result is Some ?t, then t is assigned to the 
  //$    control variable, 
  //$ 4. the loop body is executed, and
  //$ 6. we go back to step 1.
  tstatement := optlabel "for" sname "in" sexpr "do" sstatements "done" =>#
    """
    (let* (
     (generator_string_name (string-append "_generator_" (number->string (fresh_int ()))))
     (generator_call_name (nos generator_string_name))
     (generator_init `(ast_apply ,_sr (,(nos "iterator") ,_5 )))
     (generator_call `(ast_apply ,_sr (,generator_call_name ())))
     (some_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some") (pat_as ,_sr (pat_any ,_sr) ,_3) ))
     (some_exit `(ast_goto ,_sr ,(string-append "continue_" _1))) 
     (some_handler (append _7 `(,some_exit)))
     (none_pattern `(pat_const_ctor ,_sr ,(nos "None")))
     (none_handler `((ast_nop ,_sr, "drop thru")))
     (some_item `(,some_pattern ,some_handler))
     (none_item `(,none_pattern ,none_handler))
     (matchings `(,some_item ,none_item))
    )
    `(ast_seq ,_sr (
        (ast_var_decl ,_sr ,generator_string_name ,dfltvs none (some ,generator_init))
        (ast_label ,_sr ,(string-append "continue_" _1))
        (ast_stmt_match (,_sr ,generator_call ,matchings))
        (ast_label ,_sr ,(string-append "break_" _1))
       )))
    """;

  //$ Upmarket stream consumer.
  //$ The second argument must either be a function of type:
  //$
  //$   unit -> opt[T]
  //$
  //$ or any data structure D with a function
  //$ 
  //$   iterator : D -> unit -> opt[T]
  //$
  //$ 1. The iterator function is called.
  //$ 2. If the result is None, the loop exits.
  //$ 3. If the result is Some ?t, 
  //$    then t is matched against the pattern.
  //$ 4. If the pattern matches, loop body is executed, and
  //$ 5. we go back to step 1.
  //$ 6. If the pattern does not match,
  //$ 7. we go back to step 1
  //$    without executing the loop body.
  tstatement := optlabel "match" spattern "in" sexpr "do" sstatements "done" =>#
    """
    (let* (
     (generator_string_name (string-append "_generator_" (number->string (fresh_int ()))))
     (generator_call_name (nos generator_string_name))
     (generator_init `(ast_apply ,_sr (,(nos "iterator") ,_5 )))
     (generator_call `(ast_apply ,_sr (,generator_call_name ())))
     (some_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some")  ,_3 ))
     (some_exit `(ast_goto ,_sr ,(string-append "continue_" _1))) 
     (some_handler (append _7 `(,some_exit)))
     (some_item `(,some_pattern ,some_handler))
     (other_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some")  (pat_any ,_sr) ))
     (other_handler `(,some_exit))
     (other_item `(,other_pattern ,other_handler))
     (none_pattern `(pat_const_ctor ,_sr ,(nos "None")))
     (none_handler `((ast_nop ,_sr, "drop thru")))
     (none_item `(,none_pattern ,none_handler))
     (matchings `(,some_item ,other_item ,none_item))
    )
    `(ast_seq ,_sr (
        (ast_var_decl ,_sr ,generator_string_name ,dfltvs none (some ,generator_init))
        (ast_label ,_sr ,(string-append "continue_" _1))
        (ast_stmt_match (,_sr ,generator_call ,matchings))
        (ast_label ,_sr ,(string-append "break_" _1))
       )))
    """;


}

