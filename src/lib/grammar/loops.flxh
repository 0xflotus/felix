syntax loops
{
  tstatement := "break" sname =># '`(ast_goto ,_sr ,(string-append "break_" _2))';
  tstatement := "continue" sname =># '`(ast_goto ,_sr ,(string-append "continue_" _2))';
  tstatement := "redo" sname =># '`(ast_goto ,_sr ,(string-append "redo_" _2))';
  optlabel := sname ":" =># "_1";
  optlabel := sepsilon =># "(number->string (fresh_int ()))";

  tstatement := optlabel "while" sexpr "do" sstatements "done" =>#
    """ 
    `(ast_seq ,_sr
      ,(append 
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr ,_3 ,(string-append "break_" _1)))
        _5
        `((ast_goto ,_sr ,(string-append "continue_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
    ))
    """;

  tstatement := optlabel "until" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `(( ast_label ,_sr ,(string-append "continue_" _1)))
        `(( ast_unlikely_ifgoto ,_sr ,_3 ,(string-append "break_" _1)))
        _5
        `(( ast_goto ,_sr ,(string-append "continue_" _1)))
        `(( ast_label ,_sr ,(string-append "break_" _1)))
    ))
    """;

  // Note on for loops: ranges are inclusive. This is essential in case
  // the loops if over the complete domain of the control variable type

  // Unfortunately we have to have TWO comparisons with the terminating value
  // the first to see if the body is to execute and the second to see if 
  // the incr/decr is to be done, this is because it might be the max/min value
  // in the range and the incr/decr would be invalid.

  tstatement := optlabel "for" sname "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_assign ,_sr _set ((Expr ,_sr (ast_name ,_sr ,_3 ())) none) ,_5))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        _9
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_3()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" "var" sname ":" sexpr "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs (some ,_6) (some ,_8)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        _12
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" "var" sname "in" sexpr "upto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs none (some ,_6)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '<=) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        _10
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_incr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" sname "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_assign ,_sr _set ((Expr ,_sr (ast_name ,_sr ,_3 ())) none) ,_5))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        _9
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_3 ()),_7)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_3()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" "var" sname ":" sexpr "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs (some ,_6) (some ,_8)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        _12
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_10)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" "var" sname "in" sexpr "downto" sexpr "do" sstatements "done" =>#
    """
    `(ast_seq ,_sr
      ,(append 
        `((ast_var_decl ,_sr ,_4 ,dfltvs none (some ,_6)))
        `((ast_label ,_sr ,(string-append "redo_" _1)))
        `((ast_unlikely_ifnotgoto ,_sr
          (ast_apply ,_sr (,(noi '>=) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        _10
        `((ast_label ,_sr ,(string-append "continue_" _1)))
        `((ast_unlikely_ifgoto ,_sr
          (ast_apply ,_sr (,(noi '==) ((ast_name ,_sr ,_4 ()),_8)))
          ,(string-append "break_" _1)
        ))
        `((ast_call ,_sr ,(noi 'pre_decr) (ast_ref ,_sr (ast_name ,_sr ,_4()))))
        `((ast_goto ,_sr ,(string-append "redo_" _1)))
        `((ast_label ,_sr ,(string-append "break_" _1)))
       ))
    """;

  tstatement := optlabel "for" sname "in" sexpr "do" sstatements "done" =>#
    """
    (let* (
     (generator_string_name (string-append "_generator_" (number->string (fresh_int ()))))
     (generator_call_name (nos generator_string_name))
     (generator_init `(ast_apply ,_sr (,(nos "iterator") ,_5 )))
     (generator_call `(ast_apply ,_sr (,generator_call_name ())))
     (some_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some") (pat_as ,_sr (pat_any ,_sr) ,_3) ))
     (some_exit `(ast_goto ,_sr ,(string-append "continue_" _1))) 
     (some_handler (append _7 `(,some_exit)))
     (none_pattern `(pat_const_ctor ,_sr ,(nos "None")))
     (none_handler `((ast_nop ,_sr, "drop thru")))
     (some_item `(,some_pattern ,some_handler))
     (none_item `(,none_pattern ,none_handler))
     (matchings `(,some_item ,none_item))
    )
    `(ast_seq ,_sr (
        (ast_var_decl ,_sr ,generator_string_name ,dfltvs none (some ,generator_init))
        (ast_label ,_sr ,(string-append "continue_" _1))
        (ast_stmt_match (,_sr ,generator_call ,matchings))
        (ast_label ,_sr ,(string-append "break_" _1))
       )))
    """;

  tstatement := optlabel "match" spattern "in" sexpr "do" sstatements "done" =>#
    """
    (let* (
     (generator_string_name (string-append "_generator_" (number->string (fresh_int ()))))
     (generator_call_name (nos generator_string_name))
     (generator_init `(ast_apply ,_sr (,(nos "iterator") ,_5 )))
     (generator_call `(ast_apply ,_sr (,generator_call_name ())))
     (some_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some")  ,_3 ))
     (some_exit `(ast_goto ,_sr ,(string-append "continue_" _1))) 
     (some_handler (append _7 `(,some_exit)))
     (some_item `(,some_pattern ,some_handler))
     (other_pattern `(pat_nonconst_ctor ,_sr ,(nos "Some")  (pat_any ,_sr) ))
     (other_handler `(,some_exit))
     (other_item `(,other_pattern ,other_handler))
     (none_pattern `(pat_const_ctor ,_sr ,(nos "None")))
     (none_handler `((ast_nop ,_sr, "drop thru")))
     (none_item `(,none_pattern ,none_handler))
     (matchings `(,some_item ,other_item ,none_item))
    )
    `(ast_seq ,_sr (
        (ast_var_decl ,_sr ,generator_string_name ,dfltvs none (some ,generator_init))
        (ast_label ,_sr ,(string-append "continue_" _1))
        (ast_stmt_match (,_sr ,generator_call ,matchings))
        (ast_label ,_sr ,(string-append "break_" _1))
       )))
    """;


}

