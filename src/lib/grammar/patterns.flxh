syntax patterns {
  satom := pattern_match "endmatch" =># "_1";

  tstatement:= "match" sexpr "with" stmt_matching+ "endmatch" ";" =>#
    "`(ast_stmt_match (,_sr ,_2 ,_4))";

  stmt_matching := "|" spattern "=>" tstatement+ =># "`(,_2 ,_4)";

  pattern_match := "match" sexpr "with" smatching+ =>#
    "`(ast_match ,_sr (,_2 ,_4))";

  smatching := "|" spattern "=>" x[let_pri] =># "`(,_2 ,_4)";
  smatching := "|" "=>" sexpr =># "`((pat_none ,_sr) ,_3)";

  spattern := sas_pattern "when" sexpr =># "`(pat_when ,_sr ,_1 ,_3)";
  spattern := sas_pattern =># "_1";

  sas_pattern := scons_pattern "as" sname =># "`(pat_as ,_sr ,_1 ,_3)";
  sas_pattern := scons_pattern =># "_1";

  scons_pattern := stuple_cons_pattern "!" scons_pattern =>#
    '''`(pat_nonconst_ctor ,_sr ,(nos "Cons") (pat_tuple ,_sr (,_1 ,_3)))''';
  scons_pattern := stuple_cons_pattern =># "_1";

  stuple_cons_pattern := stuple_pattern ",," stuple_cons_pattern =>#
    "`(pat_tuple_cons ,_sr ,_1 ,_3)";
  stuple_cons_pattern := stuple_pattern =># "_1";

  stuple_pattern := scoercive_pattern ("," scoercive_pattern )* =>#
    "(chain 'pat_tuple _1 _2)";

  scoercive_pattern := satomic_pattern "|>" x[sarrow_pri] =>#
    "`(pat_coercion ,_sr ,_1 ,_3)";
  scoercive_pattern := satomic_pattern =># "_1";

  satomic_pattern := "true" =># "`(pat_const_ctor ,_sr (ast_case_tag ,_sr 1))";
  satomic_pattern := "false" =># "`(pat_const_ctor ,_sr (ast_case_tag ,_sr 0))";
  satomic_pattern := "?" sname =># "`(pat_as ,_sr (pat_any ,_sr) ,_2)";
  satomic_pattern := "_" =># "`(pat_any ,_sr)";
  satomic_pattern := "(" spattern ")" =># "_2";
  satomic_pattern := "(" ")" =># "`(pat_tuple ,_sr ())";
  satomic_pattern :=  "(" spat_assign ("," spat_assign )* ")" =>#
    "`(pat_record ,_sr ,(cons _2 (map second _3)))"
  ;
    spat_assign := sname "=" spattern =># "`(,_1 ,_3)";
  satomic_pattern := "$" "(" sexpr ")" =># "`(pat_expr ,_sr ,_3)";


  satomic_pattern := sctor_name satomic_pattern =>#
    "`(pat_nonconst_ctor ,_sr ,_1 ,_2)";
  satomic_pattern := sctor_name =># "`(pat_const_ctor ,_sr ,_1)";

  sctor_name := squalified_name =># "_1";
  sctor_name := "case" sinteger =># "`(ast_case_tag ,_sr ,_2)";

  satomic_pattern := sliteral =># "`(pat_literal ,_sr ,_1)";
  satomic_pattern := sliteral ".." sliteral =># "`(pat_range ,_sr ,_1 ,_3)";

}

