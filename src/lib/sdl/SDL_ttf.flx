//Module        : SDL_ttf_h
//Timestamp     : 2006/1/8 3:36:0 UTC
//Timestamp     : 2006/1/8 14:36:0 (local)
//Raw Header    : /usr/include/SDL/SDL_ttf.h
//Preprocessor  : gcc -E
//Input file: sdl.flxcc.i
//Flxcc Control : sdl.flxcc
//Felix Version : 1.1.2_rc1

//#define TTF_GetError  SDL_GetError
//#define TTF_SetError  SDL_SetError
//#define TTF_RenderUNICODE(font, text, fg, bg) \
//#define TTF_RenderUTF8(font, text, fg, bg)    \
//#define TTF_RenderText(font, text, fg, bg)    \
//#define TTF_STYLE_UNDERLINE   0x04
//#define TTF_STYLE_ITALIC      0x02
//#define TTF_STYLE_BOLD                0x01
//#define TTF_STYLE_NORMAL      0x00
//#define UNICODE_BOM_SWAPPED   0xFFFE
//#define UNICODE_BOM_NATIVE    0xFEFF
//#define TTF_VERSION(X)                                                        \
//#define TTF_PATCHLEVEL                6
//#define TTF_MINOR_VERSION     0
//#define TTF_MAJOR_VERSION     2
//#define _SDLttf_h

open module SDL_ttf_h
{
  requires package "sdl";
  header '#include "SDL_ttf.h"';

  //PURE INCOMPLETE TYPES
  type _struct__TTF_Font = 'struct _TTF_Font'; //local

  //STRUCT or UNION TAG ALIASES
  typedef TTF_Font = _struct__TTF_Font;

  //PROCEDURES
  proc TTF_ByteSwappedUNICODE: int;
  proc TTF_CloseFont: &TTF_Font;
  proc TTF_Quit: 1;
  proc TTF_SetFontStyle: &TTF_Font * int;

  //FUNCTIONS
  fun TTF_FontAscent: &TTF_Font -> int;
  fun TTF_FontDescent: &TTF_Font -> int;
  fun TTF_FontFaceFamilyName: &TTF_Font -> &char;
  fun TTF_FontFaceIsFixedWidth: &TTF_Font -> int;
  fun TTF_FontFaceStyleName: &TTF_Font -> &char;
  fun TTF_FontFaces: &TTF_Font -> long;
  fun TTF_FontHeight: &TTF_Font -> int;
  fun TTF_FontLineSkip: &TTF_Font -> int;
  fun TTF_GetFontStyle: &TTF_Font -> int;
  fun TTF_GlyphMetrics: &TTF_Font * uint16 * &int * &int * &int * &int * &int -> int;
  fun TTF_Init: 1 -> int;
  fun TTF_Linked_Version: 1 -> &SDL_version;
  fun TTF_OpenFont: &char * int -> &TTF_Font;
  fun TTF_OpenFontIndex: &char * int * long -> &TTF_Font;
  fun TTF_OpenFontIndexRW: &SDL_RWops * int * int * long -> &TTF_Font;
  fun TTF_OpenFontRW: &SDL_RWops * int * int -> &TTF_Font;
  fun TTF_RenderGlyph_Blended: &TTF_Font * uint16 * SDL_Color -> &SDL_Surface;
  fun TTF_RenderGlyph_Shaded: &TTF_Font * uint16 * SDL_Color * SDL_Color -> &SDL_Surface;
  fun TTF_RenderGlyph_Solid: &TTF_Font * uint16 * SDL_Color -> &SDL_Surface;
  fun TTF_RenderText_Blended: &TTF_Font * &char * SDL_Color -> &SDL_Surface;
  fun TTF_RenderText_Shaded: &TTF_Font * &char * SDL_Color * SDL_Color -> &SDL_Surface;
  fun TTF_RenderText_Solid: &TTF_Font * &char * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUNICODE_Blended: &TTF_Font * &uint16 * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUNICODE_Shaded: &TTF_Font * &uint16 * SDL_Color * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUNICODE_Solid: &TTF_Font * &uint16 * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUTF8_Blended: &TTF_Font * &char * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUTF8_Shaded: &TTF_Font * &char * SDL_Color * SDL_Color -> &SDL_Surface;
  fun TTF_RenderUTF8_Solid: &TTF_Font * &char * SDL_Color -> &SDL_Surface;
  fun TTF_SizeText: &TTF_Font * &char * &int * &int -> int;
  fun TTF_SizeUNICODE: &TTF_Font * &uint16 * &int * &int -> int;
  fun TTF_SizeUTF8: &TTF_Font * &char * &int * &int -> int;
  fun TTF_WasInit: 1 -> int;
}
