
@h1 Futures.
A future is a value for which the computation is specified at
one time, and the result fetched later. The value is only computed
once. This allows the computation to be performed immediately,
delayed until required, or carried out in parallel.

This implementation uses fibres and synchronous channels to schedule
the computation. Because of the integration with asynchronous I/O
this allows, for example, defining a variable to be the result
of reading a line from a TCP/IP socket, initiating the transfer,
without needing to wait until the data is actually required.

It could also be used in a game, to schedule the calculation of
the new position of a sprite, immediately after the current
position is displayed, and then subsequently wait until a
clock tick before fetching the position and redisplaying the
sprite. This allows the computations to occur whilst waiting
for the clock tick, thereby allowing an regular display frame rate
by removing the need to wait for position calculation initiated
at the point in time we actually wanted to display the frame.
@felix
include "std/control/schannels";

open class Future
{

@h2 Implementation: design.
The implementation of futures by synchronous channels in Felix
is hampered by the requirement that schannel I/O cannot
be done in functions, and that includes generators,
because the operation requires a service call to the
scheduler and that is implement by returning control.
In turn that means the machine stack must be empty
which implies we cannot do service calls in a function.

The core I/O is therefore done in a procedure,
however we have to wrap the operation in a function
anyhow, to give the pleasing appearance that a future
is just a variable with an initialiser with
indeterminate evaluation semantics.

Although these semantics are standard in Felix for
the @{val} binder, the indeterminacy doesn't
extend to fibres: the compiler understands service
calls in general but not details of what they do.

Futures extend the indeterminate semantics into
fibres, in effect allowing fibres to communicate
in a "sloppy" way: the sloppiness allows
better performance and also relieves the programmer
of the need to schedule calculations precisely.

@h2 Implementation: private interface.
We make an object with 3 methods. The @{doget} method just
returns the cached value and must not be called until it
is evaluated. The @{fetched} method determines if the
value has been calculated. The @{fetch} method actually
evaluates and caches the value.
@felix
  private interface future_private_t[T] { 
    doget: 1 -> T;
    fetched: 1 -> bool;
    fetch: 1 -> 0;
  }

@h2 The future type.
A polymorphic type parametrised by the type of value
you expect to get out of a the calculation.
@felix
  type future[T] = new future_private_t[T];

@h2 Implementation: private methods.
@h3 Implementation: Object constructor.
The object constructor creates a synchronous channel
and spawns a fibre which writes the result of the
future computation down the channel.
@felix
  private object future_impl[T] (e:1->T) implements future_private_t[T] = {
    var ch = mk_schannel[T]();
    spawn_fthread { write (ch,#e); };
@h3 Implementation: object state.
We have two variables: a variable @{x} to cache the result
and a @{flag} to say if the variable has been set or not.
The @{fetched} method just retuns the @{flag}, and 
the @{doget} method just returns the variable @{x}. 
@felix
    var x:T;
    var flag = false;
    method fun fetched() => flag;
    method fun doget() => x;
@h3 Implementation: fetch method.
The fetch method reads the channel down which
the fibre spawned by the constructor is scheduled
to write the value, thereby forcing that computation
to complete before continuing. Once the value is 
acquired the result is stored in the cache variable @{x}
and the @{flag} set to indicate it is available. 
The schannel @{ch} is no longer required so it is nulled
out to enable it, and the fibre hanging on it, to be
reaped by the garbage collector.
@felix
    method proc fetch() {
      x = read ch;
      // kill the schannel now.
      ch = #mk_null_schannel[T];
      flag = true;
    }
  };

@h2 Constructor.
A future is created by @{var fut = future expr;} 
where @{expr} is a function of unit argument 
returning a value of type @{T}.
@felix
  ctor[T] future[T] (e:1->T) => _make_future (future_impl e);
 
@h2 Accessor.
The future accessor @{get} ensure the computation is completed,
then fetches the resulting value. The value is cached so
the computation is only performed once, no matter how many
times @{get} is called.

Due to the restrictions on the use of schannel I/O in 
Felix, the @{get} function cannot work unless it is inlined
into a procedure controlled by a fibre scheduler.
The @{inline} annotation below is therefore mandatory.
Futures will not work if the Felix compiler fails
to inline the @{get} function.
@felix
  inline gen get[T](fut:future[T]):T = { 
    if not #((_repr_ fut).fetched) call (_repr_ fut).fetch; 
    return #((_repr_ fut).doget); 
  }

@h2 A more convenient accessor.
To make use of futures more transparent we map an application
of a future to the unit value {()} as a @{get}. In turn,
this allows the notation {#fut} to be used, giving the future
the appearance of a constant.
@felix
  fun apply[T] (x:future[T], a:unit) => get x;
}


