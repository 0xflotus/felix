
//$ Synchronous Pipe.
open class Spipe {

  //$ Send an stream down a channel.
  proc source[T] (var it:1 -> T) (out:oschannel[T]) 
  {
    while true do write (out,#it); done 
  }

  //$ isrc converts a streamable data structure
  //$ such as an array into a source.
  proc isrc[V,T with Streamable[T,V]] (var dat:T) (out:oschannel[opt[V]])
  {
    source[opt[V]] (dat.iterator) out;
  }


  //$ Wire a source component to a sink.
  //$ Return coupled fibre ready to run.
  fun pipe[T] 
    (var w: oschannel[T] -> 0,
    var r: ischannel[T] -> 0)
  :
    1 -> 0
  => 
    {
      var chi,cho = mk_ioschannel_pair[T] ();
      spawn_fthread { (w cho); };
      spawn_fthread { (r chi); };
    }
  ;

  //$ Wire two sources to two sinks.
  //$ Returns a SINGLE pipeline!
  fun pipe[T0,T1]
    (
      var w: 
        (oschannel[T0] -> 0) * 
        (oschannel[T1] -> 0),
      var r:
        (ischannel[T0] -> 0) * 
        (ischannel[T1] -> 0)
    )
  :
    1 -> 0
  =>
    {
       pipe (w.0,r.0) ();
       pipe (w.1, r.1) ();
    }
  ;

  //$ Utility for tee connector.
  proc run_tee[T] (i:ischannel[T], o1:oschannel[T], o2:oschannel[T])
  {
  again:>
    var d = read i;
    write (o1, d);
    write (o2, d);
    goto again;
  }

  //$ Wire together a source component with two sinks.
  //$ Returns a closed pipeline.
  fun pipe[T] 
  (
    var w: oschannel[T] -> 0,
    var r: (ischannel[T] -> 0) * (ischannel[T] -> 0)
  )
    : 1 -> 0
  =>
    {
      var i,o = #mk_ioschannel_pair[T];
      var chi0,cho0 = #mk_ioschannel_pair[T];
      var chi1,cho1 = #mk_ioschannel_pair[T];
      spawn_fthread { w o; };
      spawn_fthread { run_tee (i,cho0, cho1); };
      spawn_fthread { r.0 chi0; };
      spawn_fthread { r.1 chi1; };
    }
  ;


  //$ Wire a source component to a transducer.
  //$ Return source.
  fun pipe[T,U]
    (var w: oschannel[T] -> 0,
    var t: ischannel[T] * oschannel[U] -> 0)
  :
    oschannel[U] -> 0 
  => 
    proc (out:oschannel[U])
    {
      var chi,cho = mk_ioschannel_pair[T] ();
      spawn_fthread { (w cho); };
      spawn_fthread { (t (chi, out)); };
    }
  ;

  //$ Wire two source components to two transducers.
  //$ Return two sources.
  fun pipe[T0,T1,U0,U1]
    (
      var w: 
        (oschannel[T0] -> 0) *
        (oschannel[T1] -> 0),
      var t: 
        (ischannel[T0] * oschannel[U0] -> 0) *
        (ischannel[T1] * oschannel[U1] -> 0)
    )
  :
    (oschannel[U0] -> 0) *
    (oschannel[U1] -> 0)
  => 
    pipe (w.0,t.0),
    pipe (w.1,t.1)
  ;

  //$ Wire together a source component with two transducers
  //$ Returns two sources.
  //
  // WARNING: I do not know why this one works.
  // It actually starts the threads when called.
  // This is wrong, but I see no alternative.
  //
  // Also, it's a function starting those threads!
  // Functions cannot run threads at the moment.
  // Unless they manually construct a scheduler.

  fun pipe[T,U0,U1] 
  (
    var w: oschannel[T] -> 0,
    var r: (ischannel[T] * oschannel[U0] -> 0) * (ischannel[T] * oschannel[U1] -> 0)
  )
  :
    (oschannel[U0] -> 0) * (oschannel[U1] -> 0)
  =
  {
      var i,o = #mk_ioschannel_pair[T];
      var chi0,cho0 = #mk_ioschannel_pair[T];
      var chi1,cho1 = #mk_ioschannel_pair[T];
      spawn_fthread { run_tee (i,cho0, cho1); };
      spawn_fthread { w o; };
      return
        proc (out:oschannel[U0]) { r.0 (chi0,out); },
        proc (out:oschannel[U1]) { r.1 (chi1,out); }
      ;
  }



  //$ xpipe connects a streamable data structure
  //$ such as an array directly into a transducer.
  fun xpipe[V,T,U with Streamable[T,V]] 
    (
      a:T,
      t: ischannel[opt[V]] * oschannel[U] -> 0
    )
    : oschannel[U] -> 0 =>
    pipe (a.isrc[V],t)
  ;


  //$ Wire a transducer into a transducer.
  //$ Return another transducer.
  fun pipe[T,U,V]
    (var a: ischannel[T] * oschannel[U] -> 0,
    var b: ischannel[U] * oschannel[V] -> 0)
  :
    ischannel[T] * oschannel[V] -> 0 
  => 
    proc (inp:ischannel[T], out:oschannel[V])
    {
      var chi,cho = mk_ioschannel_pair[U] ();
      spawn_fthread { a (inp, cho); };
      spawn_fthread { b (chi, out); };
    }
  ;

  //$ Wire two transducers into two transducers.
  //$ Return two transducers.
  fun pipe[T0,T1,U0,U1,V0,V1]
    (
      var a: 
        (ischannel[T0] * oschannel[U0] -> 0) *
        (ischannel[T1] * oschannel[U1] -> 0),
      var b: 
        (ischannel[U0] * oschannel[V0] -> 0) * 
        (ischannel[U1] * oschannel[V1] -> 0) 
    )
  :
    (ischannel[T0] * oschannel[V0] -> 0) *
    (ischannel[T1] * oschannel[V1] -> 0)
  => 
     pipe (a.0, b.0),
     pipe (a.1, b.1)
  ;


  //$ Wire a transducer into a sink.
  //$ Return a sink.
  fun pipe[T,U]
    (var a: ischannel[T] * oschannel[U] -> 0,
    var b: ischannel[U] -> 0)
  :
    ischannel[T]  -> 0 
  => 
    proc (inp:ischannel[T])
    {
      var chi,cho = mk_ioschannel_pair[U] ();
      spawn_fthread { a (inp, cho); };
      spawn_fthread { b (chi); };
    }
  ;

  //$ Wire two transducers into two sinks.
  //$ Return two sinks.
  fun pipe[T0,T1,U0,U1]
    (
      var a: 
        (ischannel[T0] * oschannel[U0] -> 0) *
        (ischannel[T1] * oschannel[U1] -> 0),
      var b: 
         (ischannel[U0] -> 0) *
         (ischannel[U1] -> 0)
    )
  :
    (ischannel[T0]  -> 0)  *
    (ischannel[T1]  -> 0) 
  => 
      pipe (a.0, b.0),
      pipe (a.1, b.1)
  ;



  //$ Stream sort using intermediate darray.
  //$ Requires stream of option type.
  proc sort[T with Tord[T]] (r: ischannel[opt[T]], w: oschannel[opt[T]])
  {
     var x = darray[T]();
     acquire:while true do
       match read r with
       | Some ?v => x+=v;
       | None => break acquire;
       endmatch;
     done
     x.sort;
     for v in x do
       write (w, Some v);
     done
     write (w,None[T]);
  }
}

