open class TS_Bound_Queue
{
  private type bQ_ = "::flx::pthread::bound_queue_t";
  _gc_pointer _gc_type bQ_ type ts_bound_queue_t[T] = "::flx::pthread::bound_queue_t*" 
    requires 
     package "flx_pthread",
     scanner "::flx::pthread::bound_queue_scanner"
  ;
  ctor[T] ts_bound_queue_t[T]: !ints = 
    "new (*PTF gcp, @0, false) ::flx::pthread::bound_queue_t((size_t)$1)";
  private proc _enqueue[T]: ts_bound_queue_t[T] * &T = "$1->enqueue((void*)$2);";
  private gen _dequeue[T]: ts_bound_queue_t[T] -> &T = "(?1*)$1->dequeue();";
  proc enqueue[T] (Q:ts_bound_queue_t[T])  (elt:T) {
     _enqueue(Q, new elt);
  }
  gen dequeue[T] (Q:ts_bound_queue_t[T]): T => *(_dequeue Q);
  proc wait[T]: ts_bound_queue_t[T] = "$1->wait_until_empty();";
  proc resize[T]: ts_bound_queue_t[T] * !ints = "$1->resize((size_t)$2);";
 
}
