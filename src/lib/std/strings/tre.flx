class Tre
{
  open C_hack;
  requires package 'tre';
  type tre_regex_t = "regex_t";

  const tre_version: string = "tre_version()";

  private fun _tre_regcomp: &tre_regex_t * string  -> int =
    "tre_regncomp($1,$2.c_str(),$2.size(),REG_EXTENDED)"
  ;

  fun tre_regcomp (x:string): opt[tre_regex_t] = {
    var cr: tre_regex_t;
    var res = _tre_regcomp(&cr, x);
    return
      if res == 0 then Some cr else None[tre_regex_t] endif
    ;
  }

  fun nsub: &tre_regex_t -> int = "$1->re_nsub+1";

  ctypes regoff_t;
  cstruct regmatch_t {
    rm_so: regoff_t;
    rm_eo: regoff_t;
  };

  fun add: +char * regoff_t -> +char = "$1+$2";
  fun sub: regoff_t * regoff_t -> int = "(int)($1-$2)";
  ctor int : regoff_t = "int($1)";

  private fun _tre_regexec:
    &tre_regex_t *     // the compiled regex
    string *               // string to search
    int *                  // number of matches to return
    +regmatch_t        // array to hold matches
    -> int
  =
    "tre_regnexec($1,$2.c_str(),$2.size(),$3,$4,0);"
  ;

  fun tre_regexec (re_in: tre_regex_t) (x:string): int * int * +regmatch_t =
  {
    var re = re_in;
    val nmatches = nsub$ &re;
    var matches = Carray::array_alloc[regmatch_t] nmatches;
    var res = _tre_regexec(&re, x, nmatches, matches);
    return res,nmatches,matches;
  }
}
