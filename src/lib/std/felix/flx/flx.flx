include "plat/config";
include "std/felix/flx_cache";
include "std/felix/flx_pkg";
include "std/felix/flx_flxg";
include "std/felix/flx_cxx";

include "std/felix/flx/flx_config";
include "std/felix/flx/flx_control";
include "std/felix/flx/flx_profile";
include "std/felix/flx/flx_cmdopt";
include "std/felix/flx/flx_depvars";
include "std/felix/flx/flx_run";

include "std/felix/toolchain/clang_osx";
include "std/felix/toolchain/clang_linux";
include "std/felix/toolchain/gcc_osx";
include "std/felix/toolchain/gcc_linux";

open FlxCache;

// Felix version of THIS program (NOT the one being installed
// if you're using flx to install Felix)


class Flx
{
  proc flx_processing
  (
    config:&config_type, 
    control:&control_type,
    loopctl:&loopctl_type,
    profile:&profile_type,
    args:list[string]
  )
  {
    fun / (a:string, b:string) => Filename::join (a,b);
    processing_stage1 (config,control,loopctl,profile, varray[string] args);

    var dbdir = config*.FLX_INSTALL_DIR / config*.FLX_TARGET_SUBDIR / "config";
    var pkgconfig = FlxPkgConfig::FlxPkgConfigQuery$ list[string] dbdir;
    var toolchain_name = pkgconfig.getpkgfield1 ("toolchain", "toolchain");

    var toolchain = 
       match toolchain_name with
       | "toolchain_clang_osx" => toolchain_clang_osx 
       | "toolchain_clang_linux" => toolchain_clang_linux
       | "toolchain_gcc_osx" => toolchain_gcc_osx
       | "toolchain_gcc_linux" => toolchain_gcc_linux 
       endmatch
    ;
    if control*.INREGEX != "" do 

      begin
        control.USER_ARGS <- Shell::quote_arg(loopctl*.progname) + ' ' + control*.USER_ARGS;
        if control*.INDIR == "" do control.INDIR <- "."; done
        var regex = RE2 control*.INREGEX;
        if not regex.ok do
          eprintln$ "Malformed regex " + control*.INREGEX;
          System::exit(1);
        done
        var files = FileSystem::regfilesin (control*.INDIR, regex);
        var n = files.len.int;
        println$ "Processing " + files.len.str + " files";
        var i = 1;
        for file in files do
          var arg = Filename::join (control*.INDIR, file);
          loopctl*.path,loopctl*.ext = Filename::split_extension(arg);
          loopctl*.dir,loopctl*.base = Filename::split1(loopctl*.path);
          // temporary hack, to force reset of the linker filename, stdout, and expect
          // file names in cal_depvars so they depend on the current file.
          control.LINKER_OUTPUT_FILENAME <- "";
          control.STDOUT <- "";
          control.EXPECT <- "";
          var dvars = cal_depvars(toolchain,*config,control,*loopctl);
          println$ f"Processing [%02d/%02d]: %S" (i, n, file);
          var pe = processing_env(toolchain,*config,*control,dvars);
          pe.runit();
          ++i;
        done 
      end
    else 
      begin
        if control*.SHOWCODE == 1 do
            var prg = 
              (if dvars.use_ext == "" then "// No file "+dvars.filebase+".(flx|fdoc) found"
              else load(dvars.filebase+"."+dvars.use_ext)
            );
            print prg;
        done
        var dvars = cal_depvars(toolchain,*config,control, *loopctl);
        var pe = processing_env(toolchain,*config,*control,dvars);
        pe.runit();
      end 
    done
  }

  proc runflx(args:list[string])
  {
    var config = #Config::config;
    var profile = #dflt_profile;
    var control = dflt_control(config,profile);
    var loopctl = #init_loopctl;
    flx_processing(&config, &control, &loopctl, &profile, args);
  }
}

