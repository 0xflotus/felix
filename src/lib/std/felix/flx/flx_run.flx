object processing_env(
  toolchain: clang_config_t -> toolchain_t,
  config:config_type, 
  var control:control_type,dvars:dvars_type)  
=
{
  proc debugln[T with Str[T]] (x:T) {
    control.DEBUG_FLX ?? fprintln (cerr, "[flx] " + str x);
  }

  proc echoln[T with Str[T]] (x:T) {
    control.ECHO == 1 ?? fprintln (cerr, "[flx] " + str x);
  }

  var dflt_clang_config = (
      header_search_dirs = Empty[string],
      macros = Empty[string],
      library_search_dirs= Empty[string],
      ccflags= Empty[string],
      dynamic_libraries= Empty[string],
      static_libraries= Empty[string],
      debugln = debugln[string]
  );


  method gen system(cmd:string):int= {
    var now = #Time::time;
    if control.ECHO==1 do fprintln$ cerr, cmd; done
    var result = System::system(cmd);
    var elapsed = #Time::time - now;
    if control.ECHO==1 do 
      fprintln$ cerr, "System:Elapsed: " + fmt (elapsed, fixed (8,3)) + 
        ", Result code " + str(result)
      ; 
    done
    return result;
  }

  method gen runit() : int = {
    var immediate_run = #check_run_if_required_and_uptodate;
    if immediate_run do
      return #run_with_calpackages;
    else
      var result = #run_felix_compiler_if_required;
      if result != 0 return result;
      return #run_cxx_and_exe_as_required;
    done
  }

  proc calpackages 
  {
    var tc = toolchain dflt_clang_config;
    var x = FlxPkg::map_package_requirements 
    (
       FLX_INSTALL_DIR = config.FLX_INSTALL_DIR,
       FLX_TARGET_SUBDIR = config.FLX_TARGET_SUBDIR,
       EXT_EXE = #(tc.executable_extension),
       EXT_STATIC_OBJ = #(tc.static_object_extension),
       STATIC = control.STATIC,
       SLINK_STRINGS = control.SLINK_STRINGS,
       DLINK_STRINGS = control.DLINK_STRINGS,
       LINKER_SWITCHES = control.LINKER_SWITCHES,
       cpp_filebase = dvars.cpp_filebase
    );
    control.EXTRA_INCLUDE_DIRS = x.INCLUDE_DIRS;
    control.EXTRA_INCLUDE_FILES = x.INCLUDE_FILES;
    control.DRIVER_EXE = x.DRIVER_EXE;
    control.DRIVER_OBJS = x.DRIVER_OBJS;
    control.LINK_STRINGS = x.LINK_STRINGS;
//println$ "LINK STRINGS = " + x.LINK_STRINGS;
  }

  proc showtime(msg:string, t0:double)
  {
    if control.TIME == 1 do
      var elapsed = #Time::time - t0;
      var minutes = floor (elapsed / 60.0);
      var seconds = elapsed - minutes * 60.0;
      println$ "[flx] Time : " + fmt(minutes,fixed(2,0))+"m" + fmt(seconds,fixed(4,1)) + "s for " + msg;
    done
  }

  gen run_felix_compiler_if_required () : int = 
  {
    if control.FELIX == 1 do
      var t0 = #Time::time;
      var result = Flxg::run_felix_compiler
      (
        INLINE=control.INLINE,
        OUTPUT_DIR=control.OUTPUT_DIR,
        BUNDLE_DIR=control.BUNDLE_DIR,
        CACHE_DIR=control.CACHE_DIR,
        COMPILER_PHASE= control.COMPILER_PHASE,
        DOREDUCE=control.DOREDUCE,
        STDLIB = dvars.STDLIB,
        FLXG = control.FLXG,
        VERBOSE = dvars.VERBOSE,
        STDGRAMMAR = control.STDGRAMMAR,
        STDIMPORT = control.STDIMPORT,
        IMPORTS = control.IMPORTS,
        FLXLIBS = dvars.FLXLIBS,
        INCLUDE_DIRS = control.STANDARD_INCLUDE_DIRS,
        filebase = dvars.filebase,
        use_ext = dvars.use_ext,
        TIME = control.TIME,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      );
      showtime("Felix flxg   : "+dvars.cpp_filebase, t0);
      if result != 0 return result;
      debugln "Felix compilation succeeded";
      calpackages;
      FlxPkg::write_include_file(dvars.cpp_filebase, control.EXTRA_INCLUDE_FILES);

    else
      debugln "Felix compilation skipped by switch";
      calpackages;
    done
    return 0;
  }


  gen cxx_compile_dynamic1(src:string, dst:string) : int =
  {

    var t0 = #Time::time;
    var tc = toolchain 
      extend dflt_clang_config with 
      (
        ccflags = /* ccflags + */ control.CCFLAGS,
        header_search_dirs = dvars.INCLUDE_DIR + control.STANDARD_INCLUDE_DIRS+control.EXTRA_INCLUDE_DIRS,
        macros = control.MACROS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;

    var result = tc.cxx_dynamic_object_compiler (dst=dst,src=src);
    showtime("Dynamic c++  : "+src, t0);
    return result;
  }

  gen cxx_compile_dynamic () : int =
  {
    var EXT_SHARED_OBJ = #((toolchain dflt_clang_config).dynamic_object_extension);
    if control.LINKIT == 0 do
      var result = cxx_compile_dynamic1 (dvars.cpp_filebase+".cpp", control.LINKER_OUTPUT_FILENAME);
      if result != 0 return result;
    else
      result = cxx_compile_dynamic1 (dvars.cpp_filebase+".cpp", dvars.cpp_filebase+EXT_SHARED_OBJ);
      if result != 0 return result;
    done

    for src in control.cpps do
      var dst = Filename::strip_extension src + EXT_SHARED_OBJ;
      result = cxx_compile_dynamic1 (src,dst);
      if result != 0 return result;
      control.cppos += dst;
    done
    return 0;
  }

  gen cxx_link_dynamic () : int =
  {
    var t0 = #Time::time;
    var tc = toolchain 
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS + control.LINK_STRINGS,
        dynamic_libraries = control.LINK_STRINGS, // a bit of a hack ..
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_SHARED_OBJ = #(tc.dynamic_object_extension);
    var result = tc.dynamic_library_linker
      (
        dst=control.LINKER_OUTPUT_FILENAME,
        srcs= control.cppos + (dvars.cpp_filebase+EXT_SHARED_OBJ)
      )
    ;
    showtime("Dynamic link : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ clink "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen cxx_compile_static1 (src: string, dst: string) : int = 
  {
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        ccflags = /*ccflags + */ control.CCFLAGS,
        header_search_dirs = dvars.INCLUDE_DIR + control.STANDARD_INCLUDE_DIRS+control.EXTRA_INCLUDE_DIRS,
        macros = control.MACROS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var result = tc.cxx_static_object_compiler (dst=dst,src=src); 
    showtime("Static c++   : "+src,t0);

    if result != 0 do
      eprintln$ "[flx] C++ compilation "+src+" failed";
    done
    return result;

  }

  gen cxx_compile_static () : int = 
  {
    // we only need the thunk if we're linking OR -o switch was NOT specified
    // i.e. skip compiling the thunk the output name was specified and 
    // represents an object file (or library archive?)
    var EXT_STATIC_OBJ = #((toolchain dflt_clang_config).static_object_extension);
    if 
      control.LINKIT == 1 or 
      control.OUTPUT_FILENAME_SPECIFIED == 0 and
      control.OUTPUT_FILENAME_WITHOUT_EXTENSION_SPECIFIED == 0
    do
      var result = cxx_compile_static1
      (
        dvars.cpp_filebase+"_static_link_thunk.cpp",
        dvars.cpp_filebase+"_static_link_thunk"+EXT_STATIC_OBJ
      );
      if result != 0 return result;
    done

    for src in control.cpps do
      var dst = Filename::strip_extension src +EXT_STATIC_OBJ;
      if control.RECOMPILE == 1 or dfiletime(src,#past_time) > dfiletime (dst, #future_time) do
        result = cxx_compile_static1 (src,dst);
        if result != 0 return result;
      done
      control.cppos += dst;
    done
   
    if control.LINKIT == 0 do
      // compile only
      return cxx_compile_static1 (dvars.cpp_filebase+".cpp",control.LINKER_OUTPUT_FILENAME);
    else 
      // compile and link
      return cxx_compile_static1 (dvars.cpp_filebase+".cpp",dvars.cpp_filebase+EXT_STATIC_OBJ);
    done

  }

  gen cxx_link_static () : int = 
  {
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS + control.LINK_STRINGS, 
        static_libraries = control.LINK_STRINGS, // a bit of a hack
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_STATIC_OBJ = #(tc.static_object_extension);
    var result = tc.executable_linker
      (
        dst=control.LINKER_OUTPUT_FILENAME,
        srcs= 
          control.DRIVER_OBJS +
          control.cppos + 
          (dvars.cpp_filebase+"_static_link_thunk"+EXT_STATIC_OBJ) + 
          (dvars.cpp_filebase+EXT_STATIC_OBJ)
      )
    ;
    showtime("Static executable link  : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ static executable link "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen cxx_static_library () : int = 
  {
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_STATIC_OBJ = #(tc.static_object_extension);
    var result = tc . static_library_linker 
      (
        srcs=control.cppos + (dvars.cpp_filebase+EXT_STATIC_OBJ) ,
        dst=control.LINKER_OUTPUT_FILENAME
      )
    ;
    showtime("Static lib   : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ static library link "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen check_output () : int = 
  {
    var expected = control.EXPECT;
    if expected == "" return 0;

    var output = control.STDOUT;

    if output == "" do
      println$ "[flx] No output file given";
      return 0;
    else 
      
      // note load never fails, at worse loads empty string.
      var output_text = load (output);
      var expected_text = load (expected);
      var result = output_text == expected_text;
      if not result do
        println$ "[flx] Output " + output + " doesn't match expected " + expected;
        return 1;
      done
    done 
    return 0;
  }


  gen run_program_dynamic () : int =
  {
    var xargs =
      control.FLXRUN +
      control.DRIVER_EXE +
      dvars.DEBUGSWITCH +
      control.LINKER_OUTPUT_FILENAME +
      dvars.args
    ;
    var CMD = catmap ' ' Shell::quote_arg xargs;
    if control.STDOUT != "" do CMD=CMD+" > " +Shell::quote_arg(control.STDOUT); done
    debugln$ "Run command="+CMD;
    var t0 = #Time::time;
    var result = system(CMD);
    showtime("Dynamic Run : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 return result;
    return #check_output;
  }

  gen run_program_static () : int = 
  {
    var CMD = 
      catmap ' ' Shell::quote_arg ( dvars.STATIC_ENV + control.LINKER_OUTPUT_FILENAME + dvars.args )
    ;

    if control.STDOUT != "" do CMD=CMD + " > "+Shell::quote_arg(control.STDOUT); done
    debugln$ "[flx] Run command="+CMD;
    var t0 = #Time::time;
    var result=system(CMD);
    showtime("Static Run   : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 return result;
    return #check_output;
  }

  gen run_dynamic_with_calpackages () : int = 
  {
    calpackages;
    return #run_program_dynamic;
  }

  gen check_run_if_required_and_uptodate() : bool  =
  {

    if control.RECOMPILE == 0 and control.RUNIT == 1 and control.CLEAR_CACHE == 0 do
      // not (--force or -c)
      debugln "[flx] Checking to see if the binary is uptodate";
      var xtime = dfiletime(control.LINKER_OUTPUT_FILENAME,#past_time);
      var srctime = cal_dep_time (debugln[string], control.OUTPUT_DIR, dvars.filebase);
      srctime = fold_left maxf srctime control.cpps;
      srctime = fold_left maxf srctime control.cppos;

      debugln$ "[flx] Filebase = " + dvars.filebase; 
      debugln$ "[flx] Binary time = " + strfiletime (xtime);
      debugln$ "[flx] src time = " + strfiletime (srctime);
      debugln$ "[flx] cache time = " + strfiletime (control.cache_time);
      if control.STATIC == 0 do
        if xtime > srctime and xtime > control.cache_time do
          debugln$ "[flx] Running dynamically linked binary";
          return true;
        else
          debugln$ "[flx] Dynamically linked binary out of date or non-existant";
        done
      else
        if xtime > srctime and xtime > control.cache_time do
          debugln$ "Running statically linked binary";
          return true;
        else
          debugln$ "Statically linked binary out of date or non-existant";
        done
      done
    done
    return false;

  }

  gen run_with_calpackages () : int = 
  {
    if control.STATIC == 0 do
      return #run_dynamic_with_calpackages;
    else
      return #run_program_static;
    done
  }

  gen run_cxx_and_exe_as_required () : int = 
  {

    if control.CCOMPILEIT == 0 do
      debugln "C++ compilation skipped by switch";
    elif control.STATIC == 0 do

      debugln "Dynamic linkage";
      var result = #cxx_compile_dynamic;
      if result != 0 return result;

      if control.LINKIT == 0 do
        debugln "Not linking program selected by switch";
      else
        result = #cxx_link_dynamic;
        if result != 0 return result;
        if control.RUNIT == 1 do
          return #run_program_dynamic;
        else
          debugln "Not running program selected by switch";
        done
      done
    else

      debugln "Static linkage";
      result = #cxx_compile_static;
      if control.STATICLIB == 1 do
        return #cxx_static_library;
      elif control.LINKIT == 0 do
        debugln "Not linking based on switch";
      else
        result = #cxx_link_static;
        if result != 0 return result;

        if control.RUNIT == 1 do
          return #run_program_static;
        else
          debugln "Not running program selected by switch";
        done
      done
    done
    return 0;
  }

}

