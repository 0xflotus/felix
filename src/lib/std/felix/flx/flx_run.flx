

gen dxqt(DBG:bool) (cmd:string) = {
  DBG ?? fprintln (cerr, "cmd="+cmd);
  var now = #Time::time;
  var result,output = Shell::get_stdout(cmd);
  if result == 0 do
    n := 
      match find_first_of (output, char "\n") with
      | Some ?n => n 
      | None => output.len.int 
      endmatch
    ; 
    output = output.[to n]; // first line excluding newline
    var elapsed = #Time::time - now;
    DBG ?? fprintln (cerr, "Popen:Elapsed: " + fmt (elapsed, fixed(9,3)) + ", output='"+output+"'");
  else
    DBG ?? eprintln "COMMAND FAILED";
    fprint$ cerr, ("Error "+repr(result)+" executing command " + cmd + "\n");
    System::pexit result;
  done
  return output;
}

proc xdebugln[T with Str[T]] (d:bool) (x:T) {
  d ?? fprintln (cerr, "[flx] " + str x);
}

// CLEAR_CACHE is set to 1 if the cache is reset
proc check_cache(config:&config_type, control:&control_type,profile:&profile_type)
{
  control*.CLEAR_CACHE, control*.cache_time = validate_cache (
    FLX_INSTALL_DIR = config*.FLX_INSTALL_DIR,
    FLX_TARGET_SUBDIR = config*.FLX_TARGET_SUBDIR,
    STDGRAMMAR = control*.STDGRAMMAR,
    FLXG = control*.FLXG,
    CACHE_DIR = control*.CACHE_DIR,
    OUTPUT_DIR = control*.OUTPUT_DIR,
    DEFAULT_CACHE_DIR = profile*.DEFAULT_CACHE_DIR,
    DEFAULT_OUTPUT_DIR = profile*.DEFAULT_OUTPUT_DIR,
    CLEAR_CACHE= control*.CLEAR_CACHE,
    debugln = xdebugln[string] (control*.DEBUG_FLX),
    xqt = dxqt (control*.ECHO == 1 or control*.DEBUG_FLX),
    quote = Shell::quote_arg
  );
}

object processing_env(
  toolchain: clang_config_t -> toolchain_t,
  config:config_type, 
  var control:control_type,dvars:dvars_type, profile:profile_type)  
=
{
  proc debugln[T with Str[T]] (x:T) {
    control.DEBUG_FLX ?? fprintln (cerr, "[flx] " + str x);
  }

  proc echoln[T with Str[T]] (x:T) {
    control.ECHO == 1 ?? fprintln (cerr, "[flx] " + str x);
  }

  var dflt_clang_config = (
      header_search_dirs = Empty[string],
      macros = Empty[string],
      library_search_dirs= Empty[string],
      ccflags= Empty[string],
      dynamic_libraries= Empty[string],
      static_libraries= Empty[string],
      debugln = debugln[string]
  );


  method gen system(cmd:string):int= {
    var now = #Time::time;
    if control.ECHO==1 do fprintln$ cerr, cmd; done
    var result = System::system(cmd);
    var elapsed = #Time::time - now;
    if control.ECHO==1 do 
      fprintln$ cerr, "System:Elapsed: " + fmt (elapsed, fixed (8,3)) + 
        ", Result code " + str(result)
      ; 
    done
    return result;
  }

  var calpackages_run = false;

  proc calpackages 
  {
    if not calpackages_run  do
      var tc = toolchain dflt_clang_config;
      var x = FlxPkg::map_package_requirements 
      (
         FLX_INSTALL_DIR = config.FLX_INSTALL_DIR,
         FLX_TARGET_SUBDIR = config.FLX_TARGET_SUBDIR,
         EXT_EXE = #(tc.executable_extension),
         EXT_STATIC_OBJ = #(tc.static_object_extension),
         STATIC = control.STATIC,
         SLINK_STRINGS = control.SLINK_STRINGS,
         DLINK_STRINGS = control.DLINK_STRINGS,
         LINKER_SWITCHES = control.LINKER_SWITCHES,
         cpp_filebase = dvars.cpp_filebase
      );
      control.EXTRA_INCLUDE_DIRS = x.INCLUDE_DIRS;
      control.EXTRA_INCLUDE_FILES = x.INCLUDE_FILES;
      control.DRIVER_EXE = x.DRIVER_EXE;
      control.DRIVER_OBJS = x.DRIVER_OBJS;
      control.LINK_STRINGS = x.LINK_STRINGS;
      //println$ "LINK STRINGS = " + x.LINK_STRINGS;
      calpackages_run = true;
    done
  }

  proc showtime(msg:string, t0:double)
  {
    if control.TIME == 1 do
      var elapsed = #Time::time - t0;
      var minutes = floor (elapsed / 60.0);
      var seconds = elapsed - minutes * 60.0;
      println$ "[flx] Time : " + fmt(minutes,fixed(2,0))+"m" + fmt(seconds,fixed(4,1)) + "s for " + msg;
    done
  }

  gen run_felix_compiler_if_required () : int = 
  {
    if control.FELIX == 1 do
      var uptodate = check_cxx_uptodate ();
      debugln$ "[run_felix_compiler_if_required] Uptodate=" + uptodate.str;
      if not uptodate do
        debugln$ "Running flxg because target is not uptodate";
        var t0 = #Time::time;
        var result = Flxg::run_felix_compiler
        (
          INLINE=control.INLINE,
          OUTPUT_DIR=control.OUTPUT_DIR,
          BUNDLE_DIR=control.BUNDLE_DIR,
          CACHE_DIR=control.CACHE_DIR,
          COMPILER_PHASE= control.COMPILER_PHASE,
          DOREDUCE=control.DOREDUCE,
          STDLIB = dvars.STDLIB,
          FLXG = control.FLXG,
          VERBOSE = dvars.VERBOSE,
          STDGRAMMAR = control.STDGRAMMAR,
          STDIMPORT = control.STDIMPORT,
          IMPORTS = control.IMPORTS,
          FLXLIBS = dvars.FLXLIBS,
          INCLUDE_DIRS = control.STANDARD_INCLUDE_DIRS,
          filebase = dvars.filebase,
          use_ext = dvars.use_ext,
          TIME = control.COMPILER_TIME,
          FORCE = control.FLXG_FORCE,
          debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
        );
        showtime("Felix flxg   : "+dvars.cpp_filebase, t0);
        if result != 0 return result;
        debugln$ "Felix compilation succeeded";
        calpackages;
        FlxPkg::write_include_file(dvars.cpp_filebase, control.EXTRA_INCLUDE_FILES);
      else
        debugln$ "skipping flxg because output is uptodate";
      done
    else
      debugln$ "Felix compilation skipped by switch";
      calpackages;
    done
    return 0;
  }

  gen depcheck (tc: toolchain_t, src:string, dst:string) : bool = 
  {
    fun == (a:list[string], b:list[string]) =
    { 
      match a,b with
      | Empty,Empty => /* println$ "EQUAL LISTS"; */ return true;
      | Cons (?h1,?t1), Cons (?h2,?t2) => 
         if h1 != h2 do
           /* println$ h1 + " != " + h2; */
           return false;
         done
         /* println$ h1 + " = " + h2; */
         return t1 == t2; // tail call
      | _ => /* println$ "LISTS NOT EQUAL"; */ return false;
      endmatch;
    }

    fun maxf (t:double) (f:string) => max (t, dfiletime (f, #future_time));

    //println$ "[flx] GENERATING DEPENDENCIES";
    var result, deps = tc.cxx_dependency_generator (src=src);
    // println$ "[flx] DEPENDENCIES GENERATED, result="+str result;
    var newdeps = tc.dependency_parser deps;
    // println$ "[flx] NEW DEPENDENCIES="+str newdeps;
    var depfile = dst + ".d";
    var olddeptxt = load depfile;
    var olddeps = filter (fun (s:string)=> s != "") (split (olddeptxt,"\n"));
    // println$ "[flx] OLD DEPENDENCIES="+str olddeps;
    var samedeps = newdeps == olddeps;
    // println$ "SAME DEPS = " + samedeps.str;
    save$ depfile, newdeps;
    // println$ "[flx] SAVED NEW DEPENDENCIES to " + depfile;
    var fresh = samedeps and #{
      var t = fold_left maxf #past_time newdeps;
      return t < dfiletime (dst, #past_time);
    };
    println$ "[flx] Output " + dst + " is " + if fresh then "FRESH" else "STALE" endif;
    return fresh;
  }

  gen cxx_compile_dynamic1(src:string, dst:string) : int =
  {

    var t0 = #Time::time;
    var tc = toolchain 
      extend dflt_clang_config with 
      (
        ccflags = /* ccflags + */ control.CCFLAGS,
        header_search_dirs = dvars.INCLUDE_DIR + control.STANDARD_INCLUDE_DIRS+control.EXTRA_INCLUDE_DIRS,
        macros = control.MACROS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    if control.RECOMPILE==1 or not depcheck (tc,src,dst) do
      var result = tc.cxx_dynamic_object_compiler (dst=dst,src=src);
      showtime("Dynamic c++  : "+src, t0);
      return result;
    else
      return 0;
    done
  }

  gen cxx_compile_dynamic () : int =
  {
    var EXT_SHARED_OBJ = #((toolchain dflt_clang_config).dynamic_object_extension);
    if control.LINKIT == 0 do
      var result = cxx_compile_dynamic1 (dvars.cpp_filebase+".cpp", control.LINKER_OUTPUT_FILENAME);
      if result != 0 return result;
    else
      result = cxx_compile_dynamic1 (dvars.cpp_filebase+".cpp", dvars.cpp_filebase+EXT_SHARED_OBJ);
      if result != 0 return result;
    done

    for src in control.cpps do
      var dst = Filename::strip_extension src + EXT_SHARED_OBJ;
      result = cxx_compile_dynamic1 (src,dst);
      if result != 0 return result;
      *&control.cppos += dst;
    done
    return 0;
  }

  gen cxx_link_dynamic () : int =
  {
    var t0 = #Time::time;
    var tc = toolchain 
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS + control.LINK_STRINGS,
        dynamic_libraries = control.LINK_STRINGS, // a bit of a hack ..
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_SHARED_OBJ = #(tc.dynamic_object_extension);
    var result = tc.dynamic_library_linker
      (
        dst=control.LINKER_OUTPUT_FILENAME,
        srcs= control.cppos + (dvars.cpp_filebase+EXT_SHARED_OBJ)
      )
    ;
    showtime("Dynamic link : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ clink "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen cxx_link_dynamic_with_calpackages () : int = 
  {
    calpackages;
    return #cxx_link_dynamic;
  }

  gen cxx_compile_static1 (src: string, dst: string) : int = 
  {
//println$ "cxx_compile_static1: " + src " -> " + dst;
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        ccflags = /*ccflags + */ control.CCFLAGS,
        header_search_dirs = dvars.INCLUDE_DIR + control.STANDARD_INCLUDE_DIRS+control.EXTRA_INCLUDE_DIRS,
        macros = control.MACROS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    if control.RECOMPILE==1 or not depcheck (tc,src,dst) do
      var result = tc.cxx_static_object_compiler (dst=dst,src=src); 
      showtime("Static c++   : "+src,t0);
      if result != 0 do
        eprintln$ "[flx] C++ compilation "+src+" failed";
      done
      return result;
    else
      return 0;
    done

  }

  gen cxx_compile_static () : int = 
  {
    // we only need the thunk if we're linking OR -o switch was NOT specified
    // i.e. skip compiling the thunk the output name was specified and 
    // represents an object file (or library archive?)
//println$ "cxx_compile_static";
    var EXT_STATIC_OBJ = #((toolchain dflt_clang_config).static_object_extension);
    if 
      control.LINKIT == 1 or 
      control.OUTPUT_FILENAME_SPECIFIED == 0 and
      control.OUTPUT_FILENAME_WITHOUT_EXTENSION_SPECIFIED == 0
    do
//println$ "Compiling thunk";
      var result = cxx_compile_static1
      (
        dvars.cpp_filebase+"_static_link_thunk.cpp",
        dvars.cpp_filebase+"_static_link_thunk"+EXT_STATIC_OBJ
      );
      if result != 0 return result;
    done

    for src in control.cpps do
      var dst = Filename::strip_extension src +EXT_STATIC_OBJ;
      result = cxx_compile_static1 (src,dst);
      if result != 0 return result;
      *&control.cppos += dst;
    done
   
    if control.LINKIT == 0 do
//println$ "Compile only " + control.LINKER_OUTPUT_FILENAME;
      // compile only
      return cxx_compile_static1 (dvars.cpp_filebase+".cpp",control.LINKER_OUTPUT_FILENAME);
    else 
      // compile and link
//println$ "Compile and link " + dvars.cpp_filebase+EXT_STATIC_OBJ;
      return cxx_compile_static1 (dvars.cpp_filebase+".cpp",dvars.cpp_filebase+EXT_STATIC_OBJ);
    done

  }

  gen cxx_link_static () : int = 
  {
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS + control.LINK_STRINGS, 
        static_libraries = control.LINK_STRINGS, // a bit of a hack
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_STATIC_OBJ = #(tc.static_object_extension);
    var result = tc.executable_linker
      (
        dst=control.LINKER_OUTPUT_FILENAME,
        srcs= 
          control.DRIVER_OBJS +
          control.cppos + 
          (dvars.cpp_filebase+"_static_link_thunk"+EXT_STATIC_OBJ) + 
          (dvars.cpp_filebase+EXT_STATIC_OBJ)
      )
    ;
    showtime("Static executable link  : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ static executable link "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen cxx_link_static_with_calpackages() :  int = 
  {
    calpackages;
    return #cxx_link_static;
  }

  gen cxx_static_library () : int = 
  {
    var t0 = #Time::time;
    var tc = toolchain  
      extend dflt_clang_config with 
      (
        //ccflags = ccflags + control.CCFLAGS,
        debugln = if control.ECHO==1 then echoln[string] else debugln[string] endif
      )
      end
    ;
    var EXT_STATIC_OBJ = #(tc.static_object_extension);
    var result = tc . static_library_linker 
      (
        srcs=control.cppos + (dvars.cpp_filebase+EXT_STATIC_OBJ) ,
        dst=control.LINKER_OUTPUT_FILENAME
      )
    ;
    showtime("Static lib   : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 do
      eprintln$ "[flx] C++ static library link "+control.LINKER_OUTPUT_FILENAME+" failed";
    done
    return result;
  }

  gen check_output () : int = 
  {
    var expected = control.EXPECT;
    if expected == "" return 0;

    var output = control.STDOUT;

    if output == "" do
      eprintln$ "[flx] No output file given";
      return 0;
    else 
      
      // note load never fails, at worse loads empty string.
      var output_text = load (output);
      var expected_text = load (expected);
      var result = output_text == expected_text;
      if not result do
        eprintln$ "[flx] Output " + output + " doesn't match expected " + expected;
        return 1;
      done
    done 
    return 0;
  }


  gen run_program_dynamic () : int =
  {
    var xargs =
      control.FLXRUN +
      control.DRIVER_EXE +
      dvars.DEBUGSWITCH +
      control.LINKER_OUTPUT_FILENAME +
      dvars.args
    ;
    var CMD = catmap ' ' Shell::quote_arg xargs;
    if control.STDOUT != "" do CMD=CMD+" > " +Shell::quote_arg(control.STDOUT); done
    debugln$ "Run command="+CMD;
    var t0 = #Time::time;
    var result = system(CMD);
    showtime("Dynamic Run : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 return result;
    return #check_output;
  }

  gen run_program_static () : int = 
  {
    var CMD = 
      catmap ' ' Shell::quote_arg ( dvars.STATIC_ENV + control.LINKER_OUTPUT_FILENAME + dvars.args )
    ;

    if control.STDOUT != "" do CMD=CMD + " > "+Shell::quote_arg(control.STDOUT); done
    debugln$ "Run command="+CMD;
    var t0 = #Time::time;
    var result=system(CMD);
    showtime("Static Run   : "+control.LINKER_OUTPUT_FILENAME,t0);
    if result != 0 return result;
    return #check_output;
  }


  gen run_dynamic_with_calpackages () : int = 
  {
    calpackages;
    return #run_program_dynamic;
  }

  gen maybe_run_program () : int = 
  {
    if control.STATIC == 0 do
      if control.RUNIT == 1 do
        debugln$ "Running dynamic program";
        return #run_dynamic_with_calpackages;
      else
        debugln "Running dynamic skipped by switch";
      done
    else
      if control.RUNIT == 1 do
        debugln$ "Running static program";
        return #run_program_static;
      else
        debugln "Running static skipped by switch";
      done
    done
    return 0;
  }

  // max time of Felix source files: #future_time if any missing
  fun cal_time_from_flxdepfile (debugln: string->0, df: string):double=
  {
    fun maxf (x: double) (f:string) =
    {
      if f == "" do return x; done
      var ext = Filename::get_extension f;
      var ft = if ext != "" then dfiletime (f,#past_time) else
        max (dfiletime (f+".fdoc", #past_time), dfiletime (f+".flx",#past_time))
      ;
      debugln$ ("Time "+f+" = "+ strfiletime ft);
      ft = if ft == #past_time then #future_time else ft; // missing dependency
      return max (x,ft);
    }

    fun cal_files_time (fs: list[string])=> fold_left maxf #past_time fs;

    var deptext = load df;
    var lines = split (deptext, "\n"); 
    debugln$ "Deps=" + str(lines);
    var deptime = 
      let ?ft = cal_files_time lines in 
      if ft == #past_time then #future_time else ft endif
    ;
    debugln$ "Deptime=" + strfiletime(deptime);
    return deptime;
  }


  fun cal_cxx_uptodate(debugln:string -> 0, OUTPUT_DIR:string, f:string)= 
  {
    val depfilename = cache_join (OUTPUT_DIR, f+".dep");
    debugln$ "Dependency file name = " + depfilename;
    var depfiletime = dfiletime (depfilename, #future_time);
    if depfiletime == #future_time do 
      debugln$ "Dependency file doesn't exist";
      return false;
    done

    var deptime = cal_time_from_flxdepfile (debugln, depfilename);
    debugln$ "dep time = " + strfiletime deptime;
    debugln$ "depfile time = " + strfiletime depfiletime;
    var cxx_uptodate = deptime < depfiletime;
    debugln$ "cxx generated by flxg is = " + if cxx_uptodate then "" else " NOT " endif + "uptodate";
    return cxx_uptodate;
  }

 
  gen check_cxx_uptodate () : bool =
  {
    debugln "Check Felix->C++ uptodate";
    if control.RECOMPILE == 1 do 
      debugln$ "Felix->C++ dependency checking skipped due to switch RECOMPILE=1: forced not uptodate";
      return false;
    elif control.CHECK_DEPENDENCIES == 1 do
      debugln "Checking Felix->C++ dependencies since CHECK_DEPENDENCIES=1 to see if the cxx is uptodate";
      return cal_cxx_uptodate (debugln[string], control.OUTPUT_DIR, dvars.filebase);
    else
      debugln$ "Felix->C++ dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate";
      return true;
    done
  }
 
  // Assumes C++ generated by flxg (using timestamp of dep file)
  // Assumes command line C++ file includes older than the argument (fixme!)
  gen check_binary_uptodate () : bool =
  {
    fun maxf (t:double) (f:string) => max (t, dfiletime (f, #future_time));

    debugln "Check C++->binary uptodate";
    if control.RECOMPILE == 1 do 
      debugln$ "C++->binary dependency checking skipped due to switch RECOMPILE=1: forced not uptodate";
      return false;
    elif control.CHECK_DEPENDENCIES == 1 do
      debugln "Checking C++->binary dependencies since CHECK_DEPENDENCIES=1 to see if the output is uptodate";

      var xtime = dfiletime(control.LINKER_OUTPUT_FILENAME,#past_time);
      val depfilename = cache_join (control.OUTPUT_DIR, dvars.filebase+".dep");
      var flx_srctime = dfiletime (depfilename,#future_time);
      var cpp_srctime = fold_left maxf #past_time control.cpps;
      var obj_srctime = fold_left maxf #past_time control.cppos;
      var deptime = max (max (flx_srctime, cpp_srctime), obj_srctime);
      var uptodate = xtime > deptime;


      debugln$ "Extra c++ sources  "+ str control.cpps;
      debugln$ "Extra object files "+ str control.cppos;

      debugln$ "Filebase = " + dvars.filebase; 

      debugln$ "cache   time = " + strfiletime (control.cache_time);
      debugln$ "flx_src time = " + strfiletime (flx_srctime);
      debugln$ "cpp_src time = " + strfiletime (cpp_srctime);
      debugln$ "obj_src time = " + strfiletime (obj_srctime);

      debugln$ "dep     time = " + strfiletime (deptime);
      debugln$ "Binary  time = " + strfiletime (xtime) + " for " + control.LINKER_OUTPUT_FILENAME;
      debugln$ "output is " + if uptodate then "" else " NOT " endif + " up to date";
      return uptodate;
    else
      debugln$ "C++->binary dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate";
      return true;
    done
  }


  gen check_run_if_required_and_uptodate() : bool  =
  {

    if control.RECOMPILE == 0 and control.RUNIT == 1 and control.CLEAR_CACHE == 0 do
      var uptodate = #check_cxx_uptodate and #check_binary_uptodate;
      if control.STATIC == 0 do
        if uptodate do
          debugln$ "Running dynamically linked binary";
          return true;
        else
          debugln$ "Dynamically linked binary out of date or non-existant";
        done
      else
        if uptodate do
          debugln$ "Running statically linked binary";
          return true;
        else
          debugln$ "Statically linked binary out of date or non-existant";
        done
      done
    done
    return false;

  }

  gen run_with_calpackages () : int = 
  {
    if control.STATIC == 0 do
      return #run_dynamic_with_calpackages;
    else
      return #run_program_static;
    done
  }


  gen run_cxx_and_exe_as_required () : int = 
  {

    if control.CCOMPILEIT == 0 do
      debugln "C++ compilation (and linking and running) skipped by switch";
    else
      var uptodate = #check_binary_uptodate;
      if uptodate do
        return #maybe_run_program;
      else
        if control.STATIC == 0 do
          debugln "Dynamic linkage";
          var result = #cxx_compile_dynamic;
          if result != 0 return result;

          if control.LINKIT == 0 do
            debugln "Linking (and running) skipped by switch";
          else
            result = #cxx_link_dynamic_with_calpackages;
            if result != 0 return result;
            return #maybe_run_program;
          done
        else

          debugln "Static linkage";
          result = #cxx_compile_static;
          if control.STATICLIB == 1 do
            return #cxx_static_library;
          elif control.LINKIT == 0 do
            debugln "Linking (and running) skipped by switch";
          else
            result = #cxx_link_static_with_calpackages;
            if result != 0 return result;
            return #maybe_run_program;
          done
        done
      done
    done
    return 0;
  }

  method gen runit() : int = {
    var immediate_run = #check_run_if_required_and_uptodate;
    if immediate_run do
      debugln$ "Uptodate so run immediately";
      return #run_with_calpackages;
    else
      var result = #run_felix_compiler_if_required;
      if result != 0 return result;
      return #run_cxx_and_exe_as_required;
    done
  }


}

