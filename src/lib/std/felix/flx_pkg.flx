include "std/felix/flx_pkgconfig";

class FlxPkg
{
  typedef pkgconfig_inspec_t = (
    FLX_INSTALL_DIR:string,
    INCLUDE_DIRS:string,
    INCLUDE_FILES:string,
    EXT_EXE: string,
    EXT_STATIC_OBJ: string,
    STATIC: int,
    SLINK_STRING: string,
    DLINK_STRING: string,
    LINKER_SWITCHES: string,
    cpp_filebase : string
  );

  typedef pkgconfig_outspec_t = (
    INCLUDE_DIRS: string,
    INCLUDE_FILES: string,
    DRIVER_EXE: string,
    DRIVER_OBJS: list[string],
    LINK_STRING: string
  );

  gen map_package_requirements(spec:pkgconfig_inspec_t) : pkgconfig_outspec_t =
  {

    var PKGCONFIG_PATH="--path+="+Filename::join(spec.FLX_INSTALL_DIR,"config");
    var RESH = "@"+spec.cpp_filebase+".resh";

    gen pkgconf(args:list[string]) : string =
    {
      var allargs = PKGCONFIG_PATH+args+RESH; 
      var ret,s = FlxPkgConfig::flx_pkgconfig(allargs);
      if ret != 0 do
        eprintln$ "Error " + str ret + " executing flx_pkgconfig, args=" + str allargs;
        System::exit (1);
      done
      return cat ' ' s;
    }

    var e = Empty[string];

    // find all include directories
    var INCLUDE_DIRS=spec.INCLUDE_DIRS + ' ' + pkgconf(e+'--field=cflags');

    // find all include files
    var INCLUDE_FILES=spec.INCLUDE_FILES + " " + pkgconf(e+'--field=includes');


    // find the driver package
    var DRIVER_PKG=pkgconf(e+'--field=flx_requires_driver');
    DRIVER_PKG == "" ??  DRIVER_PKG="flx_run";

    // find the driver entity
    if spec.STATIC == 0 do
      // dynamic linkage: the driver executable
      var DRIVER_EXE= Filename::join$ list (
        spec.FLX_INSTALL_DIR,
        "bin",
        DRIVER_PKG+config.EXT_EXE
      )
    ;
    else
      // static linkage: the driver object files
      var DRIVER_OBJS =list(
        Filename::join (list (
          spec.FLX_INSTALL_DIR,
          "lib",
          "rtl",
          DRIVER_PKG+"_lib"+
          spec.EXT_STATIC_OBJ)),
        Filename::join (list (
          spec.FLX_INSTALL_DIR,
          "lib",
          "rtl",
          DRIVER_PKG+"_main"+spec.EXT_STATIC_OBJ))
      );
    done

    if spec.STATIC == 0 do
      // dynamic linkage: all the libraries required by the application
      var LINK_STRING=spec.DLINK_STRING+spec.LINKER_SWITCHES+" "+
        pkgconf(e+"-r"+'--field=provides_dlib'+'--field=requires_dlibs'+DRIVER_PKG);
    else
      // static linkage: all the libraries required by the application and driver
      LINK_STRING=spec.SLINK_STRING+spec.LINKER_SWITCHES+" "+
        pkgconf(e+'-r'+'--keeprightmost'+'--field=provides_slib'+'--field=requires_slibs'+DRIVER_PKG);
    done

    return ( 
      INCLUDE_DIRS = INCLUDE_DIRS,
      INCLUDE_FILES = INCLUDE_FILES,
      DRIVER_EXE = DRIVER_EXE,
      DRIVER_OBJS = DRIVER_OBJS,
      LINK_STRING = LINK_STRING
    );
  }

  proc write_include_file(path:string, INCLUDE_FILES:string) {
    includes := split (strip INCLUDE_FILES,char " ");
    var f = fopen_output(path+".includes");
    List::iter  
      (proc (i:string) { writeln$ f, "#include " + i; })
      includes
    ;
    fclose f;
  }

}

