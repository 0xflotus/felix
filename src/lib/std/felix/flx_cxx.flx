class CxxCompiler
{
  typedef cxx_dynamic_spec_t = 
  (
    CCOBJ_DLLIB: string,
    CCFLAGS: string,
    INCLUDE_DIR: string,
    INCLUDE_DIRS: string,
    MACROS: string,
    SPEC_OBJ_FILENAME:string,
    debugln: string -> 0,
    quote: string -> string
  );

  gen generic_cxx_compile_for_dynamic (spec: cxx_dynamic_spec_t) (src:string, dst:string) : int =
  {
    var CMD=List::cat ' ' (list (
      spec.CCOBJ_DLLIB, spec.CCFLAGS, "-DTARGET_BUILD",
      spec.INCLUDE_DIR, spec.INCLUDE_DIRS, spec.MACROS,
      quote(src),
      (spec.SPEC_OBJ_FILENAME+quote(dst))))
    ;
    spec.debugln$ "C++ compile command="+CMD;
    var result = System::system(CMD);
    if result != 0 do
      eprintln $ "C++ command="+CMD + " FAILED";
    done
    return result;
  }


  typedef link_dynamic_spec_t = 
  (
    CCLINK_DLLIB: string,
    CCFLAGS: string,
    EXT_SHARED_OBJ:string,
    SPEC_EXE_FILENAME: string,
    LINK_STRING: string,
    debugln: string -> 0,
    quote: string -> string
  );

  gen generic_link_dynamic 
    (spec:link_dynamic_spec_t) 
    (cppos: list[string],
    LINKER_OUTPUT_FILENAME:string)
  : int = 
  {
    var CMD=cat ' ' (list (
      spec.CCLINK_DLLIB, 
      spec.CCFLAGS,
      cat " " cppos, 
      (spec.SPEC_EXE_FILENAME+spec.quote(LINKER_OUTPUT_FILENAME)),
      spec.LINK_STRING))
    ;
    debugln$ "Link command="+CMD;
    var result = System::system(CMD);
    if result != 0 do
      eprintln $ "Dynamic link command="+CMD + " FAILED";
    done
    return result;
  }



  typedef cxx_compile_static_t =
  (
    CCOBJ_STATIC_LIB:string,
    CCFLAGS:string, 
    INCLUDE_DIR:string, 
    INCLUDE_DIRS:string,
    MACROS:string, 
    SPEC_OBJ_FILENAME:string,
    debugln: string -> 0,
    quote: string -> string
  );

  gen generic_cxx_compile_for_static 
    (spec:cxx_compile_static_t)
    (src:string, dst:string) : int =
  {
    var CMD=List::cat ' ' (list (
      spec.CCOBJ_STATIC_LIB,
      spec.CCFLAGS, 
      "-DTARGET_BUILD",
      "-DFLX_STATIC_LINK", 
      spec.INCLUDE_DIR, 
      spec.INCLUDE_DIRS,
      spec.MACROS, 
      spec.quote(src),
      (spec.SPEC_OBJ_FILENAME+spec.quote(dst))))
    ;
    spec.debugln$ "C++ command="+CMD;
    var result=system(CMD);

    if result != 0 do
      eprintln$ "C++ compilation "+src+" failed";
    done
    return result;

  }


  typedef generic_link_static_t =
  (
    CCLINK_STATIC: string,
    SPEC_EXE_FILENAME: string,
    LINK_STRING: string,
    debugln: string->0,
    quote: string -> string
  );

  gen generic_link_static 
    (spec:generic_link_static_t) 
    (cppos:list[string], LINKER_OUTPUT_FILENAME:string) : int =
  {
    var xargs = list[string] () +
        spec.CCLINK_STATIC +
        (spec.SPEC_EXE_FILENAME+quote(LINKER_OUTPUT_FILENAME)) +
        cppos + 
        spec.LINK_STRING
    ;
    var CMD = cat ' ' xargs;

    debugln$ "Link command="+CMD;
    var result=system(CMD);
    if result != 0 do
      debugln$ "Link command="+CMD+ " FAILED";
    done 
    return result;
  }

  typedef generic_lib_static_t =
  (
    CCLINK_STATIC_LIB: string,
    SPEC_LIB_FILENAME: string,
    debugln: string->0,
    quote: string -> string
  );

  gen generic_static_library 
    (spec:generic_lib_static_t) 
    (cppos:list[string], LINKER_OUTPUT_FILENAME:string) : int =
  {
    var xargs = list[string] () +
        spec.CCLINK_STATIC_LIB +
        (spec.SPEC_LIB_FILENAME+quote(LINKER_OUTPUT_FILENAME)) +
        cppos
    ;
    var CMD = cat ' ' xargs;

    debugln$ "Library archive command="+CMD;
    var result=system(CMD);
    if result != 0 do
      debugln$ "Library archive command="+CMD+ " FAILED";
    done 
    return result;
  }


}

