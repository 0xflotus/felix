class Flxg
{
  typedef flxg_spec_t = 
  (
    INLINE:int,
    OUTPUT_DIR:string,
    BUNDLE_DIR:opt[string],
    CACHE_DIR:string,
    COMPILER_PHASE:string,
    DOREDUCE:int,
    STDLIB:list[string],
    QUOTE_FLXG:string,
    VERBOSE:string,
    STDGRAMMAR:string,
    STDIMPORT:string,
    IMPORTS:string,
    FLXLIB:string,
    INCLUDE_DIRS:string,
    TIME:int,
    filebase:string,
    use_ext:string,
    debugln: string -> 0,
    quote: string -> string
  );


  gen run_felix_compiler (spec:flxg_spec_t) : int =
  {
    var FLXFLAGS="--inline="+str(spec.INLINE);
    if spec.OUTPUT_DIR != "" do 
      FLXFLAGS += ' '+spec.quote('--output_dir=' + str(spec.OUTPUT_DIR)); 
    done
    match spec.BUNDLE_DIR with
    | Some ?dir =>
      FLXFLAGS += ' ' + spec.quote('--bundle_dir=' + dir); 
    | None=> ;
    endmatch;
    if spec.CACHE_DIR != "" do 
      FLXFLAGS += " "+spec.quote("--cache_dir=" + spec.CACHE_DIR); 
    done
    if spec.COMPILER_PHASE != "" do 
      FLXFLAGS += ' --compiler-phase=' + spec.COMPILER_PHASE; 
    done
    if spec.DOREDUCE == 0 do
      FLXFLAGS += ' --no-reduce';
    done
    if spec.TIME == 1 do
      FLXFLAGS += ' --time';
    done

    var stdlibs = cat ' ' spec.STDLIB;
    var CMD=cat ' ' (list (
      spec.QUOTE_FLXG,
      spec.VERBOSE, FLXFLAGS, spec.FLXLIB,
      spec.INCLUDE_DIRS, 
      "--syntax="+spec.STDGRAMMAR, 
      spec.STDIMPORT, spec.IMPORTS)) + 
      ' ' + stdlibs + 
      ' ' + spec.quote(spec.filebase+spec.use_ext)
    ;
    spec.debugln$ "Felix command="+CMD;
    
    var result=System::system(CMD);
    if result != 0 do 
      eprintln$ "Felix compilation "+CMD+" failed";
    done
    return result;
  }

}

