
include "std/win32/__init__";
include "std/directory";

class Win32Directory
{

  // Win32 specific stuff
  type dirent_t = "struct dirent*" requires Win32_headers::direct_h;
  type DIR_t = "intptr_t" requires Win32_headers::io_h;

  proc opendir: string * &DIR_t = "*$2=_findfirst($1.c_str());";
  fun isNULL: DIR_t -> bool = "$1==0";
  fun isNULL: dirent_t -> bool = "$1==0";
  proc readdir: DIR_t * dirent_t * &dirent_t * &int = "*$4=readdir_r($1, $2, $3);";
  proc closedir: DIR_t = "closedir($1);";
  fun filename: dirent_t -> string = "std::string($1->d_name)";
  private fun getcwd: &char * size -> &char = "_getcwd($1,(int)$2)" requires Win32_headers::direct_h;

  // generic stuff
  inherit Directory_class[Win32, Win32FileStat::mode_t];

  // instantiate generics
  instance Directory_class[Win32, Win32FileStat::mode_t] {
    // warning: ignores the mode!
    gen mkdir: string * Win32FileStat::mode_t -> int = "_mkdir($1.c_str())" requires Win32_headers::direct_h;
    gen mkdir: string  -> int = "_mkdir($1.c_str())" requires Win32_headers::direct_h;
    proc mkdirs (s:string)
    {
      if s == "" or s == "." or s == ".." or s.[-1] == char "\\" do 
         return;
      done
      mkdirs$ Filename::dirname s;
      C_hack::ignore$ mkdir s;
    }

    // current directory
    fun getcwd():string = {
      var b: array[char,1024]; 
      var p = getcwd(C_hack::cast[&char] (&b),size 1024);
      return if C_hack::isNULL p then "" else string p endif; 
    }
    fun is_absolute_filename (s:string) => s.[0]=="\\".char or s.[1]==":".char and s.[2]=="\\".char;
    fun mk_absolute_filename(s:string) => 
       if is_absolute_filename s then s else
       #getcwd + "\\" + s
    ;

    fun filesin(dname:string): opt[List::list[string]] = {
      //println$ "filesin " + dname;
      var d:DIR_t;
      var e: dirent_t = C_hack::cast[dirent_t]$ C_hack::malloc 5000;
      var eret = e;
      var err:int = 0;
      var files = List::Empty[string];
      opendir(dname,&d);
      if isNULL d do 
        println "Error opening dir"; 
        C_hack::free$ C_hack::cast[address] e; 
        return None[List::list[string]];
      else
      //println$ "Opened dir " + dname;
  next:>
        readdir(d,e,&eret, &err);
        if err != 0 do 
          println "Error reading dir"; fflush;
          closedir d; 
          C_hack::free$ C_hack::cast[address] e; 
          return None[List::list[string]];
        elif isNULL eret do 
          //println "End of dir"; 
          closedir d; 
          C_hack::free$ C_hack::cast[address] e; 
          return Some files;
        else 
          //println "Think we got a file?";
          assert err == 0;
          //println$ "Found a file " + filename e; 
          files += filename e; 
          goto next;
        done
      done
    }
  }
}

