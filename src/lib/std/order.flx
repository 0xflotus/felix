
// equality: technically, equivalence relation
class Eq[t] {
  virtual fun == : t * t -> bool;
  virtual fun != (x:t,y:t):bool => not (x == y);

  axiom reflex(x:t): x == x;
  axiom sym(x:t, y:t): (x == y) == (y == x);
  axiom trans(x:t, y:t, z:t): x == y and y == z implies x == z;

  fun eq(x:t, y:t)=> x == y;
  fun ne(x:t, y:t)=> x != y;
}

// partial order
class Pord[t]{
  inherit Eq[t];
  virtual fun \subset: t * t -> bool;
  virtual fun \supset(x:t,y:t):bool =>y \subset x;
  virtual fun \subseteq(x:t,y:t):bool => x \subset y or x == y;
  virtual fun \supseteq(x:t,y:t):bool => x \supset y or x == y;
  axiom trans(x:t, y:t, z:t): \subset(x,y) and \subset(y,z) implies \subset(x,z);
  axiom antisym(x:t, y:t): \subset(x,y) or \subset(y,x) or x == y;
  axiom reflex(x:t, y:t): \subseteq(x,y) and \subseteq(y,x) implies x == y;
}

// total order
class Tord[t]{
  inherit Eq[t];
  virtual fun < : t * t -> bool;

  // defined in terms of <, argument order swap, and boolean negation
  // note: not using equality, only works for total order
  virtual fun >(x:t,y:t):bool => y < x;
  virtual fun <= (x:t,y:t):bool => not (y < x);
  virtual fun >= (x:t,y:t):bool => not (x < y);

  axiom trans(x:t, y:t, z:t): x < y and y < z implies x < z;
  axiom antisym(x:t, y:t): x < y or y < x or x == y;
  axiom reflex(x:t, y:t): x < y and y <= x implies x == y;
  axiom totality(x:t, y:t): x <= y or y <= x;

  fun lt (x:t,y:t): bool=> x < y;
  fun gt(x:t,y:t):bool => y < x;
  fun le (x:t,y:t):bool => not (y < x);
  fun ge (x:t,y:t):bool => not (x < y);
  fun max(x:t,y:t):t=> if x < y then y else x endif;
  fun min(x:t,y:t):t => if x < y then x else y endif;

}

class Forward[t] {
  virtual fun succ: t -> t;
  virtual proc pre_incr: &t;
  virtual proc post_incr: &t;
}

class Bidirectional[t] {
  inherit Forward[t];
  virtual fun pred: t -> t;
  virtual proc pre_decr: &t;
  virtual proc post_decr: &t;
}


