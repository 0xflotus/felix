open class Char
{
  open Int;
  fun ord: char -> int = "(int)$1";
  ctor[t in ints] char: t = "(char)$1";
}

open class Wchar
{
  open Long;
  fun ord: wchar -> long ="(long)$1";
  ctor[t in ints] wchar: t = "(wchar_t)$1";
}

open class Uchar
{
  fun ord: uchar -> uint32 ="$1";
  ctor[t in ints] uchar: t = "$1";
}

instance[T in chars] Str[T] {
  fun str: T -> string = "::flx::rtl::strutil::str<#1>($1)" requires package "flx_strutil";
}

instance[T in chars] Repr[T] {
  fun repr[with Str[T]] (c:T) : string = {
    val s = str c;
    return
      match s with
      | "'" =>  "\\'"
      | '\t' => '\\t'
      | '\n' => '\\n'
      | '\r' => '\\r'
      | '\f' => '\\f'
      | '\v' => '\\v'
      | _    => s
      endmatch
    ;
  }
}

open Eq[char];
open Eq[wchar];
open Eq[uchar];

