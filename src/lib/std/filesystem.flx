class FileSystem_class[os]
{
}

include "std/posix/filesystem";
include "std/win32/filesystem";

class FileSystem {
if PLAT_WIN32 do
  inherit Win32FileSystem;
else
  inherit PosixFileSystem;
done

  // find in path
  fun find_in_path(x:string, path:list[string]):opt[string]=>
    match path with
    | Empty[string] => None[string]
    | Cons (?d,?t) => 
      let ?p =  Filename::join(d,x) in
      match FileStat::fileexists p with
      | true => Some p
      | false => find_in_path (x,t)
      endmatch
    endmatch
  ;

  fun regfilesin(dname:string, re:string): list[string] => regfilesin(dname, Re2::RE2 re);

  fun regfilesin(dname:string, re:RE2): list[string] = {
    //eprintln$ "regfilesin " + dname+ " with some kind of regexp .. ";

    var foundfiles = Empty[string];
    proc rfi(dname2: string) {

      //eprintln$ "rf() : dname2=" +dname2;

      if dname2 == "." or dname2 == ".." return;

      var newpath = if dname2 == "" then dname else Filename::join (dname,dname2);

      //eprintln$ "newpath = "+newpath ;

      var newfiles = Directory::filesin(newpath);

      //eprintln$ "returned from filesin" ;

      match newfiles with
      | None  => return;
      | Some ?files =>
        //eprintln$ "got files in " + newpath;
        for f in files do
          if f == "." or f == ".." do ;
          else
            //eprintln$ "Processing file " + f;
            var d = Filename::join (dname2,f);
            //eprintln$ "Relpath " + d;
            var fullpath = Filename::join (dname,d);
            //eprintln$ "fullpath " + fullpath;
            var t = FileStat::filetype fullpath;
            match t with
              | REGULAR => 
                //eprintln ("Regular file " + d);
                var result = Re2::Match(re, Re2::StringPiece d, 0, Re2::ANCHOR_BOTH, C_hack::null[Re2::StringPiece], 0);
                if result do 
		  //eprintln$ d + " Matches"; 
		  foundfiles = Cons (d, foundfiles); done
              | DIRECTORY => 
                //eprintln ("found directory " + d);
                rfi (d);
              | _ => ;
            endmatch;
          done
        done
      endmatch;
    }
    rfi ("");
    return rev foundfiles;
  }
 
}
