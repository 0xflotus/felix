class Dynlink
{
  requires package "flx_dynlink";

  //$ Exception thrown if dynamic linkage fails.
  type flx_link_failure_t = "::flx::rtl::flx_link_failure_t";

  //$ Constructor for dynamic linkage exception.
  ctor flx_link_failure_t : string * string * string = "::flx::rtl::flx_link_failure_t($1,$2,$3)";

  //$ Type of a DLL (dynamic link library) object.
  type flx_library = "::flx::rtl::flx_dynlink_t*";

  //$ Create a fresh DLL object.
  fun create_library_handle: unit->flx_library=
    "new flx::rtl::flx_dynlink_t()";

  //$ Delete a DLL object.
  proc delete_library_handle: flx_library =
    "delete $1;";

  //$ Link a DLL using given filename.
  proc dlopen:flx_library * string = "$1->link($2.c_str());";

  //$ Get the filename of a DLL.
  fun filename : flx_library -> string = "::std::string($1->filename)";

  //$ Unlink a DLL.
  //$ Unsafe! Use with extreme caution.
  //$ May cause pointers into the DLL code segment to dangle.
  proc dlclose:flx_library = "$1->unlink();";


  //$ Type of a DLL (dynamic link library) instance.
  //$ Conceptually this is a pair consisting of
  //$ a library object and a global data frame object.
  type flx_instance = "::flx::rtl::flx_libinit_t*";

  //$ Create a fresh DLL instance object.
  fun create_instance_handle: unit->flx_instance=
    "new flx::rtl::flx_libinit_t()";

  //$ Delete a DLL instance object.
  proc delete_instance_handle: flx_instance =
    "delete $1;";

  //$ Create a DLL instance from a DLL.
  //$ This is a procedure, so maybe the caller is too
  //$ which means the thread frame must be available.
  proc create: flx_library * flx_instance =
    "_create($1,$2,PTF gcp,$1->main_sym,PTF argc,PTF argv,PTF flx_stdin, PTF flx_stdout, PTF flx_stderr);"
    requires property "needs_gc",
    body """
    void _create
    (
      flx::rtl::flx_dynlink_t *library,
      flx::rtl::flx_libinit_t *instance,
      flx::gc::generic::gc_profile_t *gcp,
      flx::rtl::main_t main_sym,
      int argc, char **argv,
      FILE *stdin_, FILE *stdout_, FILE *stderr_
    )
    {
      instance->create(library,gcp,main_sym,argc,argv,stdin_,stdout_,stderr_);
    }
    """;

  //$ Get the filename of a DLL from an instance of it.
  fun filename : flx_instance -> string = "::std::string($1->lib->filename)";

  //$ Get the initialisation continuation of an instance.
  fun get_init: flx_instance -> cont = "$1->start_proc";

  //$ Get the DLL associated with an instance.
  fun get_library: flx_instance -> flx_library = "$1->lib";

  //$ Get the thread frame (global data object) of an instance.
  fun get_thread_frame: flx_instance -> address = "(void*)$1->thread_frame";
  proc destroy: flx_instance = "$1->destroy();";

  //$ Create, link, and initialise a  DLL instance from a filename.
  noinline fun init_lib(filename:string):flx_instance = {
    var library = create_library_handle();
    var linstance =  create_instance_handle();
    try
      dlopen(library,filename);
    catch exn: flx_link_failure_t =>
      eprintln$ "Dynamic linkage error opening DLL " + filename;
      throw exn;
    endtry
    create (library,linstance);
    var init = get_init linstance;
    Fibres::run init;
    return linstance;
  }

  //$ Run a Felix program from a filename.
  //$  WARNING!! All data created by the target
  //$  program must be destroyed
  //$  before the library code is unlinked.
  proc run_lib(filename:string)
  {
    var linstance = init_lib(filename);
    destroy_lib linstance;
  }

  //$ Destroy a completed Felix program from its DLL instance.
  noinline proc destroy_lib(linstance:flx_instance)
  {
    destroy linstance;
    Gc::collect();
    dl := get_library linstance;
    delete_instance_handle linstance;
    dlclose dl;
    delete_library_handle dl;
  }

  //$ Find raw address of a symbol in a DLL.
  //$ This function now ALWAYS does a dlsym
  //$ (or Windows equivalent)
  //$ even for static linkage: after all 
  //$ statically linked executables can still
  //$ load DLLs at run time.
  fun dlsym:flx_library * string->address =
      "FLX_SDLSYM($1->library,$2.c_str())";

  //$ Find typed address of a symbol in a DLL.
  noinline fun flx_dlsym[T] (linst: flx_instance, sym:string) = {
    var library = Dynlink::get_library linst;
    var tf = Dynlink::get_thread_frame linst;
//println$ "Trying to load symbol " + sym + " from library " + linst.filename;
    var raw_sym = Dynlink::dlsym$ library, sym;
    if isNULL raw_sym do
      eprintln$ "Unable to load symbol " + sym + " from library " + linst.filename;
      throw$ flx_link_failure_t(linst.filename,"dlsym","Cannot find symbol " + sym); 
    done
//    eprintln$ "loaded symbol " + sym + " from library " + linst.filename + " address= " + str raw_sym;
    var typed_sym = C_hack::cast[T] raw_sym;
    return typed_sym, tf;
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a function of no arguments.
  noinline fun func0[R] (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address --> R] (linst, sym);
    return fun () => s tf;
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a function of one argument.
  noinline fun func1[R,A0] (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address * A0 --> R] (linst, sym);
    return fun (a0:A0) => s (tf, a0);
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a function of two arguments.
  noinline fun func2[R,A0,A1] (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address * A0 * A1 --> R] (linst, sym);
    return fun (var a0:A0, var a1:A1) => s (tf, a0, a1);
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a procedure of no arguments.
  noinline fun proc0 (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address --> void] (linst, sym);
    return proc () { s tf; };
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a procedure of one argument.
  noinline fun proc1[A0] (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address * A0 --> void] (linst, sym);
    return proc (a0:A0) { s (tf, a0); };
  }

  //$ Return a closure representing a symbol in a DLL instance
  //$ of a procedure of two arguments.
  noinline fun proc2[A0,A1] (linst: flx_instance, sym:string) = {
    var s,tf= flx_dlsym[address * A0 * A1 --> void] (linst, sym);
    return proc (a0:A0,a1:A1) { s (tf, a0, a1); };
  }

  //$ Specialised routine(s) to load stylised plugin.
  //$ Two entry points:
  //$
  //$ setup: string -> int
  //$
  //$ is called to initialise the instance globals.
  //$
  //$ entry-point: arg -> iftype
  //$
  //$ is the primary entry point, typically an object factory, 
  //$ when called with an argument
  //$ of type arg_t it returns //$ an object of type iftype.
  //$
  //$ This function returns the object factory.
  //$ setup is called automatically with the supplied string.
  //$
  //$ There are 3 variants where the factory function accepts
  //$ 0, 1 and 2 arguments.
  gen  load-plugin-func0[iftype] (
    dll-name: string,   // name of the DLL minus the extension
    setup-str: string="",  // string to pass to setup
    entry-point: string=""   // export name of factory function
  ) : unit -> iftype =
  {
    var entrypoint = if entry-point == "" then dll-name else entry-point;
    var dll_extn = #Config::config.EXT_SHLIB;
    var linst = Dynlink::init_lib(dll-name + dll_extn);
    var sresult = Dynlink::func1[int,string] (linst, "setup") (setup-str);
    C_hack::ignore(sresult);
    println$ "Plugin Library " + dll-name + " set up " + str sresult;
    return Dynlink::func0[iftype] (linst, entrypoint);
  }

  gen  load-plugin-func1[iftype, arg_t] (
    dll-name: string,   // name of the DLL minus the extension
    setup-str: string="",  // string to pass to setup
    entry-point: string=""   // export name of factory function
  ) : arg_t -> iftype =
  {
    var entrypoint = if entry-point == "" then dll-name else entry-point;
    var dll_extn = #Config::config.EXT_SHLIB;
    var linst = Dynlink::init_lib(dll-name + dll_extn);
    var sresult = Dynlink::func1[int,string] (linst, "setup") (setup-str);
    C_hack::ignore(sresult);
    println$ "Plugin Library " + dll-name + " set up " + str sresult;
    return Dynlink::func1[iftype,arg_t] (linst, entrypoint);
  }

  gen  load-plugin-func2[iftype, arg1_t, arg2_t] (
    dll-name: string,   // name of the DLL minus the extension
    setup-str: string="",  // string to pass to setup
    entry-point: string=""   // export name of factory function
  ) : arg1_t * arg2_t -> iftype =
  {
    var entrypoint = if entry-point == "" then dll-name else entry-point;
    var dll_extn = #Config::config.EXT_SHLIB;
    var linst = Dynlink::init_lib(dll-name + dll_extn);
    var sresult = Dynlink::func1[int,string] (linst, "setup") (setup-str);
    C_hack::ignore(sresult);
    println$ "Plugin Library " + dll-name + " set up " + str sresult;
    return Dynlink::func2[iftype,arg1_t, arg2_t] (linst, entrypoint);
  }



  //$ Execute an address representing a top
  //$ level exported felix procedure's C wrapper,
  //$ this creates a 'read to run' continuation object
  //$ by both constructing the object using the thread
  //$ frame of the instance as an argument, and calling
  //$ it to fix a null return address and an arbitrary
  //$ client data pointer as arguments to the call method.
  fun bind_proc: flx_instance * address * address -> cont =
    "$1->bind_proc($2,$3)";

  //$ Get the OS dependent handle representing a loaded DLL.
  //$ Return as an address. 
  fun dlib_of : flx_library -> address = "(void*)$1->library";

  //$ Throw an exception indication the failure to 
  //$ find a symbol in a DLL.
  proc dlsym_err:flx_library*string="""
    throw flx::rtl::flx_link_failure_t($1->filename,$2,"symbol not found");
  """;

  //$ Run a procedure represented by a string name with
  //$ given thread frame.
  noinline proc run_proc (linstance:flx_instance, p: string, data: address)
  {
    var lib = get_library linstance;
    var sym = dlsym(lib, p);
    if isNULL(sym) do dlsym_err(lib,p); done;
    var f = bind_proc(linstance, sym, data);
    run f;
  }


}


