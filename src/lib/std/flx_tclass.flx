// Core types and type classes

typedef void = 0;
typedef unit = 1;
typedef bool = 2;
typedef any = any;

// -----------------------------------------------------------------------------

class IStream[f,t] {
  virtual gen read: f -> t;
}

class OStream[f,t] {
  virtual proc write: f * t;
}

class IOStream[f,t] {
  inherit IStream[f,t];
  inherit OStream[f,t];
}

// -----------------------------------------------------------------------------

class IFile[f,t] {
  inherit IStream [f,opt[t]];
}

class OFile[f,t] {
  inherit OStream[f,t];
  virtual proc close: f; // invalidates write operation
}

// -----------------------------------------------------------------------------

class IBuffer [f] {
  virtual gen read: f -> address * int -> int * bool;
}

class OBuffer [f] {
  virtual gen write : f -> address * int -> int * bool;
}

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

class Monad [M: TYPE->TYPE] {
  virtual fun bind[a,b]: M a * (a -> M b) -> M b;
  virtual fun ret[a]: a -> M a;
}

// -----------------------------------------------------------------------------

class Str [T] {
  virtual fun str: T -> string;
}

class Repr [T with Str[T]] {
  virtual fun repr (t:T) : string => str t;
}

class Show [T] {
  inherit Str[T];
  inherit Repr[T];
}

// -----------------------------------------------------------------------------

instance Str[void] {
  fun str (x:void) => "void";
}
open Show[void];

// -----------------------------------------------------------------------------

instance Str[unit] {
  fun str (x:unit) => "()";
}
open Show[unit];

instance Eq[unit] {
  fun == (x:unit, y:unit) => true;
}
open Eq[unit];

