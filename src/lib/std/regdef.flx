module Regdef {
  union regex =
  | Alts of list[regex]
  | Seqs of list[regex]
  | Rpt of regex * int * int
  | Charset of string
  | String of string
  ;

  fun hex_digit(i:int)=> 
    if i<10 then char (ord (char "0") + i) 
    else char (ord (char "A") + i - 10)
    endif
  ;
  fun hex2(c:char)=>
    let ?i = ord c in
    "\\x" + hex_digit ( i / 16 ) + hex_digit ( i % 16 )
  ;
  fun charset_quote(c:char)=>
    if c in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstvuwxyz" then string c
    else hex2 c
    endif
  ;

  fun hex(s:string)= {
    var r = ""; var i:int;
    forall i in 0 upto len s - 1 do
      r += charset_quote s.[i];
    done
    return r; 
  }

  fun ngrp (s:string)=> "(?:"+s+")";

  fun render: regex -> string =
  | Alts ?rs => fold_left (fun (acc:string) (elt:regex)=> acc + "|" + ngrp (render elt)) "" rs
  | Seqs ?rs => fold_left (fun (acc:string) (elt:regex)=> acc + ngrp(render elt)) "" rs
  | Rpt (?r,?i,?x) => render r + "{" + str i + "," + if x < 0 then "" else str x endif + "}"
  | String ?s => QuoteMeta (StringPiece s)
  | Charset ?s => "[" + hex s + "]"
  ;
}
