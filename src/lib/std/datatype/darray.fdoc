
@h1 <code>darray</code>: an array with dynamic, unbounded length.
A @{darray} is a contiguous store of variable, unbounded length.
It is implemented by a pointer to a @{varray}. When the @{varray} becomes
full, a new one with a large bound is created, the contents of
the old array copied over, and the old array forgotten.

Similarly when the @{varray} is not sufficiently full,
a new @{varray} of smaller extent is allocated and the contents
of the old array copied over, and the old array is forgotten.

A user specifiable function is used to control the threshholds
for and amount of expansion and contraction. The user function
defines the amortised performance. With higher expansion factors,
O(1) speed is obtained at the cost of a lot of memory wastage.

@felix
//$ Unbounded Variable length object array.
open class Darray
{
@h2 Representation
We use a control block @{darray_ctl} to store the data
required to access a @{darray}, it contains a
varray and a @{resize} function.
The resize function takes two arguments: the current @{varray}
bound and the requested amount of store. It returns a
recommended amount of store.
@felix
  private struct darray_ctl[T]
  {
    a: varray[T];
    resize: size * size --> size;
  }

@h2 Default resize function.
This function increases the bound to 150% of the requested size
when the requested size exceeds the current bound.

It decreases the current bound to 150% of the requested size
if the requested size is less that 50% of the current bound.

There is a hard minimum of 20 elements except in the special
case the array is empty, when the size is set to 0.
@felix
  //$ This is the default array resize function.
  //$ If we run out of space, allocate what we have + 50%.
  //$ If we need less than half the allocated space, return the requested size + 50%.
  //$ Otherwise return the existing allocated space.
  cfun dflt_resize(old_max:size, requested:size):size=
  {
    // GOTCHA: don't forget that division has a higher precedence than multiplication!
    // sensible minimum size of 20, except if zero length
    if requested == 0uz do return 0uz; done
    if requested < 20uz do return 20uz; done;
    if requested < old_max / 2uz do return (3uz * requested) / 2uz; done 
    if requested > old_max do return (requested * 3uz) / 2uz;  done
    return old_max;
  }

@h2 @{darray} type.
We define @{darray} as a pointer to a darray control block @{darray_ctl}.
This means, in particular, that @{darray} is passed by reference.
The definition is abstract, so the client us not able to fiddle with
the underlying control block.
@felix
  //$ Type of a darray.
  type darray[T] = new &darray_ctl[T];

@h2 Force a resize of the bound.
This procedure forcibly resizes a darray to a new bound.
The number of use elements is the maximum of the old 
number of elements and the new bound.

This procedure is analogous to the C++ string @{reserve} function,
however it is primarily intended for internal use. If this function
is called the new bound will be adjusted on the next size changing
operation such as a @{push_back} or @{pop}.
@felix
  //$ Force a resize.
  //$ Similar to C++ vector reserve function.
  proc do_resize[T] (pd: darray[T], new_size: size)
  {
    var old = (_repr_ pd)*.a;
    (_repr_ pd)*.a = varray[T] (new_size, (len old), (fun(i:size)=>old.i));
  }

@h2 Constructors.
@felix
  //$ Make an empty darray, give it 20 slots for no particular reason.
  ctor[T] darray[T] () => _make_darray[T]$ new darray_ctl[T](varray[T] 20uz , dflt_resize);

  //$ Make a darray from an array
  ctor[T,N] darray[T] (a:array[T,N]) =>  _make_darray[T]$ new darray_ctl[T]( varray[T] a, dflt_resize);

  //$ Make a darray from a varray
  ctor[T] darray[T] (a:varray[T]) =>  _make_darray[T]$ new darray_ctl[T]( varray[T] a, dflt_resize);

  //$ Make a darray from a darray (copy)
  ctor[T] darray[T] (a:darray[T]) => darray ((_repr_ a)*.a);


  //$ make a darray of a certain size initialised with some default value
  ctor[T] darray[T] (n:size, default:T) => darray[T] (varray[T](n,default));

@h2 As a value.
@felix
  //$ Basic array value stuff.
  instance[v] ArrayValue[darray[v],v] {
    fun len (a:darray[v])=> len (_repr_ a)*.a;
    fun unsafe_get (a:darray[v], i:size) => (_repr_ a)*.a.i;
  }

@h2 As an object.
@felix
  //$ Basic array object stuff.
  instance[v] ArrayObject[darray[v],v] {
    proc unsafe_set (b:darray[v],  n:size, x:v) => unsafe_set ((_repr_ b)*.a,n,x);
    fun unsafe_get_ref (b:darray[v],  n:size) : &v => unsafe_get_ref ((_repr_ b)*.a,n);
  }

@h2 As an contiguous array.
@felix
  //$ Contrue as contiguous store.
  instance[v] ContiguousArrayObject[darray[v],v] {
    fun stl_begin(b:darray[v]) => stl_begin b._repr_*.a;
    fun stl_end(b:darray[v]) => stl_end b._repr_*.a;
  }

@h2 Size changing mutators.
The function @{pop} should have been called @{pop_back}.
There's no @{push_front} but there should be.
There's no @{insert} operator.
Generally, this class is very incomplete.
@felix
  //$ Pop a value from the end.
  //$ Same as pop_back in C++.
  proc pop[t](a:darray[t]) {
    pop (_repr_ a)*.a;
    newsize := (_repr_ a)*.resize (maxlen (_repr_ a)*.a, len (_repr_ a)*.a);
    if newsize != maxlen (_repr_ a)*.a do do_resize (a,newsize); done 
  }

  //$ Push a value onto the end.
  //$ Same as push_back in C++.
  proc += [t] (a:&darray[t],v:t) {
    push_back (*a, v);
  }

  //$ Push a value onto the end.
  //$ Same as push_back in C++.
  proc push_back[t] (a:darray[t], v:t) {
    r := _repr_ a; 
    newsize := r*.resize (maxlen r*.a, len r*.a + 1uz);
    if newsize != maxlen r*.a do do_resize(a,newsize); done
    push_back (r*.a, v); // hack to workaround compiler error Address non variable
  }

  //$ insert
  proc insert[t] (a:darray[t], i:int, v:t)
  {
    var r = _repr_ a; 
    newsize := r*.resize (maxlen r*.a, len r*.a + 1uz);
    if newsize != maxlen r*.a do do_resize(a,newsize); done
    r = _repr_ a;
    insert (r*.a,i,v);
  }

  //$ Erase an element, note doesn't resize the varray,
  //$ probably should ..
  proc erase[t] (a:darray[t], i:int) => erase ((_repr_ a)*.a,i);

  //$ Erase multiple elements, note doesn't resize the varray,
  //$ probably should ..
  proc erase[t] (a:darray[t], first:int, last:int) => erase ((_repr_ a)*.a, first,last);

@h2 Convert a darray to a string.
@felix
  // uses _repr_ so has to be in the module
  instance[T with Show[T]] Str[Darray::darray[T]] {
    //$ Convert an array to a string,
    //$ provided the element type is convertible.
    fun str (x:darray[T])=> str (_repr_ x)*.a;
  }

}

@h2 As a set
Should be in main class body.
@felix
//$ Construe a darray as a Set.
instance[T with Eq[T]] Set[darray[T],T] {
 //$ element membership test.
 fun \in (x:T, a:darray[T]) : bool = {
   for var i in 0uz upto len a -1uz do
     if a.i == x do return true; done
   done
   return false;
 } 
}

open[T] Show[Darray::darray[T]];
open[T] Set[Darray::darray[T],T];

open[T] ArrayValue[darray[T], T];
open[T] ArrayObject[darray[T], T];
open[T] ContiguousArrayObject[darray[T], T];

