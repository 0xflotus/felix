publish "Bounded Variable length arrays"

open module Varray
{
  _gc_pointer _gc_type t type varray[t] = "?1*";

  gen _ctor_varray[t]: ulong -> varray[t] =
    "(?1*)(PTF gcp->collector->create_empty_array(&@?1,$1))"
    requires property "needs_gc"
  ;

  // Note: the test on size > 0ul is required because
  // 0ul - 1ul is MAX_ULONG which causes a rather
  // too many loop iterations ..

  publish "Construct a varray with a default value"
  gen _ctor_varray[t] (size:ulong, default:t) = {
    var o = varray[t] size;
    var i : ulong;

    if size > 0ul do forall i in 0ul upto size - 1ul do
      o.[i] = default;
    done done
    set_used (o,size);
    return o;
  }

  publish "Construct a varray with a default value computed by a function"
  gen _ctor_varray[t] (size:ulong, f:ulong->t) = {
    var o = varray[t] size;
    var i : ulong;

    if size > 0ul do forall i in 0ul upto size - 1ul do
      o.[i] = f i;
    done done
    set_used (o,size);
    return o;
  }

  private proc set_used[t]: varray[t] * ulong =
    "PTF gcp->collector->set_used($1,$2);"
    requires property "needs_gc"
  ;

  lvalue fun subscript[t]: varray[t] * !ints -> lvalue[t] = "$1[$2]";

  fun len[t]: varray[t] -> ulong =
    "PTF gcp->collector->get_used($1)"
    requires property "needs_gc"
  ;

  fun maxlen[t]: varray[t] -> ulong =
    "PTF gcp->collector->get_count($1)"
    requires property "needs_gc"
  ;

  proc pluseq[t] : &varray[t] * t = """
    {
      ?1 * _p = *$1;
      unsigned long n = PTF gcp->collector->get_used(_p);
      PTF gcp->collector->incr_used(_p,1L);
      new(_p+n) ?1($2);
    }
  """
    requires property "needs_gc"
  ;

  proc pop[t] : varray[t] = """
    {
      ?1 * _p = $1;
      unsigned long n = PTF gcp->collector->get_used(_p);
      PTF gcp->collector->incr_used(_p,-1L);
      destroy(_p+n-1);
    }
  """
    requires property "needs_gc"
  ;

  proc iter[T] (_f:T->void) (x:varray[T]) {
    var i : ulong;

    if len(x) > 0ul do forall i in 0ul upto len(x) - 1ul do
      _f x.[i]
    done done
  }

  fun map[T, U] (_f:T->U) (x:varray[T]): varray[U] = {
    var o = varray[U]$ len(x);
    var i : ulong;

    if len x > 0ul do forall i in 0ul upto len(x) - 1ul do
      o.[i] = _f x.[i];
    done done

    set_used (o,len(x));
    return o;
  }

  fun fold_left[T, U] (_f:U->T->U) (init:U) (x:varray[T]): U = {
    var o = init;
    var i : ulong;

    if len x > 0ul do forall i in 0ul upto len(x) - 1ul do
      o = _f o x.[i];
    done done

    return o;
  }

  fun fold_right[T, U] (_f:T->U->U) (x:varray[T]) (init:U): U = {
    var o = init;
    var i : ulong;

    if len x > 0ul do forall i in len(x) - 1ul downto 0ul do
      o = _f x.[i] o;
    done done

    return o;
  }
}

instance[T with Show[T]] Str[Varray::varray[T]] {
  fun str (xs:varray[T]) = {
    var o = 'varray(';
    var i : ulong;

    if Varray::len xs > 0ul do
      o += repr xs.[0];

      forall i in 1ul upto Varray::len xs - 1ul do
        o += ', ' + repr xs.[i];
      done
    done

    return o + ')';
  }
}

open[T] Show[Varray::varray[T]];

