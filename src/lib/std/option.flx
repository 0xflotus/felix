publish "option type"
  union opt[T] =
    | None
    | Some of T
  ;

instance[T with Show[T]] Str[opt[T]] {
  fun str (x:opt[T]) =>
    match x with
    | Some ?x => "Some " + (str x)
    | None[T] => "None"
    endmatch
  ;
}

fun or_else[T] (x:opt[T]) (d:T) : T =>
       match x with
       | Some ?v => v
       | None => d
       endmatch
       ;


class DefaultValue[T] {
  virtual fun default[T]: 1->T;

  fun or_default[T]  (x:opt[T]) () =>
               x.or_else #default[T]
       ;
  
}
