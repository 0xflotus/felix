class Lexer
{
  pod type iterator = "char const*";
  fun start_iterator : string -> iterator = "$1.c_str()";
  fun end_iterator: string -> iterator = "$1.c_str()+$1.size()";
  fun bounds (x:string): iterator * iterator = {
    return
      start_iterator x,
      end_iterator x
    ;
  }
  fun string_between: iterator * iterator -> string =
   "::std::string($1,$2)";

  fun + : iterator * int -> iterator = "$1 + $2";
  fun - : iterator * int -> iterator = "$1 - $2";
  fun - : iterator * iterator -> int = "$1 - $2";
  fun deref: iterator -> char = "*$1";
}

instance Eq[Lexer::iterator] {
  fun == :Lexer::iterator * Lexer::iterator -> bool = "$1==$2";
}

instance Tord[Lexer::iterator] {
  fun < :Lexer::iterator * Lexer::iterator -> bool = "$1<$2";
}

open Eq[Lexer::iterator];

