open module Bool
{

  fun land: bool * bool -> bool = "$1&&$2";
  fun nand: bool * bool -> bool = "!($1&&$2)";
  fun lor: bool * bool -> bool = "$1||$2";
  fun nor: bool * bool -> bool = "!($1||$2)";
  fun xor: bool * bool -> bool = "$1!=$2";
  fun lnot: bool -> bool = "!$1";
  fun implies: bool * bool -> bool = "!$1||$2";
  reduce dneg(x:bool): lnot (lnot x) => x;
  reduce dneg(x:bool,y:bool): lnot (nand(x,y)) => land(x,y);
  reduce dneg(x:bool,y:bool): lnot (nor(x,y)) => lor(x,y);
  proc fprint: ostream * bool = '*$1<<($2??"true":"false");' requires Cxx_headers::iostream;
}

instance Str[bool] {
  fun str (b:bool) : string => if b then "true" else "false" endif;
}

instance Tord[bool] {
  fun lt: bool * bool -> bool = "$1<$2";
}

open Tord[bool];


