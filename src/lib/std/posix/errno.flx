open class Errno 
{
  pod type errno_t = "int" requires C89_headers::errno_h;
  ctor int : errno_t = "$1";
  ctor errno_t : int = "$1";
  fun == : errno_t * errno_t -> bool= "$1==$2";
  fun != : errno_t * errno_t -> bool= "$1!=$2";
  
  const errno : errno_t = "errno"; // SUCKS
  const ENOERROR : errno_t = "0";
  const EACCES: errno_t;
  const ENOENT: errno_t;
  const EAGAIN: errno_t;
  const ENOMEM: errno_t;
  const EEXIST: errno_t;
  const EINTR: errno_t; // call interrupted by a signal

  proc maybe_exit(var n:int) { if n != 0 do System::exit(errno.int); done }
  proc maybe_exit(var n:errno_t) { if n != ENOERROR  do System::exit(n.int); done }
  proc maybe_exit() { if errno != ENOERROR do System::exit(errno.int); done }

  // Note: we have to void out the return of strerror_r because OSX and XSI 
  // return int, which disagrees with the GNU version which returns char*
  // To fix this we'd need more configuration stuff. Can be done,
  // but currently deferred.
  proc strerror_r: errno_t* &char * size  = "(void)strerror_r($1, $2, $3);" 
    requires C89_headers::string_h /* on Linux.. on OSX it's in stdio.h */
  ;
  fun strerror(e:errno_t) : string = {
    var b:array[char,1000];
    strerror_r(e,carray (&b), b.len.size);
    return string( carray (&b));
  }
  gen strerror()=> strerror errno;

  instance Str[errno_t] { fun str(e:errno_t)=> str e.int; }

  class Check[T] 
  {
    proc int_to_proc (var x:int) { if x == -1 do ehandler; done }
    fun int_to_int (var x:int) = { if x == -1 do ehandler; done return x; }
    fun pointer_to_pointer[U] (var p:&U) = { if C_hack::isNULL p do #ehandler; done return p; }
    virtual proc ehandler: unit;
  }

  type check_ignore = "";
  instance Check[check_ignore] 
  {
    proc ehandler () {}
  }
  type check_throw = "";
  instance Check[check_throw] 
  {
    proc ehandler () { fail #strerror; }
  }
}

