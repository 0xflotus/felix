open class Control
{
  open C_hack;
  publish 'infinite loop'
  proc forever (bdy:unit->void)
  {
    rpeat:>
      bdy();
      goto rpeat;
    dummy:> // fool reachability checker
  }

  publish "do nothing [the name pass comes from Python]"
  proc pass(){}

  publish 'C style for loop'
  proc for_each
    (init:unit->void)
    (cond:unit->bool)
    (incr:unit->void)
    (bdy:unit->void)
  {
    init();
    rpeat:>
      if not (cond()) goto finish;
      bdy();
      incr();
      goto rpeat;
    finish:>
  }

  publish 'abnormal termination with message'
  proc fail:string = 'throw ::std::runtime_error($1);' requires Cxx_headers::stdexcept;

  publish "WILL BE DEPRECATED, these don't work right"
  fun fail_fun[t]:1->t = 'throw ::std::runtime_error(""),*(?1*)0' requires Cxx_headers::stdexcept;

  publish "WILL BE DEPRECATED, these don't work right"
  fun fail_fun[t]:string->t = 'throw ::std::runtime_error($1),*(?1*)0' requires Cxx_headers::stdexcept;

  publish "Felix procedural continuation type"
  _gc_pointer type cont = "::flx::rtl::con_t*";

  publish "Current continuation"
  fun current_continuation: unit -> cont = "this";

  publish "Felix fthread"
  _gc_pointer type fthread = "::flx::rtl::fthread_t*";


  publish """
    Throw a continuation. This is unsafe. It should
    work from a top level procedure, or any function
    called by such a procedure, but may fail
    if thrown from a procedure called by a function.
    The library run and driver will catch the
    continuation and execute it instead of the
    current continuation. If the library run is used
    and the continuation being executed is down the
    C stack, the C stack will not have been correctly
    popped. Crudely, nested drivers should rethrow
    the exception until the C stack is in the correct
    state to execute the continuation, but there is no
    way to determine that at the moment.

    Compiler generated runs ignore the exception,
    the library run catches it. Exceptions typically
    use a non-local goto, and they cannot pass across
    a function boundary.
  """
  proc throw(x: unit->void) { _throw (C_hack::cast[cont] x); }
  private proc _throw: cont = "throw $1;";


  // should be private but needed in this class for the data type,
  // and also needed in schannels to do the svc call.

  _gc_pointer type _schannel = "::flx::rtl::schannel_t*";

  // THESE VALUES MUST SYNC WITH THE RTL
  // LAYOUT CHANGE: pointers are now stored in the _uctor_
  // instead of on the heap with a pointer in the uctor
  // This doesn't affect abstract types, even if they're pointers in C
  union svc_req_t =
  /*0*/ | svc_yield
  /*1*/ | svc_get_fthread         of &fthread    // CHANGED LAYOUT
  /*2*/ | svc_read                of address
  /*3*/ | svc_general             of &address    // CHANGED LAYOUT
  /*4*/ | svc_reserved1
  /*5*/ | svc_spawn_pthread       of fthread
  /*6*/ | svc_spawn_detached      of fthread
  /*7*/ | svc_sread               of _schannel * &gcaddress
  /*8*/ | svc_swrite              of _schannel * &gcaddress
  /*9*/ | svc_kill                of fthread
  /*10*/ | svc_collect
  ;

  publish "Call Supervisor"
  // this interface just gets rid of the horrible requirement
  // the request be in a variable so it is addressable
  proc svc(x:svc_req_t) {
    var y=x;
    _svc y;
  }

}

