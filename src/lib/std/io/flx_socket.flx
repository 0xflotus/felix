include "flx_faio";
include "flx_stream";

if POSIX do
  include "flx_faio_posix";
elif WIN32 do
  include "flx_faio_win32";
else
  include "ERROR: flx_socket requires POSIX or WIN32";
done;

module Flx_socket {
  if POSIX do
    typedef socket_t = Faio_posix::socket_t;
  else
    typedef socket_t = Faio_win32::socket_t;
  done;


  proc mk_listener(l: &socket_t, port: &int, qlen: int)
  {
  if POSIX do
    Faio_posix::mk_listener(l,port, qlen);
  else
    Faio_win32::mk_listener(l, port, qlen);
  done;
  }

  proc accept(l: socket_t, s: &socket_t)
  {
  if POSIX do
    Faio_posix::accept(s, l);  // success or not? error checking
  else
    var success: bool;
    Faio_win32::mk_socket(s);  // error check?
    Faio_win32::Accept(&success, l, *s);
    if not success do
      fprint (cout, "Accept failed! num?\n");
    done;
  done;
  }

  proc shutdown(s: socket_t, how: int)
  {
  if POSIX do
    Faio_posix::shutdown(s, how);
  else
    Faio_win32::shutdown(s, how);
  done;
  }

  proc connect(s: &socket_t, addr: charp, port: int)
  {
  if POSIX do
      Faio_posix::connect(s, addr, port );
  else
      Faio_win32::Connect( s, addr, port );
  done;
  }


  //
  // socket_t
  //
  instance Flx_stream::IByteStream[socket_t]
  {
    if POSIX do
    proc read(s: socket_t, len: &int, buf: address, eof: &bool)
      { Faio_posix::async_read(s, len, buf, eof); }
    else
    proc read(s: socket_t, len: &int, buf: address, eof: &bool)
      { Faio_win32::WSARecv(s, len, buf, eof); }
    done;
  }

  instance Flx_stream::OByteStream[socket_t]
  {
    if POSIX do
    proc write(s: socket_t, len: &int, buf: address, eof: &bool)
      {
        //println$ "faio/flx_socket.flx: Flx_stream::OByteStream[socket_t]: write(s,"+str (*len)+",buf,"+str(*eof)+") calling async_write ..";
        Faio_posix::async_write(s, len, buf, eof); 
        //println$ "faio/flx_socket.flx: Flx_stream::OByteStream[socket_t]: write(s,"+str (*len)+",buf,"+str(*eof)+") called async_write ..";
      }
    else
    proc write(s: socket_t, len: &int, buf: address, eof: &bool)
      { Faio_win32::WSASend(s, len, buf, eof); }
    done;
  }

  instance Flx_stream::IOByteStream[socket_t] {}

  instance Flx_stream::TerminalIByteStream[socket_t]
  {
    if POSIX do
    proc iclose (s:socket_t)
      { Faio_posix::shutdown (s,0); Faio_posix::close s; }
    else
    proc iclose (s:socket_t)
      { Faio_win32::closesocket s; }
    done;
  }

  instance Flx_stream::TerminalOByteStream[socket_t]
  {
    if POSIX do
    proc oclose (s:socket_t)
      { Faio_posix::shutdown (s,1); Faio_posix::close s; }
    else
    proc oclose (s:socket_t)
      { Faio_win32::closesocket s; }
    done;
  }

  instance Flx_stream::TerminalIOByteStream[socket_t]
  {
    if POSIX do
    proc ioclose (s:socket_t)
      {
        // RF: just close, I don't think any of this stuff is necessary.
        // I think this is an application level problem.
        //fprint (cerr,q"STREAM:Closing socket $s\n");
        //Faio_posix::shutdown(s,2);
        //Faio::sleep (Faio::sys_clock,5.0);
        /*
        var len = 1; var eof = false; var buf = C_hack::malloc(1);
        Faio_posix::async_read(s, &len, buf, &eof);
        fprint (cerr,q"STREAM:socket $s, eof=$eof\n");
        Faio_posix::shutdown(s,0);
        */
        Faio_posix::close s;
      }
    else
    proc ioclose (s:socket_t)
      { Faio_win32::closesocket s; }
    done;
  }
}
