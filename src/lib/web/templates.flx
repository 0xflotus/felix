publish """
Templating system, allows the specification of handlers for template files
(which are oridnary xhtml files (ending in .xhtml)). Files matched by the app
handler then have the specified decorators applied to them.
Decorators are predicate/action pairs that can select a node in a
document and preform some action on that node.

Example of the specification of the a template app_handler which will
match on requests for the files htllo.xhtml and matrix.xhtml and
filter the decorators specified in ExampleDecorator::decorates()

Templates::app_handlers(list("hello.xhtml","matrix.xhtml"),ExampleDecorator::decorates())
"""

class Templates {
  open ServerConfig;
  open HTTPRequest;
  open HTTPConnection;
  open HTTPHandler;
  open HTTPResponse;
  open XML2;

  publish """matches on any files ending in .xhtml """
  fun app_handlers(decorators:Decorators::decorators) =>
    (Cons (http_handler(default_templates_route,apply_decorators(decorators)),
     Empty[http_handler]));

  publish """ matches on any of the files in the list templates """
  fun app_handlers(templates:list[string],decorators:Decorators::decorators) =>
    (Cons (http_handler(default_templates_route,apply_decorators(templates,decorators)),
     Empty[http_handler]));

   fun default_templates_route(config:server_config,request:http_request) => 
    match get_fname(request) with
      |Some ?s => endswith s ".xhtml"
      |_       => false
    endmatch;

   gen apply_decorators (decorators:Decorators::decorators) (conn:http_connection, request:http_request) = {
      apply_decorators (Empty[string],decorators) (conn,request);
      return;
   }

   gen apply_decorators (templates:list[string],decorators:Decorators::decorators) (conn:http_connection, request:http_request) = {
     var template:string = match get_fname(request) with |Some ?s => s |_ => "" endmatch;
     if match templates with |Empty => false |_ => true endmatch do
       if match find (fun (x:string) => x == template) templates with
          |Some _ => false |_ => true endmatch do
         return ;
       done
     done
     var template_file = conn.config.document_root+"/"+template;
     var xml_doc1 = xml_parse_file(template_file);
     Decorators::find_all_in_doc_and_do(decorators,conn,request,xml_doc1);
     var doc_text = xml_doc_dump(xml_doc1);
     write(conn,(make_xhtml (doc_text)));
     xml_free_doc(xml_doc1);
     return ; 
  } 

  gen apply_decorators (template:string,decorators:Decorators::decorators) (conn:http_connection, request:http_request) = {
     var template_file = conn.config.document_root+"/"+template;
     var xml_doc1 = xml_parse_file(template_file);
     Decorators::find_all_in_doc_and_do(decorators,conn,request,xml_doc1);
     var doc_text = xml_doc_dump(xml_doc1);
     write(conn,(make_xhtml (doc_text)));
     xml_free_doc(xml_doc1);
     return ;  
  }


  fun load_fragment(conn:http_connection,fragment_name:string):xml_node_ptr = {
    val fragment_file = Filename::join(conn.config.document_root,fragment_name); 
    return xml_doc_get_root_element(xml_parse_file(fragment_file));
  }
}
