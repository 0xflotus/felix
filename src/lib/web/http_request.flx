publish """
Defines types and container for http_request.
Main entry points are get_param (helper to extract params from http_request)
and get_http_request which extracts request from stream
"""  

class HTTPRequest {
   open HTTPConnection;
   open Assoc_list;   
   
   union http_method = 
     | GET
     | POST
     | BAD;

  instance Str[http_method] {
    fun str : http_method ->string =
      | GET => "GET"
      | POST => "POST"
      | BAD => "BAD";
   }
   struct http_request {
    method: http_method;
    uri: string;
    path:string;
    params:assoc_list[string,string];
    headers:assoc_list[string,string];    
  }

  instance Str[http_request] {
    fun str (request: http_request) => 
      "HTTP Request\n"+
      "\tMethod:"+str(request.method)+"\n"+
      "\tURI:"""+request.uri+"\n"+
      "\tPath:"""+request.path+"\n"+
      "\tParams:"""+str(request.params)+"\n"+
      "Headers:"""+str(request.headers)+"\n";
  } 
      
  proc copy_request(orig:&http_request,cpy:&http_request) = {
    *cpy.method = *orig.method;
    *cpy.uri = *orig.uri;
    *cpy.path = *orig.path;
    *cpy.params = *orig.params;
  }


  fun get_params(p:string):list[string*string] ={
     var params = split(p,'&');
     return   map  (fun(x:string):string*string =>let Cons(?hd,?tl) = split(x,'=') in
                     (hd,(fold_left (fun(x:string) (y:string):string => x + y) "" tl))
                     ) params;
  }

  publish """ Main entry point for extracting HTTP request from stream """
  noinline proc get_request(conn:http_connection,request:&http_request) = {
    var k = conn.sock;
    var line: string;
    get_line(k, &line);  // shouldg be the GET line.
    var got = match split(line,' ') with
      | Cons (?method,Cons(?uri,Cons(?prot,_))) => match (method,uri,prot) with
        | ("GET",?uri,?prot)  => match (GET,uri,split(uri,'?'),prot) with
          | (GET,?uri,Cons(?path,?rest),?prot) => 
               http_request(GET,uri,path,
                get_params((fold_left (fun(x:string) (y:string):string => x + y) "" rest)),
                Empty[string*string])
            endmatch
	  endmatch
        | _ =>  http_request(BAD,"","",Empty[string*string],Empty[string*string])
    endmatch;  
    var headers = Empty[string*string];
    while line != "" and line != "\r" do
      get_line(k, &line);  // should be the GET line.
      match split(line,':') with
        | Cons(?key,?value) =>{headers = Cons((key,  
	      (fold_left (fun(x:string) (y:string):string => x + y) "" value)),
              headers);}();
        | ?x => println(x); // Should probably fail
      endmatch;
    done
    got.headers = headers;
    print(str(got));
    copy_request(&got,request); 
  }

  fun get_fname(request:http_request) =>
    match rev(split(request.path,'/')) with
      | Cons(?hd,_) => Some(hd) 
      | _ => None[string]
    endmatch;

  fun get_path_and_fname(request:http_request) =>
    match rev(split(request.path,'/')) with
      | Cons(?hd,?tl) => Some(
            (fold_left (fun(x:string) (y:string):string => x +"/"+ y) "" (rev(tl))), hd)
      | _ => None[string*string]
    endmatch;
  
  publish """ Return opt[string] parameter value for given name """
  fun get_param(request:http_request,name:string) =>
     find (fun (a:string,b:string) => eq(a,b)) request.params name;

}