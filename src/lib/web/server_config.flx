
class ServerConfig {
  open HTTPHandler;
  open Logger;
  open SimpleConfig;
  open Assoc_list;

  struct server_config {
        delay : double;
        port : int;
        server_root : string;
        document_root : string;
        handlers: list[http_handler];
        log:log_message->void;
        params:list[string*string];
  };

  fun _ctor_server_config(handlers:list[http_handler]) => server_config(0.05,8080,".","./html",handlers,
    logger(console_logger(INFO)+console_logger(ERROR)),Empty[string*string]);

  fun basic_server_config(handlers:list[http_handler]):server_config => 
    enhance_with_config_file( enhance_with_command_line_arguments(server_config(handlers)));

  fun enhance_with_command_line_arguments(var config:server_config):server_config = {
    var arg = "";
    var argno = 1;
    while argno<System::argc do
      arg = System::argv argno;
      println$ "ARG=" + arg;
      if prefix(arg,"--document_root=") do
        config.document_root = arg.[16 to];
      elif prefix(arg,"--server_root=") do
        config.server_root = arg.[14 to];
      elif prefix(arg,"--port=") do
        config.port = atoi arg.[7 to];
      elif prefix(arg,"--config=") do
        config.port = atoi arg.[9 to];
      elif prefix(arg,"--debug") do
        var dbg_log:list[log_handler];
        if prefix(arg,"--debug=") do
          val file:string =  str(arg.[8 to]);
          dbg_log = simple_logger(Logger::log("log",file,size(0),0ui),DEBUG);
        else
          dbg_log = console_logger(DEBUG);
        done;
        config.log = logger(console_logger(INFO)+console_logger(ERROR)+dbg_log);
      elif prefix(arg,"--help") do
        println("Usage: "+(System::argv 0)+""" [OPTION]
  --document-root=PATH    Path to document root directory defaults to ./html
  --server-root=PATH      Path to server root direcory defaults to cwd
  --port=PORT             Port to listen on
  --debug                 Logs DEBUG messages to STDOUT
  --debug=FILE            Logs DEBUG to log/FILE
  --config=CONFIG_FILE    Path to config file defaults to ./config/server_config.cfg
""");  
        System::exit(0);      
      done
      ++argno;
    done

    
    return config;
  }

  fun enhance_with_config_file(var config:server_config):server_config = {
    var params = read_config(config.server_root+"/config/server_config.cfg");
    config.params = params;
    match find (fun (a:string,b:string) => eq(a,b)) params "port" with 
      |Some ?s => config.port = int(s);
      |_ => {}();
    endmatch;
    match find (fun (a:string,b:string) => eq(a,b)) params "server_root" with 
      |Some ?s => config.server_root = s;
      |_ => {}();
    endmatch;
    match find (fun (a:string,b:string) => eq(a,b)) params "document_root" with 
      |Some ?s => config.document_root = s;
      |_ => {}();
    endmatch;
    match find (fun (a:string,b:string) => eq(a,b)) params "delay" with 
      |Some ?s => config.delay = double(s);
      |_ => {}();
    endmatch;
    return config;
  }

  fun prefix(var arg:string,key:string)=>
    arg.[to len key]==key
  ;

  fun strtod: string -> double = "strtod($1.data(),0)";

}

