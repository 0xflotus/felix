publish """
Use make_<response type> to wrap html in an apropriate response
"""

class HTTPResponse {
  open LowResTime;
  open HTTPStatusCodes;
  open MIMEType;
  open Assoc_list;
  struct http_response {
    status_code:status_code;
    last_modified:&tm;
    content_type:mime_type;
    headers:assoc_list[string,string];
    content:string;
  }

  fun no_headers ():assoc_list[string,string] => Empty[string*string];

  fun http_header (response:http_response) =>
"""HTTP/1.0 """ + str(response.status_code) +"""\r
Date: """ + rfc1123_date() + """\r
Server: felix web server\r
Last-Modified: """ + rfc1123_date(response.last_modified) +"""\r
Connection: close\r
Content-Type: """ + str(response.content_type) + """\r
Content-Length: """ + str (len response.content) + """\r
"""+(fold_left (fun(x:string) (y:string):string => x + y) "" (map (fun (n:string*string) => n.(0)+": "+n.(1)+"") response.headers))+"""\r
""";

  
  fun make_image(mime:mime_type, content:string) => 
    http_header(http_response(SC_OK,localtime(time_t()),mime,no_headers(),content)) +
      content; 

  fun make_css (content:string) =>
    http_header(http_response(SC_OK,localtime(time_t()),text css,no_headers(),content)) +
      content; 

  fun make_js (content:string) =>
    http_header(http_response(SC_OK,localtime(time_t()),application javascript,no_headers(),content)) +
      content; 

  fun make_json (content:string) =>
    http_header(http_response(SC_OK,localtime(time_t()),application json,no_headers(),content)) +
      content; 

  fun make_not_found (content:string) =>
    let ?response = http_response(SC_NOT_FOUND,localtime(time_t()),text html,no_headers(),
				  "PAGE NOT FOUND: "+content) in
    	http_header(response) + response.content; 

  fun make_forbidden (content:string) =>
    let ?response = http_response(SC_FORBIDDEN,localtime(time_t()),text html,no_headers(),
				  "Forbidden: "+content) in
    	http_header(response) + response.content; 

  fun make_raw (content:string) => make_raw(content,no_headers());
  fun make_raw (content:string,headers:assoc_list[string,string]) =>
    http_header(http_response(SC_OK,localtime(time_t()),application octet_DASH_stream,
                              headers,content)) + content; 

  fun make_html (content:string) => make_html(content,no_headers());
  fun make_html (content:string,headers:assoc_list[string,string]) =>
    http_header(http_response(SC_OK,localtime(time_t()),text html,
                              headers,content)) + content; 
  fun make_xhtml (content:string) => make_raw(content,no_headers());
  fun make_xhtml (content:string,headers:assoc_list[string,string]) =>
    http_header(http_response(SC_OK,localtime(time_t()),application xhtml_PLUS_xml,
                              headers,content)) + content; 

}