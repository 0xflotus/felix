include "std/filename";
include "std/posix/directory";
include "std/posix/filesystem";
requires header '#include <sys/stat.h>';
requires header '#include <sys/types.h>';

open Filename;
open Directory;
open FileSystem;
val name = System::argv 0;
if endswith name ".so" do name = name.[ to (len(name)-size(3))]; done
var sample_decorator = false;
var base = ".";
var generate = false;
var with_jquery = false;
println("Felix Web Server Scaffold Generator");
if System::argc == 1 do help(); exit(0); done
var argno = 1;
while argno<System::argc do
  var arg = System::argv argno;
  if prefix(arg,"--with-sample-decorator") do
    sample_decorator = true;
  elif prefix(arg,"--dir=") do
    base = arg.[6 to];
  elif prefix(arg,"--generate-scaffold") do
    generate = true;
  elif prefix(arg,"--with-jquery") do
    with_jquery = true;
  elif prefix(arg,"--help") do
    help();
    exit(0);      
  done
  ++argno;
done

if (sample_decorator or with_jquery) and generate == false do
  println("Error: --generate-scaffold must be used with these options");
  System::exit(-1);
done

if not PLAT_POSIX do
  println("Sorry, at this time Felix Web Server does not support non Posix platforms");
  System::exit(-1);
done

if generate == true do
  var with_errors=false;
  println("Creating directory structure");
  if (mkdir(join(list(base,"build")))) > 0 do 
    println("Error creating build directory");with_errors = true; done
  if (mkdir(join(list(base,"log")))) > 0 do 
    println("Error creating log directory");with_errors = true; done
  if (mkdir(join(list(base,"config")))) > 0 do 
    println("Error creating config directory");with_errors = true; done
  if (mkdir(join(list(base,"html")))) > 0 do 
    println("Error creating html directory");with_errors = true; done
  if (mkdir(join(list(base,"html","js")))) > 0 do 
    println("Error creating html/js directory");with_errors = true; done
  if (mkdir(join(list(base,"html","css")))) > 0 do 
    println("Error creating html/css directory");with_errors = true; done
  if (mkdir(join(list(base,"html","images")))) > 0 do 
    println("Error creating html/images directory");with_errors = true; done
  
  val makefile_txt = """

all:
	""";
val makefile_txt1 = """lx --output_dir=build --static webapp.flx
clean:
\trm -f webapp build/*
""";

  println("Creating Makefile");
  val makefile = fopen_output (join(list(base,"Makefile")));
  if makefile.valid do
    write(makefile,makefile_txt);write(makefile,"f");write(makefile,makefile_txt1);
    makefile.fclose;
  else
    println("Error creating Makefile");
    with_errors = true;
  done

  val webapp_flx_txt = """
include "web/web_server";
include "hello";

"""+
if sample_decorator then """include "sample_decorator";\n""" else "" endif+  
"""
open HTTPHandler;
open ServerConfig;
open Logger;
open WebServer;

var config = basic_server_config(Hello::app_handlers()+
"""+
if sample_decorator then  
"""                                 Templates::app_handlers(list("sample_template.xhtml"),
                                                              SampleDecorator::decorates())+
"""
else "" endif+
"""                                 default_handlers());
config.log(INFO,"Starting the server");

start_webserver(config);
""";
  println("Creating webapp.flx");
  val webapp_flx = fopen_output(join(list(base,"webapp.flx")));
  if webapp_flx.valid do
    write(webapp_flx, webapp_flx_txt);
    webapp_flx.fclose;
  else
    println("Error creating webapp.flx");
    with_errors = true;
  done

  println("Creating content");
  val index_html_txt = """
<html>
  <head>
  <title>Welcome to Web Server</title>
"""+
if with_jquery then
"""
  <link   rel="stylesheet"       href="/themes/base/jquery.ui.all.css"/>
  <script type="text/javascript" src="/js/jquery-1.6.2.min.js"></script>
  <script type="text/javascript" src="js/jquery-ui-1.8.16.custom.min.js"></script>
"""
else
""
endif+
"""
</head>
<body>
  <h4>Welcome to your web app!</h4>
  <ul><li><a href="/hello">Goto Hello Handler</a></li>
"""+
if sample_decorator then """
      <li><a href="/sample_template.xhtml"> Goto Sample Template</a></li>
"""
else
  ""
endif+
"""
  </ul>
</body>
</html>
""";
  val index_html = fopen_output(join(list(base,"html","index.html")));
  if index_html.valid do
    write(index_html, index_html_txt);
    index_html.fclose;
  else
    println("Error creating html/index.html");
    with_errors = true;
  done

  val webapp_cfg_txt = """
 # Configuration file for webapp
delay = 0.05
port  = 8080
server_root       = .
document_root     = ./html
""";
  println("Creating hello.flx");
  val webapp_cfg = fopen_output(join(list(base,"config","server_config.cfg")));
  if webapp_cfg.valid do
    write(webapp_cfg, webapp_cfg_txt);
    webapp_cfg.fclose;
  done


  val hello_flx_txt = """
class Hello {
  open ServerConfig;
  open HTTPRequest;
  open HTTPConnection;
  open HTTPHandler;
  open HTTPResponse;

  fun app_handlers() =>
      Cons (http_handler(hello_route,hello),
       Empty[http_handler]);
  
  fun hello_route(config:server_config,request:http_request) => 
    request.path == "/hello";

  proc hello(conn:http_connection, request:http_request) {
       write(conn,make_html("<div>Hello World</div>"));
  }
}
""";
  val hello_flx = fopen_output(join(list(base,"hello.flx")));
  if hello_flx.valid do
    write(hello_flx, hello_flx_txt);
    hello_flx.fclose;
  done

  if sample_decorator do
    var sample_decorator_flx_txt = """
class SampleDecorator {
  open HTTPRequest;
  open HTTPConnection;
  open Decorators;
  open DOM;
  
  fun decorates():decorators => (Cons((has_prop ("id","matrix"),decorate_matrix),
                                      Empty[decorator]));

  proc decorate_matrix(conn:http_connection, request:http_request, node:dom_node) {
    val table = node.add_child(new_node("table"));
    table.set_props(list(("border","1"),("style","background-color:green;")));
    for var i:int in 1 upto 5 do
      val row = table.add_child(new_node("tr"));
      row.set_props(list(("id","row"+str(i)),("class","row")));
      for var j:int in 1 upto 7 do
        row.do_add_child(new_node("td",str(i)+"x"+str(j)));
      done
    done
  }
}
""";
    println("Creating sample_decorator.flx");
    val sample_decorator_flx = fopen_output(join(list(base,"sample_decorator.flx")));
    if sample_decorator_flx.valid do
      write(sample_decorator_flx, sample_decorator_flx_txt);
      sample_decorator_flx.fclose;
    done
  var sample_template_xhtml_txt = """
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Sample Decorator</title>
"""+
if with_jquery then
"""
    <link   rel="stylesheet"       href="/themes/base/jquery.ui.all.css"/>
    <script type="text/javascript" src="/js/jquery-1.6.2.min.js"/>
    <script type="text/javascript" src="js/jquery-ui-1.8.16.custom.min.js"/>
"""
else
""
endif+
"""
  </head>
  <body>
    <h4>Sample Decorator</h4>
    <div id='matrix'/>
   <br/>
   <a href="/index.html">Home</a>
   </body>
</html>
  """;
    val sample_template_xhtml = fopen_output(join(list(base,"html",
                                                       "sample_template.xhtml")));
    if sample_template_xhtml.valid do
      write(sample_template_xhtml, sample_template_xhtml_txt);
      sample_template_xhtml.fclose;
    done
  done
done
exit(0);

fun prefix(arg:string,key:string)=>
    arg.[to len key]==key;

proc help() {
      println("Usage: flx "+name+""".flx [OPTIONS]
  --generate-scaffold     Generate webapp saffold
    generate-scaffold options
    -------------------------
    --with-sample-decorator Include an example decorator in scaffold
    --with-jquery           Include jquery headers in generated html
    --dir=Drectory          Path to create scaffold otherwise scaffold is created in 
                          current directory
""");
}


proc exit(n:int) {
  iter (proc (s:string) { C_hack::ignore(unlink_file(s)); }) 
         (list(name+".cpp",name+".ctors_cpp",name+".dep",name+".hpp",
               name+".includes",name+".o",name+".resh",name+".rtti",
               name+".par2",name,"flxg_stats.txt",name+".so",name+".os"));
  System::exit(n);
}
