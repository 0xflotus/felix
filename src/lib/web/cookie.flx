include "web/low_res_time";

class Cookie {
  open LowResTime;

  struct cookie {
    name:string;
    value:string;
    domain:string;
    path:string;
    expires:string;
    secure:bool;
    http_only:bool;
  }

  fun _ctor_cookie (n:string,v:string) = {
    var c:cookie;c.name=n;c.value=v;return c;}

  fun split_first (x:string, d:string): opt[string*string] =>
      match find_first_of (x, d) with
      | None => None[string*string]
      | Some ?n => Some (x.[to n],substring(x,n+1,(len x)))
      endmatch
    ;


  instance Str[cookie] {
    fun str (c:cookie) => c.name+"="+c.value+"; "+match c.domain with 
      |'' => ' ' | ?d => "Domain="+d+"; " endmatch+
      match c.path with |'' => ' ' |?p => "Path="+p+"; " endmatch+
      match c.expires with |'' => ' ' |?e => " Expires="+e+"; " endmatch+
      (if c.secure then "Secure; " else " " endif)+
      (if c.http_only then "HttpOnly;" else "" endif);
  }

  fun set_cookie (c:cookie):string*string => ("Set-Cookie",str(c));
  fun set_cookies (c:list[cookie]):string*string => ("Set-Cookie",
    fold_left (fun(x:string) (y:string):string => y +"\r"+ x) "" 
      (map (fun(z:cookie):string => str(z)) c));




}
