class MultipleSAModel {
  open Sqlite3;
  open ServerConfig;
 
  gen get_sas_for_ip(ip:string ) ():opt[string*string*string*string] = {
    val db = let Some d = db_pool.get_next() in d;
    match sqlite3_prepare_stmt(db,"""SELECT ip,contact_id,first_name,last_name
FROM multiple_sa_tmp INNER JOIN contact on id=contact_id WHERE ip='"""+ip+"'") with
      | qry_ok s  => var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      while (get_next(it,&row)) do
                          yield  Some (let row r = row in  
                                  ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
                                   (get_text_val(get(r,2))),(get_text_val(get(r,3)))));
                      done
       
      | _ => yield  None[(string*string*string*string)];
     endmatch;
    return None[(string*string*string*string)];
  }


  gen set_sa_for_ip(ip:string,id:string ):bool = {
    val db = let Some d = db_pool.get_next() in d;
    match sqlite3_prepare_stmt(db,"INSERT INTO multiple_sa_tmp (ip,contact_id) VALUES('"+ip+"','"+id+"')") with
      | qry_ok s  => return sqlite3_execute(s); 
      | _ =>  return false;
    endmatch;
    return false;
  }


  gen unset_sa_for_ip(ip:string,id:string ):bool = {
    val db = let Some d = db_pool.get_next() in d;
    val qry="DELETE FROM multiple_sa_tmp WHERE ip='"+ip+"' AND contact_id='"+id+"'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok s  => return sqlite3_execute(s); 
      | _ => println(str(sqlite3_errmsg(db))) ; return false;
    endmatch;
    return false;
  }

  gen search_sas_for(term:string ) ():opt[string*string*string] = {
    val db = let Some d = db_pool.get_next() in d;
    val parts = split(term,"+");
    val where_clause = if int(len parts) > 1 then let Cons (f,Cons (l,_)) = parts in "first_name LIKE '"+f+
                "%' AND last_name LIKE '"+l+"%'" else let Cons (l,_) = parts in  "first_name LIKE '"+
                l+"%' OR last_name LIKE '"+l+"%'" endif;
    val qry = "SELECT id,first_name,last_name FROM contact WHERE "+where_clause+" LIMIT 15";
    println(qry);
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok s  => var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      while (get_next(it,&row)) do
                          yield  Some (let row r = row in  
                                  ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
                                   (get_text_val(get(r,2)))));
                      done
       
      | _ => yield  None[(string*string*string)];
    endmatch;
    return None[(string*string*string)];
  }

 gen get_sa_detail(id:string ) ():opt[string*string*string*string*string*string*string] = {
    val db = let Some d = db_pool.get_next() in d;
    match sqlite3_prepare_stmt(db,"""SELECT id, first_name, last_name, phone,
loc, bldg , room 
FROM contact WHERE id='"""+id+"'") with
      | qry_ok s  => var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      while (get_next(it,&row)) do
                          yield  Some (let row r = row in  
                                  ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
                                   (get_text_val(get(r,2))),(get_text_val(get(r,3))),
                                   (get_text_val(get(r,4))),(get_text_val(get(r,5))),
                                   (get_text_val(get(r,6)))));
                      done
       
      | _ => yield  None[(string*string*string*string*string*string*string)];
     endmatch;
     return None[(string*string*string*string*string*string*string)];
  }


}

