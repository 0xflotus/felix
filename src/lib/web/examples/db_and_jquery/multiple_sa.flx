class MultipleSA {
  open ServerConfig;
  open HTTPRequest;
  open HTTPConnection;
  open HTTPHandler;
  open HTTPResponse;
  open MultipleSAModel;
   fun app_handlers() =>
      (Cons (http_handler(view_sa_detail_route,view_sa_detail),
       Cons (http_handler(view_sa_route,view_sa), 
       Cons (http_handler(add_sa_route,add_sa),
       Cons (http_handler(search_sa_route,search_sa),
       Cons (http_handler(delete_sa_route,delete_sa),Empty[http_handler]))))));
//);
  
  fun view_sa_route(config:server_config,request:http_request) => 
    request.path == "/view_sa";

  proc view_sa(conn:http_connection, request:http_request) {
    var eof_flag = false;
    
    match  get_param(request,"ip") with
      | Some(ip) => {
                       var txt:string;
                       var rows = get_sas_for_ip(ip);
                       val row:string*string*string*string;
                       while (fun ():bool = { match rows() with 
                         |Some v => row = v;return true;
                         |_ => return false;
                         endmatch;}) () do
		             txt = "[\""+row.0+"\",\""+row.1+"\",\""+
                                        row.2+"\",\""+row.3+"\"],"+txt;
		       done
      		       write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
                       }
      | _ => {handle_not_found(conn,request);}
   endmatch;  
  }

  fun add_sa_route(config:server_config,request:http_request) => 
    request.path == "/add_sa";

  proc add_sa(conn:http_connection, request:http_request) {
    var eof_flag = false;
    
    match  get_param(request,"ip") with
      | Some(ip) => match get_param(request,"id") with
        | Some(id) =>{if set_sa_for_ip(ip,id) do
                         var txt:string;
                         var rows = get_sas_for_ip(ip);
                         val row:string*string*string*string;
                         while (fun ():bool = { match rows() with 
                           |Some v => row = v;return true;
                           |_ => return false;
                           endmatch;}) () do
                            txt = "[\""+row.0+"\",\""+row.1+"\",\""+
                                        row.2+"\",\""+row.3+"\"],"+txt;
                           
		       done 
                       write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
      		       //write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
                       else
                         handle_not_found(conn,request);
                       done
                       }
        | _ => {handle_not_found(conn,request);}
      endmatch
      | _ => {handle_not_found(conn,request);}
   endmatch;  
  }

  fun delete_sa_route(config:server_config,request:http_request) => 
    request.path == "/delete_sa";

  proc delete_sa(conn:http_connection, request:http_request) {
    var eof_flag = false;
    println("delete_sa");
    match  get_param(request,"ip") with
      | Some(ip) => match get_param(request,"id") with
        | Some(id) =>{if unset_sa_for_ip(ip,id) do
                         var txt:string;
                         var rows = get_sas_for_ip(ip);
                         val row:string*string*string*string;
                         while (fun ():bool = { match rows() with 
                           |Some v => row = v;return true;
                           |_ => return false;
                           endmatch;}) () do
		             txt = "[\""+row.0+"\",\""+row.1+"\",\""+
                                         row.2+"\",\""+row.3+"\"],"+txt;
		         done
      		         write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
//write_string(conn.sock,(make_html "["+txt+"]"),&eof_flag);
                       else
                         handle_not_found(conn,request);
                       done
                       }
        | _ => {handle_not_found(conn,request);}
      endmatch
      | _ => {handle_not_found(conn,request);}
   endmatch;  
  }

 fun search_sa_route(config:server_config,request:http_request) => 
    request.path == "/search_sa";

  proc search_sa(conn:http_connection, request:http_request) {
    var eof_flag = false;
    println("IN:search_sa");
    match  get_param(request,"term") with
      | Some(t) => {
                       var txt:string;
                       var rows = search_sas_for(t);
                       val row:string*string*string;
                       while (fun ():bool = { match rows() with 
                         |Some v => row = v;return true;
                         |_ => return false;
                         endmatch;}) () do
		             txt = txt+to_jquery_autocomplete(row.0,row.1,row.2)+",";
		       done 
      		       write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
                       }
//{write_string(conn.sock,(make_json "[ { \"id\": \"Erithacus rubecula\", \"label\": \"European Robin\", \"value\": \"European Robin\" }, { \"id\": \"Cercotrichas galactotes\", \"label\": \"Rufous-Tailed Scrub Robin\", \"value\": \"Rufous-Tailed Scrub Robin\" }, { \"id\": \"Irania gutturalis\", \"label\": \"White-throated Robin\", \"value\": \"White-throated Robin\" }, { \"id\": \"Turdus migratorius\", \"label\": \"American Robin\", \"value\": \"American Robin\" } ]"),&eof_flag);} 
      | _ => {handle_not_found(conn,request);}
   endmatch;  
  }


  fun view_sa_detail_route(config:server_config,request:http_request) => 
    request.path == "/view_sa_detail";

  proc view_sa_detail(conn:http_connection, request:http_request) {
    var eof_flag = false;
    
    match  get_param(request,"id") with
      | Some(id) => {
                       var txt:string;
                       var rows = get_sa_detail(id);
                       val row:string^7;
                       while (fun ():bool = { match rows() with 
                         |Some v => row = v;return true;
                         |_ => return false;
                         endmatch;}) () do
		             txt = "[\""+row.0+"\",\""+row.1+"\",\""+
                                         row.2+"\",\""+row.3+"\",\""+
                                         row.4+"\",\""+row.5+"\",\""+
                                         row.6+"\"],"+txt;
		       done
      		       write_string(conn.sock,(make_html "["+substring (txt, 0, (txt.len.int - 1))+"]"),&eof_flag);
                       }
      | _ => {handle_not_found(conn,request);}
   endmatch;  
  }



  fun to_jquery_autocomplete (id:string,first_name:string,last_name:string ):string =>
      "{ \"id\": \""+id+"\", \"label\": \""+first_name+" "+last_name+"\", \"value\": \""+first_name+" "+last_name+"\" }";
  /* json result format for jquery autocomplete:
  [ { "id": "Erithacus rubecula", "label": "European Robin", "value": "European Robin" }, { "id": "Cercotrichas galactotes", "label": "Rufous-Tailed Scrub Robin", "value": "Rufous-Tailed Scrub Robin" }, { "id": "Irania gutturalis", "label": "White-throated Robin", "value": "White-throated Robin" }, { "id": "Turdus migratorius", "label": "American Robin", "value": "American Robin" } ]
*/
}