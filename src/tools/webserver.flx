if PLAT_POSIX do
PosixSignal::ignore_signal(PosixSignal::SIGPIPE);
done

open Socket;
open Stream;

open TerminalIByteStream[fd_t];
open TerminalIOByteStream[socket_t];

// this is a hack to make close work on a listener
// RF got this right the first time:
// in the abstract a listener is NOT a socket
// In fact, it is a socket server, with accept() a way to
// read new sockets off it ..
open TerminalIByteStream[socket_t];

include "web/http_response";
open HTTPResponse;
include "web/mime_type";

include "./css4html";
include "plugins/plugin_common";
include "plugins/fdoc-interface";

proc dbg(x:string) { fprint (cerr,x); };

requires header '#include <stdlib.h>';
fun strtod: string -> double = "strtod($1.data(),0)";
fun atoi: string -> int = "atoi($1.data())";

// command line argument processing

// -------------------------------------------------------------------------
// Setup the fixed defaults.
var arg = "";
var argno = 1;
var INSTALL_ROOT = #Config::config.FLX_INSTALL_DIR;
 
var DELAY = 0.1;
var PORT=1234;

var FLX_PATH=Empty[string];
var FDOC_PATH=Empty[string];

var C_PATH=list(
  "/usr/local/include",
  "/usr/include"
);

var FLX_PKGCONFIG_PATH=Empty[string];

var FLX_WEBSERVER_PLUGIN_PATH = Empty[string];
var PLUGIN_MAP = Empty[string^3];

// -------------------------------------------------------------------------
// Set the hard coded default config.
// This sucks totally, its just a hack based on my
// local requirements. And even that screws up by
// confusing multiple gcc installs and clang installs.

var default_config = list (
  "C_PATH += /usr/include/c++/4.2.1", 
  "C_PATH += /usr/include/c++/4.2.1/x86_64-apple-darwin10", 

  "C_PATH += /usr/include/c++/4.6", 
  "C_PATH += /usr/include/c++/4.6.3", 
  "C_PATH += /usr/lib/gcc/x86_64-linux-gnu/4.6.3/include",
   ""
);

// -------------------------------------------------------------------------
// Now find the users HOME directory.
// Try to get the config string from there.
var HOME: string = Env::getenv "HOME";
println$ "Home=" + HOME;
var FLX_HOME : string= Filename::join (HOME, ".felix");
println$ "FlxHome=" + FLX_HOME;
var FLX_CONFIG : string= Filename::join (FLX_HOME,"webserver.config");
println$ "Flxconfig=" + FLX_CONFIG;
var config_data = load(FLX_CONFIG);
println$ "loaded webserver config data = " + config_data;
var config_lines = split(config_data, "\n");


// -------------------------------------------------------------------------
// If we couldn't get the webserver config string
// from the HOME directory, use the fixed default.
if len config_data == 0.size do
  println "Using default config";
  config_lines = default_config;
done

// -------------------------------------------------------------------------
// Parse the config string.
config_lines = map (strip of (string)) config_lines; 
var pathext = RE2("(.*)\\+=(.*)");
var varset = RE2("(.*)=(.*)");

var result = varray[StringPiece] (4.size,StringPiece(""));
for line in config_lines do
  var match_result = Match(pathext, StringPiece(line),0,ANCHOR_BOTH, result.stl_begin,3);
  if match_result do
    var lhs = result.1.str.strip;
    var rhs = result.2.str.strip;
    match lhs with
    | "C_PATH" => C_PATH += rhs;
    | "FLX_PATH" => FLX_PATH += rhs; 
    | "FLX_PKGCONFIG_PATH" => FLX_PKGCONFIG_PATH += rhs;
    | "FLX_WEBSERVER_PLUGIN_PATH" => FLX_WEBSERVER_PLUGIN_PATH += rhs;
    | "FDOC_PATH" => FDOC_PATH += rhs;
    | _ => println$ "Unknown variable '" + lhs +"'";
    endmatch;
  else
  match_result = Match(varset, StringPiece(line),0,ANCHOR_BOTH, result.stl_begin,3);
  if match_result do
    lhs = result.1.str.strip;
    rhs = result.2.str.strip;
    match lhs with
    | "PORT" => PORT = atoi rhs;
    | "INSTALL_ROOT" => INSTALL_ROOT = rhs;
    | _ => println$ "Unknown variable '" + lhs +"'";
    endmatch;
  done done
done

// -------------------------------------------------------------------------
// Process command line options.
// These can reset the INSTALL_ROOT
// or augment the C_PATH.
while argno<System::argc do
  arg = System::argv argno;
  println$ "ARG=" + arg;
  if prefix(arg,"--root=") do
    INSTALL_ROOT=arg.[7 to];
  elif prefix(arg,"--close-delay=") do
    DELAY=strtod arg.[14 to];
  elif prefix(arg,"--port=") do
    PORT=atoi arg.[7 to];
  elif prefix(arg,"--cpath=") do
    C_PATH+=arg.[8 to];
  elif prefix(arg,"--plugin-path=") do
    FLX_WEBSERVER_PLUGIN_PATH+=arg.[14 to];
  done
  ++argno;
done

// -------------------------------------------------------------------------
// Now, use the INSTALL_ROOT to augment
// the search paths.
C_PATH+= INSTALL_ROOT+"/lib/rtl";
C_PATH+= INSTALL_ROOT+"/config/target";
FLX_PATH+=INSTALL_ROOT+"/lib";
FDOC_PATH+=INSTALL_ROOT+"/doc";
FLX_PKGCONFIG_PATH+=INSTALL_ROOT+"/config";
FLX_WEBSERVER_PLUGIN_PATH+=INSTALL_ROOT+"/tools";

// -------------------------------------------------------------------------
// Print the configuation.
println$ "INSTALL_ROOT="+INSTALL_ROOT;
println$ "FLX_PATH="+str FLX_PATH;
println$ "C_PATH="+str C_PATH;
println$ "FLX_PKGCONFIG_PATH="+str FLX_PKGCONFIG_PATH;
println$ "FLX_WEBSERVER_PLUGIN_PATH="+str FLX_WEBSERVER_PLUGIN_PATH;
println$ "FDOC_PATH="+str FDOC_PATH;
println$ "DELAY="+str DELAY;
println$ "PORT="+str PORT;


// -------------------------------------------------------------------------
// Build consolidated configuration string
// for plugins.

val newline="\n";

var config = "INSTALL_ROOT = " + INSTALL_ROOT + newline;
for d in FLX_PATH do
  config += "FLX_PATH += " + d + newline;
done

for d in C_PATH do
  config += "C_PATH += " + d + newline;
done

for d in FDOC_PATH do
  config += "FDOC_PATH += " + d + newline;
done

for d in FLX_PKGCONFIG_PATH do
  config += "FLX_PKGCONFIG_PATH += " + d + newline;
done

for d in FLX_WEBSERVER_PLUGIN_PATH do
  config += "FLX_WEBSERVER_PLUGIN_PATH += " + d + newline;
done

print$ "CONSOLIDATED CONFIG:\n" + config;

// -------------------------------------------------------------------------
// Now load the plugins.

var  xlat_felix = Dynlink::load-plugin-func2 [bool * string, string, string] (
    dll-name="flx2html", setup-str=config, entry-point="xlat_felix"
  );

var  xlat_fdoc = Dynlink::load-plugin-func2 [fdoc_t, string, string] (
    dll-name="fdoc2html", setup-str=config, entry-point="xlat_fdoc"
  );

var  xlat_fpc = Dynlink::load-plugin-func2 [bool * string, string, string] (
    dll-name="fpc2html", setup-str=config, entry-point="xlat_fpc"
  );

var  xlat_py = Dynlink::load-plugin-func2 [bool * string, string, string] (
    dll-name="py2html", setup-str=config, entry-point="xlat_py"
  );

var  xlat_ocaml = Dynlink::load-plugin-func2 [bool * string, string, string] (
    dll-name="ocaml2html", setup-str=config, entry-point="xlat_ocaml"
  );

var  xlat_cpp = Dynlink::load-plugin-func2 [bool * string, string, string] (
    dll-name="cpp2html", setup-str=config, entry-point="xlat_cpp"
  );


fun getline_to_url (get:string) =>
  if not startswith get "GET " then
    ""
  else
    match find (get, ' ', 4) with
    | None => ""
    | Some ?pos => get.[4 to pos]
    endmatch
  endif
;

// strip off the leading http:// then split on the next /
fun split_url (inurl:string) = {
  val url =
    if startswith inurl "http://" then
      inurl.[to 7]
    else
      inurl
    endif
  ;

  return
    match find (url, '/') with
    | None => None[string*string]
    | Some ?pos => Some$ url.[0 to pos], url.[pos + 1 to]
    endmatch
  ;
}

// parse balance of HTTP GET request (after gthe GET keyword)
fun parse_get_line (get:string) =>
  split_url$ getline_to_url get
;

// fixup text by replacing < > and & characters
fun txt2html (x:string) =
{
  var out2 = "";
  for var i in 0 upto x.len.int - 1 do
    var ch = x.[i];
    if ch == char "<" do out2+="&lt;";
    elif ch == char ">" do out2+="&gt;";
    elif ch == char "&" do out2+="&amp;";
    else out2+=ch;
    done
  done

  return out2;
}

// put into <head> of document
// http://www.mathjax.org/docs/1.1/start.html#mathjax-cdn
mathjax := '''
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
        skipTags: ["script","noscript","style","textarea"]
    }
  });
</script> 
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
''';


// functions to make responses
fun make_image_from_suffix (suffix:string, contents:string) =>
  make_image(MIMEType::mime_type_from_extension suffix,contents)
;

proc serve_not_found (k:socket_t, fname:string) {
   var eof_flag = false;
   val data = make_not_found(fname);
   write_string(k,data,&eof_flag);
}

proc serve_forbidden (k:socket_t, fname:string) {
   var eof_flag = false;
   val data = make_forbidden(fname);
   write_string(k,data,&eof_flag);
}


proc serve_felix (k:socket_t, fname:string) {
  var eof_flag = false;

  match get_file(fname,INSTALL_ROOT,FLX_PATH) with
  | Some ?path =>
    {
      val text = load path;
      println$ "Loaded felix file " + fname+", len="+str (text.len.int);
      val dirname = Filename::dirname path;
      def val needs_mathjax, val html = xlat_felix(text,dirname);
      val data = make_html$
        "<html><head>"+Css4Html::flx_head+
         if needs_mathjax then mathjax else "" endif +
        "</head><body><pre>"+ html +
        "</pre></body></html>\n\r",
        list[string*string](("Cache-control","max-age=86400"))
      ;
      write_string(k,data,&eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;

}

proc serve_fpc (k:socket_t, fname:string) {
  var eof_flag = false;

  match get_file (fname, INSTALL_ROOT,FLX_PKGCONFIG_PATH) with
  | Some ?path =>
    {
      val text=load path;
      println$ "Loaded fpc file " + fname+", len="+str (text.len.int);
      val dirname = Filename::dirname path;
      val data = make_html$
        "<html><head>"+Css4Html::flx_head+"</head><body><pre>"+
        (xlat_fpc (text, dirname)).1
        +"</pre></body></html>\n\r",
        list[string*string]("Cache-control","max-age=86400")
      ;
      write_string(k,data,&eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;

}

fun get_py (fname:string) = {
  var flx =
    match get_file(fname,INSTALL_ROOT,FLX_PATH) with
    | Some ?name => load(name)
    | None => f"NO FILE %S FOUND IN %S" (fname, str FLX_PATH)
    endmatch;

  println$ f"Loaded Python file %S, len=%d" (fname, flx.len.int);
  return flx;
}

proc serve_py (k:socket_t, fname:string) {
  var eof_flag = false;
  var flx = get_py fname;
  val data = make_html$
    "<html><head>"+Css4Html::flx_head+"</head><body><pre>"+ 
    (xlat_py (flx,"")).1 +"</pre></body></html>\n\r",
     list[string*string](("Cache-control","max-age=86400"))
  ;
  write_string (k, data, &eof_flag);
}

fun get_ocaml (fname:string) = {
  var flx =
    match get_file (fname, INSTALL_ROOT,FLX_PATH) with
    | Some ?name => load name
    | None => f"NO FILE %S FOUND IN %S" (fname, str FLX_PATH)
    endmatch
  ;

  println$ f"Loaded Ocaml file %S, len=%d" (fname, flx.len.int);
  return flx;
}

proc serve_ocaml (k:socket_t, fname:string) {
  var eof_flag = false;
  var flx = get_ocaml fname;
  println$ f"Loaded Ocaml file %S, len=%d" (fname, flx.len.int);
  val data = make_html$
    "<html><head>"+ Css4Html::flx_head +"</head><body><pre>"+
    (xlat_ocaml (flx,"")).1
    +"</pre></body></html>\n\r",
    list[string*string](("Cache-control","max-age=86400"))
  ;
  write_string (k, data, &eof_flag);
}

proc serve_cpp (k:socket_t, fname:string) {
  var eof_flag = false;
  var text: string;

  match get_file(fname,INSTALL_ROOT,C_PATH) with
  | Some ?path =>
    {
      val text=load path;
  println$ f"Loaded C++ file %S, len=%d" (fname, text.len.int);
      val dirname = Filename::dirname path;
      val data = make_html$
        "<html><head>"+ Css4Html::flx_head +"</head><body><pre>"+
        (xlat_cpp (text, dirname)).1
        +"</pre></body></html>\n\r",
        list[string*string](("Cache-control","max-age=86400"))
      ;
      write_string (k, data, &eof_flag);
    }
  | None =>
    {
      serve_not_found (k,fname);
    }
  endmatch;
}

val text_suffices = (
  "txt","py","ml","mli",
  "tex","pl","dyp",
  "why","resh","pak","ipk",
  "dep","stdout","expect"
);

proc serve_text (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = load(fname);
  println$ f"Loaded text file %S, len=%d" (fname, txt.len.int);
  val data = make_html$
    "<html><head></head><body><pre>"+
    txt
    +"</pre></body></html>\n\r",
    list[string*string](("Cache-control","max-age=86400"))
  ;
  write_string (k, data, &eof_flag);
}

proc serve_html (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = load fname;
  println$ f"Loaded html file %S, len=%d" (fname, txt.len.int);
  val data = make_html$ txt,
    list[string*string](("Cache-control","max-age=86400"))
  ;

  write_string (k, data, &eof_flag);
}

proc serve_xhtml (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = load fname;
  println$ f"Loaded xhtml file %S, len=%d" (fname, txt.len.int);
  val data = make_xhtml$ txt,
    list[string*string](("Cache-control","max-age=86400"))
  ;

  write_string (k, data, &eof_flag);
}


fun get_fdoc (fname:string):string = {
  var flx =
    match get_file(fname,INSTALL_ROOT,FDOC_PATH) with
    | Some ?name => load(name)
    | None => f"NO FILE %S FOUND IN %S" (fname, str FDOC_PATH)
    endmatch
  ;

  println$ f"Loaded fdoc file %S, len=%d" (fname, flx.len.int);
  return flx;
}

proc serve_fdoc (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = get_fdoc(fname);
  //println$ "Contents=" + flx;
  var result = xlat_fdoc (txt, fname);
  var needs_mathjax = #(result.mathjax_required);
  var html = #(result.html_page);
  val data = make_html(
    "<html><head>"+Css4Html::flx_head+
    if needs_mathjax then mathjax else "" endif +
    "</head><body>"+
    html+
    "</body></html>\n\r",
    list[string*string](("Cache-control","max-age=86400"))
  );
  write_string(k,data,&eof_flag);
}

proc serve_xfdoc (k:socket_t, fname:string) {
  var eof_flag = false;
  var txt = get_fdoc(fname);
println$ "Serve fdoc "+fname+" as xhtml";
  //println$ "Contents=" + flx;
  var result = xlat_fdoc (txt, fname);
  var needs_mathjax = #(result.mathjax_required);
  var html = #(result.html_page);
  val data = make_html(
    "<head>"+Css4Html::flx_head+
    if needs_mathjax then mathjax else "" endif +
    "</head>"+
    "<body>"+ html
    "</body></html>\n\r",
    list[string*string](("Cache-control","max-age=86400"))
  );
  write_string(k,data,&eof_flag);
}


proc serve_raw (k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = load fname;
  println$ f"Loaded raw file %S, len=%d" (fname, txt.len.int);
  var mime = MIMEType::mime_type_from_file fname;
  println$ "File " + fname + " taken to be " + str mime;
  //println$ "Contents=" + flx;
  val data = make_mime (mime,txt);
  //val data = make_raw txt;
  write_string (k, data, &eof_flag);
}

proc serve_image (k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = load fname;
  println$ f"Loaded image file %S, len=%d" (fname, txt.len.int);
  //println$ "Contents=" + flx;
  val data = make_image_from_suffix (suffix,txt);
  write_string (k, data, &eof_flag);
}

proc serve_css(k:socket_t, fname:string, suffix:string) {
  var eof_flag = false;
  var txt = load fname;
  println$ f"Loaded css file %S, len=%d" (fname, txt.len.int);
  //println$ "Contents=" + flx;
  val data = make_css txt;
  write_string(k,data,&eof_flag);
}

fun mk_dir_lines (fname:string, dirs: list[string]) = {
  fun rf(f:string)=>'  <a href="/$'+ fname + '/' +f+'">'+f+'</a>';
  return 
    fold_left (fun (acc: string) (f:string) => 
      match f with 
      | "." => acc 
      | ".." => acc
      | _ => acc + rf f + "\r\n" 
      endmatch
    ) 
    "" 
    dirs
  ;
}

  
fun mk_reg_lines (fname:string, files: list[string]) = {
  var eof = false;
  var s = "";
  var old_base = "";
  var base = "";
  var extn = "";
  var entry = "";
  var exts = Empty[string];
  var rest = files;

  proc hd() { chd; }
  proc chd() { exts=list(extn); old_base=base; }
  proc cft() {
    //println$ "Cft for key " + old_base + " exts=" + str exts;
    fun rf(x:string)=>
      '  <a href="/$'+ fname + '/' +old_base+x+'">'+
      if x == "" then "(none)" else x endif +
      '</a>'
    ;
    def var extn, var rest = match exts with | Cons(?h,?t)=> h,t endmatch;
    s+= '  <a href="/$'+ fname + '/' +old_base+extn +'">'+old_base+extn+'</a>';
    List::iter (proc (x:string){ s+=" "+rf x; }) rest;
  }
  proc ft() { cft; s+="\r\n"; }
  proc twixt() { s+="\r\n"; }
  proc cbrk () { cft; twixt; chd; }
  proc nxt() { 
    match rest with 
    | Cons(?h,?t) => 
      entry = h; rest = t;
      base,extn =
        match rfind (entry, ".") with
        | None => entry, "" 
        | Some ?pos => entry.[to pos], entry.[pos to]
        endmatch
      ;
    | Empty => eof = true;   
    endmatch;
  }

  //special case for empty list
  if len files == 0uz do return ""; done

  nxt;                    //prime the system
  hd;                     // head off

again:>
  nxt;
  if eof goto fin;        //check for eof
  if base == old_base do  //check for control break
    exts += extn;         // nope, same key
  else 
    cbrk;                 // key changed
  done
  goto again;
fin:>
  ft;                     // foot off
  return s;
}

proc serve_directory (k:socket_t, fname:string) {
  var dirname = Filename::basename fname;
  var eof_flag = false;
  val top = "A DIRECTORY " + fname + "\r\n";
  val flist = 
    match Directory::filesin fname with
    | Some ?files =>
      let ?aux = 
          fun (ls2:list[string] * list[string]) (f:string) =>
          match ls2 with | ?ds,?rs => match FileStat::filetype (Filename::join (fname,f)) with
            | DIRECTORY => Cons (f,ds), rs
            | REGULAR => ds, Cons (f,rs)
            | _ => ls2
            endmatch
          endmatch
      in
      let ?dirs,?regs = fold_left aux (Empty[string], Empty[string]) files in
      let ?dirs,?regs = sort dirs, sort regs in
      let ?dir_lines = mk_dir_lines (fname,dirs) in
      let ?reg_lines = mk_reg_lines (fname,regs) in
        "<pre>"+ 
        '  <a href="/"><em>home</em></a>\r\n'+
        if dir_lines.len != 0uz then ' Directories: \r\n' + dir_lines else "" endif +
        if reg_lines.len != 0uz then ' Files: \r\n' + reg_lines else "" endif +
        "</pre>"
    | None => "ERROR ACCESSING DIRECTORY"
    endmatch
  ;
  val page = make_html(top + flist,
    list[string*string](("Cache-control","max-age=86400"))
  );
  write_string(k,page,&eof_flag);
}


proc serve_file(s: socket_t, infname: string)
{
  var eof_flag = false;
  // if empty string, serve index.html
  // not quite right - needs to handle directories too, so
  // not only foo.com/ -> index.html, but foo.com/images/ -> images/index.html
  var fname = if "" == infname then "index.html" else infname endif;

  fname = if fname.[0] == char "$" then fname.[1 to] else fname endif;

  // set mime type depending on extension...
  // serve a "not found page" for that case (check for recursion)
  //print "serve file: "; print fname; endl;

  // figure out the filetype
  // we first check if the filename has a suffix like ?cpp
  // which is a trick done by us to force the filetype
  // to be "c++" for C++ standard include file names 
  // which have no suffix. If we find that, we strip it
  // out of the filename too. Otherwise we just find
  // the suffix.

  var suffix = "";
  match rfind (fname, "?") with
  | Some ?pos => { suffix = fname.[pos + 1 to]; fname=fname.[0 to pos]; }
  | None =>
    {
      match rfind (fname, ".") with
      | None => {}
      | Some ?pos => { suffix = fname.[pos + 1 to]; }
      endmatch; 
    }
  endmatch;

  //print "suffix is "; print suffix; endl;

  if suffix \in list ("flx","flxh") do 
    serve_felix(s, fname);
  elif suffix \in list ("py") do 
    serve_py(s, fname);
  elif suffix \in list ("ml","mli") do 
    serve_ocaml(s, fname);
  elif suffix \in list("cpp","hpp","h","c","cc","i","cxx","rtti","includes","ctors_cpp") do 
    serve_cpp(s, fname);
  elif suffix == "fpc" do 
    serve_fpc(s, fname);
  elif suffix == "fdoc" do 
    serve_xfdoc(s, fname);
  elif suffix \in ("html","htm") do
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_html(s,fname);
  elif suffix == "xhtml" do
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_xhtml(s,fname);
  elif suffix \in text_suffices do
    serve_text(s,fname);
  elif suffix \in ("gif","png","jpg","svg") do
    // path lookup for images
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_image(s,fname,suffix);
  elif suffix == "css" do
    // path lookup for css files
    fname = if fname.[0] == char "/" then fname else INSTALL_ROOT+"/"+fname endif;
    serve_css(s,fname,suffix);
  else
    match get_file(fname, INSTALL_ROOT,Empty[string]) with
    | None => { serve_not_found(s,fname); }
    | Some ?f =>
      {
        if prefix(fname,"/etc") do serve_forbidden(s,fname);
        else
        match FileStat::filetype f with
        | REGULAR => { serve_raw(s,f,suffix); }
        | DIRECTORY => { serve_directory (s,f); }
        | _ => { serve_not_found(s,f); }
        endmatch;
        done
      }
    endmatch;
  done
}
val webby_port = PORT;

print "FLX WEB!!! listening on port "; print webby_port; endl;

// up the queue len for stress testing
var p = webby_port;
var listener: socket_t;
mk_listener(&listener, &p, 10);

var clock = Faio::mk_alarm_clock();

// noinline is necessary to stop the closure being
// inlined into the loop, preventing the socket variable k
// being duplicated as it must be [a bug in Felix]
noinline proc handler (var k:socket_t) ()
{
   dbg$ "Spawned fthread running for socket "+str k+"\n";
  // should spawn fthread here to allow for more io overlap

  var line: string;
  get_line(k, &line);  // should be the GET line.
  //cat(s, DEVNULL);

  print$ "got line from socket "+str k+": "; print line; endl;

  // now I need to parse the GET line, get a file name out of its url
  // (e.g. unqualfied -> index.html and name/flx.jpg -> flx.jpg
  match parse_get_line line with
  | None => {
      print "BAD get line: "; print line; endl;
    }
  | Some (?base, ?file) => {
      print "well formed get...\n";
      print "base="; print base; endl;
      print "file="; print file; endl;

      serve_file(k,file);
    }
  endmatch;

  // we've only read the GET line, so let's flush out the rest of
  // the http request so we don't get connection reset errors when
  // we close the socket. shutting down stops cat blocking (?)
  //Faio_posix::shutdown(s, 1); // disallow further sends.
  //cat(s, DEVNULL);

  fprint$ cerr,"fthread socket "+str k+" close delay ..\n";
  Faio::sleep(clock,DELAY); // give OS time to empty its buffers
  fprint$ cerr,"fthread socket "+str k+" shutdown now\n";

// try this:
// Advised by: koettermarkus@gmx.de, MANY THANKS!

  gen hack_recv: socket_t * &char * int * int -> int = "recv($1,$2,$3,$4)";

  var buf:char ^1025;
  var counter = 0;
  var extra = 0;
  shutdown(k,1); // shutdown read
retry:>
  var b = hack_recv(k,C_hack::cast[&char] (&buf),1024,0);
  //println$ "Error code " + str b + " from read after shutdown";
  if b > 0 do
    extra += b;
    if extra > 2000 do
      println$ "Read too many extraneous bytes from OS buffer";
      goto force_close;
     done;
   goto retry;
  elif b == -1 do
    ++counter;
    if counter > 200 do
      println "Timeout waiting for write buffers to be flushed";
      goto force_close;
    done;
    Faio::sleep(clock,0.1); // 100 ms
    goto retry;
  done;
  assert b==0;

force_close:> 
  Socket::shutdown(k,2);
  ioclose(k);
  fprint$ cerr,"fthread "+str k+" terminating!\n";
};

forever {
  var s: socket_t;
  dbg$ "Waiting for connection\n";
  accept(listener, &s);  // blocking
  dbg$ "got connection "+str s + "\n";  // error check here

  // hmm - spawning an fthread is blocking the web server. don't know why
  print$ "spawning fthread to handle connection "+str s+"\n";
  var h = handler s;
  spawn_fthread  h;
 //collect(); // this hangs everything, no idea why!
};

println "WEB SERVER FINNISHED?";
iclose (listener);
