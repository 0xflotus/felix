
// split up an fdoc into a stream of commands and text 
union fdoc-data_t = 
  | Cmd of string
  | Text of string
;

gen fdoc-scan (var inp:string) () : opt[fdoc-data_t] = {
  var lines = split (inp,"\n");
  var out = "";
  String::reserve (&out,inp.len);
  for line in lines do
    if line.[0]=='@' do
      if out !="" do
         yield Some (Text out);
         out = "";
      done
      yield Some (Cmd line.[1 to]);
    else
      out+=line;
      out+="\n";
    done
  done;
  if out != "" do
    yield Some (Text out);
  done
  return None[fdoc-data_t];
}

// split up doc text into a stream of paragraphs
gen psplit (var inp:string) () : opt[string] = {
  var lines = split(inp,"\n");
  var out = "";
  String::reserve (&out,inp.len);
  for line in lines do
    // accumulate non-blank lines
    if line != "" do
      out += line;
      out += "\n";

    else // emit accumulated lines
      if out != "" do
        yield Some out;
        out = "";
      done
    done
  done
  if out != "" do
    yield Some out;
    out = ""; // no semantics but release memory
  done
  return None[string];
}
