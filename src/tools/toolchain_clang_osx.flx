include "std/felix/toolchain_interface";
include "std/felix/toolchain_clang_config";
include "std/felix/flx_cxx";

fun setup(config_data:string) = {
  eprintln$ "Setup toolchain " + config_data;
  return 0;
}

object toolchain_clang_osx (config:clang_config_t) implements toolchain_t = 
{
  var cxx_compile_warning_flags = list$ 
    "-Wall",
    "-Wfatal-errors",
    "-Wno-invalid-offsetof",
    "-Wno-logical-op-parentheses",
    "-Wno-bitwise-op-parentheses",
    "-Wno-parentheses-equality",
    "-Wno-parentheses",
    "-Wno-return-stack-address",
    "-Wno-tautological-compare",
    "-Wno-return-type-c-linkage",
    "-Wno-unused-variable",
    "-Wno-unused-function",
    "-Wno-c++11-narrowing",
    "-Wno-missing-braces"
  ;
  var c_compile_warning_flags = list$ "-Wall", "-Wfatal-errors";

  method fun whatami () => "toolchain_clang_osx";
  method fun host_os () => "OSX";
  method fun target_os () => "OSX";
  method fun cxx_compiler_vendor () => "clang";

  method fun executable_extension () => "";
  method fun static_object_extension () => ".o";
  method fun dynamic_object_extension () => ".os";
  method fun static_library_extension () => ".a";
  method fun dynamic_library_extension () => ".dylib";


  method gen c_static_object_compiler (spec:(dst:string, src:string)) : int = 
  {
    var result = 
      CxxCompiler::generic_cxx_compile_for_static
      (
        CCOBJ_STATIC_LIB = "clang", 
        CCFLAGS = "-c" ! "-O1" ! "-fno-common"! "-fno-strict-aliasing" ! c_compile_warning_flags,
        INCLUDE_DIRS = config.header_search_dirs,
        MACROS = config.macros,
        SPEC_OBJ_FILENAME = "-o ",
        debugln = config.debugln
      ) 
      (spec.src, spec.dst)
    ;
    return result;
  }

  method gen c_dynamic_object_compiler (spec:(dst:string, src:string)) : int = 
  {
    var result = 
      CxxCompiler::generic_cxx_compile_for_dynamic 
      (
        CCOBJ_DLLIB = "clang", 
        CCFLAGS = "-fPIC" ! "-O1" !  "-c"! "-fno-common"! "-fno-strict-aliasing" +c_compile_warning_flags,
        INCLUDE_DIRS = config.header_search_dirs,
        MACROS = config.macros,
        SPEC_OBJ_FILENAME = "-o ",
        debugln = config.debugln
      ) 
      (spec.src, spec.dst)
    ;
    return result;
  }


  method gen cxx_static_object_compiler (spec:(dst:string, src:string)) : int = 
  {
    var result = 
      CxxCompiler::generic_cxx_compile_for_static
      (
        CCOBJ_STATIC_LIB = "clang++", 
        CCFLAGS = "-c" ! "-O1" ! "-fno-common"! "-fno-strict-aliasing" ! "-std=c++11" +cxx_compile_warning_flags,
        INCLUDE_DIRS = config.header_search_dirs,
        MACROS = config.macros,
        SPEC_OBJ_FILENAME = "-o ",
        debugln = config.debugln
      ) 
      (spec.src, spec.dst)
    ;
    return result;
  }

  method gen cxx_dynamic_object_compiler (spec:(dst:string, src:string)) : int = 
  {
    var result = 
      CxxCompiler::generic_cxx_compile_for_dynamic 
      (
        CCOBJ_DLLIB = "clang++", 
        CCFLAGS = "-fPIC" ! "-O1" !  "-c"! "-fno-common"! "-fno-strict-aliasing" ! "-std=c++11" +cxx_compile_warning_flags,
        INCLUDE_DIRS = config.header_search_dirs,
        MACROS = config.macros,
        SPEC_OBJ_FILENAME = "-o ",
        debugln = config.debugln
      ) 
      (spec.src, spec.dst)
    ;
    return result;
  }

  method gen static_library_linker (spec:(dst:string, srcs:list[string])): int =
  {
    var result =
      CxxCompiler::generic_static_library
      (
        CCLINK_STATIC_LIB = "ar", 
        CCFLAGS = list[string]("-rcs"),
        SPEC_LIB_FILENAME = "",
        debugln = config.debugln
      )  
      (spec.srcs, spec.dst)
    ;
    return result;
  } 

  method gen executable_linker  (spec:(dst:string, srcs:list[string])) : int = 
  {
    var result =
      CxxCompiler::generic_link_static
      (
        CCLINK_STATIC = "clang++",
        CCFLAGS = Empty[string],
        SPEC_EXE_FILENAME = "-o ",
        LINK_STRINGS = config.library_search_dirs + config.static_libraries,
        debugln = config.debugln
      )  
      (spec.srcs, spec.dst)
    ;
    return result;
  }

  method gen dynamic_library_linker (spec:(dst:string,srcs:list[string])) : int = 
  {
    var result = 
      CxxCompiler::generic_link_dynamic 
      (
        CCLINK_DLLIB = "clang++",
        CCFLAGS = list[string] ("-dynamiclib"),
        EXT_SHARED_OBJ = ".dylib",
        SPEC_EXE_FILENAME = "-o ",
        LINK_STRINGS = config.library_search_dirs + config.dynamic_libraries, 
        debugln = config.debugln
      )
      (spec.srcs, spec.dst)
    ;
    return result;
  }
}
export fun setup of (string) as "setup";
export fun toolchain_clang_osx of (clang_config_t) as "toolchain_clang_osx";


