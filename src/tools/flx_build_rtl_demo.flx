include "std/felix/toolchain_clang_config";
include "std/felix/toolchain_interface";
include "std/felix/flx_cp";
include "std/felix/flx_pkgconfig";

proc dbug (x:string) {
 if debug do println x; done
}

proc make_lib 
(
  db: FlxPkgConfig::FlxPkgConfigQuery_t,  
  toolchain-maker: clang_config_t -> toolchain_t, 
  repo: string, build:string, pkg:string, tmpdir:string
)
{
  var FLX_INSTALL_DIR = #(Config::config).FLX_INSTALL_DIR;
  println$ "------------";
  println$ "Make lib " + pkg;
  println$ "------------";
  var configdir = Filename::join (FLX_INSTALL_DIR, "config", "target");
  var srcdir = db.getpkgfielddflt (pkg,"srcdir");
  var srcpath = Filename::join (repo, srcdir);
  var build_includes= db.getpkgfield (pkg,"build_includes");
  var ddeps = db.getpkgfield (pkg,"requires_dlibs"); // external libs
  var deps = db.getpkgfield(pkg,"Requires");
  var result,depdlibs =  db.query("--field=provides_dlib"+deps); // packaged dlibs
//println$ "Debug DEPLIBS: " + str ddeps + " AND " + str depdlibs;
  var macros = db.getpkgfield(pkg,"macros");
  var ccflags = db.getpkgfield(pkg,"cflags");
  fun mkinc (x:string) => "-I"+x;
  var config = 
    (
      header_search_dirs= list[string] (mkinc build, mkinc configdir)+map mkinc build_includes,
      macros= map (fun (x:string)=> "-D"+x) macros,
      cflags = ccflags,
      library_search_dirs= list[string] ("-L"+build),
      dynamic_libraries= ddeps+depdlibs,
      static_libraries= Empty[string],
      debugln = dbug
    )
  ;
  var toolchain = toolchain-maker config;
  println$ #(toolchain.whatami);
  var headers = db.getpkgfielddflt(pkg,"headers");
  if headers == "" do headers = r".*\.h(pp)?"; println$ "copying all header files"; done
  var hsrc, hdst = "","";
  match split (headers, ">") with
  | #Empty => ;
  | Cons (?h,#Empty) => hsrc = h;
  | Cons (?h,Cons (?d,#Empty)) => hsrc = h; hdst = d;
  | _ => println$ "Header file too many > characters " + headers;
  endmatch;

  if hdst == "" do hdst = "${0}"; done
  println$ "Copying headers " + hsrc + " > " + hdst;
  CopyFiles::copyfiles (srcpath, RE2 hsrc,Filename::join(build,hdst),true, true);

  var pats = db.getpkgfield(pkg,"src");
  var pat = catmap '|' (fun (x:string)=>"("+x+")") pats;
//println$ "Finding Sources in "+srcpath;
  var files = FileSystem::regfilesin (srcpath,pat);
//println$ "Sources = " + str files;
  {
    fun objname (file:string) => let 
        ?dstobj = file.Filename::strip_extension + #(toolchain.dynamic_object_extension) in
        Filename::join (tmpdir, dstobj)
    ;

    for file in files do
      println$ "Compiling [dynamic] " + file " -> " + objname file;
      var srcfile = Filename::join (srcpath, file);
      var dst = objname file;
      Directory::mkdirs (Filename::dirname dst);
      match Filename::get_extension srcfile with
      | ?x when x == ".cc" or x == ".cpp" =>
        result = toolchain.cxx_dynamic_object_compiler (src=srcfile, dst=dst);
      | ".c" =>
        result = toolchain.c_dynamic_object_compiler (src=srcfile, dst=dst);
      | ?x => println$ "Unknown extension " + x; System::exit(1);
      endmatch
      ;
      if result != 0 do
        println$ "Compiler result " + str result;
        System::exit(1);
      done
    done

    var objs = map objname files;
    var libname = "lib" + (db.getpkgfield1(pkg,"provides_dlib")).[2 to] +#(toolchain.dynamic_library_extension);
    var dstlib = Filename::join (build, libname);
    println$ "Dynamic Linking library " + dstlib;
    result = toolchain.dynamic_library_linker(srcs=objs, dst=dstlib);
    if result != 0 do
      println$ "Linker result " + str result;
      System::exit(1);
    done
  };
  {
    fun objname (file:string) => let 
        ?dstobj = file.Filename::strip_extension + #(toolchain.static_object_extension) in
        Filename::join (tmpdir, dstobj)
    ;

    for file in files do
      println$ "Compiling [static] " + file " -> " + objname file;
      var srcfile = Filename::join (srcpath, file);
      var dst = objname file;
      Directory::mkdirs (Filename::dirname dst);
      match Filename::get_extension srcfile with
      | ?x when x == ".cc" or x == ".cpp" =>
        result = toolchain.cxx_static_object_compiler (src=srcfile, dst=dst);
      | ".c" =>
        result = toolchain.c_static_object_compiler (src=srcfile, dst=dst);
      | ?x => println$ "Unknown extension " + x; System::exit(1);
      endmatch
      ;
      if result != 0 do
        println$ "Compiler result " + str result;
        System::exit(1);
      done
    done

    var objs = map objname files;
    var libname = "lib" + (db.getpkgfield1(pkg,"provides_slib")).[2 to] +#(toolchain.static_library_extension);
    var dstlib = Filename::join (build, libname);
    println$ "Static Linking Library " + dstlib;
    result = toolchain.static_library_linker(srcs=objs, dst=dstlib);
    if result != 0 do
      println$ "Linker result " + str result;
      System::exit(1);
    done
  };
}

proc make_rtl (repo:string, build:string, pkgconfig_dir:string, boot_package:string, plugin_path:string, tmpdir:string)
{
  
  var librtl = Filename::join (build,"lib","rtl");
  Directory::mkdirs tmpdir;
  Directory::mkdirs librtl;
  println$ 
    "flx_librtl: configdir=" + pkgconfig_dir + 
    ", bootpkg=" + boot_package +
    ", librtldir=" + librtl +
    ", repository=" + repo
  ;

  var db = FlxPkgConfig::FlxPkgConfigQuery (list[string] pkgconfig_dir);

  gen getbootfield (field:string) => db.getpkgfield1 (boot_package, field);

  var compiler = getbootfield "compiler"; 
  var os = getbootfield "os"; 
  var toolchain = getbootfield "toolchain"; 
  println$ "compiler     : " + str compiler;
  println$ "os           : " + str os;
  println$ "toolchain    : " + str toolchain;

  var allpkgs = db.getclosure boot_package;
  //println$ "Closure      : " + str allpkgs;

  for pkg in allpkgs begin 
    var lib = db.getpkgfielddflt (pkg,"library");
    var srcdir = db.getpkgfielddflt (pkg,"srcdir");
    println$ f"%15S %20S %20S" (pkg,lib,srcdir);
  end 

  var toolchain-maker = 
    Dynlink::load-plugin-func1 [toolchain_t,clang_config_t] 
    (
      dll-name=Filename::join (pluginpath,toolchain), 
      setup-str="",
      entry-point=toolchain
    )
  ;
  for pkg in allpkgs begin
    var library = db.getpkgfielddflt (pkg,"library");
    var srcdir = db.getpkgfielddflt (pkg,"srcdir");
    var src = db.getpkgfield(pkg,"src");
    if library != "" do
      if srcdir == "" do
        println$ "Package error, package " + pkg + " library " + library + " No srcdir specified";
        System::exit(1);
      done
      if src.is_empty do
        println$ "Package error, package " + pkg + " library " + library + " No src files specified";
        System::exit(1);
      done
      make_lib (db,toolchain-maker, repo,librtl,pkg,tmpdir);
    else 
      println$ "------------";
      println$ "External package " + pkg;
      println$ "------------";
    done
  end 

  // make drivers
  begin
    println$ "Make drivers";
    var FLX_INSTALL_DIR = #(Config::config).FLX_INSTALL_DIR;
    var configdir = Filename::join (FLX_INSTALL_DIR, "config", "target");
    fun mkinc (x:string) => "-I"+x;
    var srcdir = Filename::join (repo,"src","flx_drivers");
    var config = 
      (
        header_search_dirs= list[string] (mkinc librtl, mkinc srcdir, mkinc configdir),
        macros= Empty[string],
        cflags = Empty[string],
        library_search_dirs= list[string] ("-L"+librtl),
        dynamic_libraries= Empty[string],
        static_libraries= Empty[string],
        debugln = dbug
      )
    ;
    fun objname (file:string) => let 
        ?dstobj = file.Filename::strip_extension + #(toolchain.static_object_extension) in
        Filename::join (librtl, dstobj)
    ;

    var toolchain = toolchain-maker config;
    println$ #(toolchain.whatami);
    proc cobj (file:string) {
      var src = Filename::join (srcdir,file);
      var dst = objname file;
      println$ "Compiling [static] " + src + " -> " + dst;
      var result = toolchain.cxx_static_object_compiler(src=src, dst=dst);
      if result != 0 do
        println$ "Driver compile "+ file+" FAILED";
      done
    }
    cobj("flx_run_lib.cpp");
    cobj("flx_arun_lib.cpp");
    cobj("flx_run_main.cxx");
    cobj("flx_arun_main.cxx");
  end
}

if System::argc < 6 do
  println$ "Usage: flx_build configdir bootpkg builddir repo plugindir tmpdir [debug]";
done

var pkgconfig_dir = System::argv 1;
var boot_package = System::argv 2;
var build = System::argv 3;
var repo = System::argv 4;
var pluginpath = System::argv 5;
var tmpdir = System::argv 6;
var debug = System::argv 7 != "";


make_rtl (repo, build, pkgconfig_dir,boot_package, pluginpath, tmpdir);
println$ "Build Complete";
System::exit (0);







