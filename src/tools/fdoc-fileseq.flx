include "./fileseq-interface";

fun setup(config_data:string) = {
  println$ "Setup fdoc-fileseq " + config_data;
  return 0;
}

object fileseq-control (filename: string) implements fileseq-control_t = 
{
  method fun whatami()=> "Filename sequence navigation object";

  fun calnav() = 
  {
    val relfile = match (filename,'/').split.rev with | Cons(?h,_) => h | Empty => "";
    var lpos = relfile.len.int;
    while lpos > 0 and not isdigit(relfile.[lpos - 1]) do 
       --lpos; 
    done 
    assert lpos == 0 or relfile.[lpos - 1].isdigit;
    var fpos = lpos;
    while fpos > 0 and isdigit(relfile.[fpos - 1]) do --fpos; done 
    assert fpos == 0 or relfile.[fpos].isdigit;
    val digits = 
      if fpos >=0 and lpos > fpos then
        relfile.[fpos to lpos]
      else ""
    ;

    val n = digits.len.int;
    val v = digits.int;
    val vnext = v + 1;
    val vprev = v - 1;
    var snext = (f"%010d" vnext).[10-n to];
    var sprev= (f"%010d" vprev).[10-n to];

    snext = relfile.[to fpos] + snext + relfile.[lpos to];
    sprev = relfile.[to fpos] + sprev + relfile.[lpos to];
    docindex := relfile.[to fpos] + "index" + relfile.[lpos to];

    return
      if digits == "" then 
        None[int],None[string],None[string],docindex
      elif vprev > 0 then 
        Some v,Some sprev, Some snext,docindex
      else
        Some v,None[string], Some snext,docindex
    ;
  }

  method fun shownav() => 
    match calnav() with
    | _,Some ?sprev, Some ?snext, ?docindex => 
        "<a href='"+sprev+"'>Prev</a>  " + 
        "<a href='"+snext+"'>Next</a> " + 
        "<a href='"+docindex+"'>Index</a>"
    | _,None, Some ?snext, ?docindex => "<a href='"+snext+"'>Next</a> "+"<a href='"+docindex+"'>Index</a>" 
    | _,None, None,_ => ""
    endmatch
  ;

  method fun docnum()=>
    match calnav() with
    | None,_,_,_ => ""
    | Some ?v,_,_,_ => str v + "."
  ; 

}

export fun setup of (string) as "setup";
export fun fileseq-control of (string) as "create_fileseq_manager";

