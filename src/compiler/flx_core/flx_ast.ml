(** {6 Source Reference}
 *
 * Provides a reference to the original source.  *)

(** {6 Abstract Syntax Tree}
 *
 * AST types are nodes of the Abstract Syntax Tree generated by the parser. *)

(** {7 Names}
 *
 * A simple name is an identifier, a qualified name is a dot (.) separated list
 * of instantiated names, and a instantiated name is a simple name optionally
 * followed by a square bracket enclosed list of type expressions. *)
type id_t = string
type bid_t = int
type index_map_t = (int,int) Hashtbl.t
type  c_t = [
  | `StrTemplate of string
  | `Str of string
  | `Virtual
  | `Identity
]

type base_type_qual_t = [
  | `Incomplete
  | `Pod
  | `GC_pointer (* this means the type is a pointer the GC must follow *)
]

(** type of a qualified name *)
type qualified_name_t =
  [
  | `AST_void of Flx_srcref.t
  | `AST_name of Flx_srcref.t * string * typecode_t list
  | `AST_case_tag of Flx_srcref.t * int
  | `AST_typed_case of Flx_srcref.t * int * typecode_t
  | `AST_lookup of Flx_srcref.t * (expr_t * string * typecode_t list)
  | `AST_the of Flx_srcref.t * qualified_name_t
  | `AST_index of Flx_srcref.t * string * int
  | `AST_callback of Flx_srcref.t * qualified_name_t
  ]

(** type of a suffixed name *)
and suffixed_name_t =
  [
  | `AST_void of Flx_srcref.t
  | `AST_name of Flx_srcref.t * string * typecode_t list
  | `AST_case_tag of Flx_srcref.t * int
  | `AST_typed_case of Flx_srcref.t * int * typecode_t
  | `AST_lookup of Flx_srcref.t * (expr_t * string * typecode_t list)
  | `AST_the of Flx_srcref.t * qualified_name_t
  | `AST_index of Flx_srcref.t * string * int
  | `AST_callback of Flx_srcref.t * qualified_name_t
  | `AST_suffix of Flx_srcref.t * (qualified_name_t * typecode_t)
  ]

(** {7 Type sublanguage}
 *
 * The encoding '`TYP_void' is the categorical initial: the type of an empty
 * union, and the type ordinary procedure types return.  There are no values
 * of this type. *)

(** type of a type *)
and typecode_t =
  | TYP_void of Flx_srcref.t                   (** void type *)
  | TYP_name of Flx_srcref.t * string * typecode_t list
  | TYP_case_tag of Flx_srcref.t * int
  | TYP_typed_case of Flx_srcref.t * int * typecode_t
  | TYP_lookup of Flx_srcref.t * (expr_t * string * typecode_t list)
  | TYP_the of Flx_srcref.t * qualified_name_t
  | TYP_index of Flx_srcref.t * string * int
  | TYP_callback of Flx_srcref.t * qualified_name_t
  | TYP_suffix of Flx_srcref.t * (qualified_name_t * typecode_t)
  | TYP_patvar of Flx_srcref.t * string
  | TYP_patany of Flx_srcref.t
  | TYP_tuple of typecode_t list               (** product type *)
  | TYP_unitsum of int                         (** sum of units  *)
  | TYP_sum of typecode_t list                 (** numbered sum type *)
  | TYP_intersect of typecode_t list           (** intersection type *)
  | TYP_record of (string * typecode_t) list   (** anon product *)
  | TYP_variant of (string * typecode_t) list  (** anon sum *)
  | TYP_function of typecode_t * typecode_t    (** function type *)
  | TYP_cfunction of typecode_t * typecode_t   (** C function type *)
  | TYP_pointer of typecode_t                  (** pointer type *)
  | TYP_array of typecode_t * typecode_t       (** array type base ^ index *)
  | TYP_as of typecode_t * string              (** fixpoint *)
  | TYP_typeof of expr_t                       (** typeof *)
  | TYP_var of int                             (** unknown type *)
  | TYP_none                                   (** unspecified *)
  | TYP_ellipsis                               (** ... for varargs *)
(*  | TYP_lvalue of typecode_t *)                  (** ... lvalue annotation *)
  | TYP_isin of typecode_t * typecode_t        (** typeset membership *)

  (* sets of types *)
  | TYP_typeset of typecode_t list             (** discrete set of types *)
  | TYP_setunion of typecode_t list            (** union of typesets *)
  | TYP_setintersection of typecode_t list     (** intersection of typesets *)

  (* dualizer *)
  | TYP_dual of typecode_t                     (** dual *)

  (* destructors *)
  | TYP_dom of typecode_t                      (** function domain extractor *)
  | TYP_cod of typecode_t                      (** function codomain extractor *)
  | TYP_proj of int * typecode_t               (** tuple projection *)
  | TYP_case_arg of int * typecode_t           (** argument of n'th variant *)

  | TYP_apply of typecode_t * typecode_t       (** type function application *)
  | TYP_typefun of simple_parameter_t list * typecode_t * typecode_t
                                                (** type lambda *)
  | TYP_type                                   (** meta type of a type *)
  | TYP_type_tuple of typecode_t list          (** meta type product *)

  | TYP_type_match of typecode_t * (typecode_t * typecode_t) list

and tpattern_t =
  | TPAT_function of tpattern_t * tpattern_t
  | TPAT_sum of tpattern_t list
  | TPAT_tuple of tpattern_t list
  | TPAT_pointer of tpattern_t
  | TPAT_void
  | TPAT_var of string
  | TPAT_name of string * tpattern_t list
  | TPAT_as of tpattern_t * string
  | TPAT_any
  | TPAT_unitsum of int
  | TPAT_type_tuple of tpattern_t list

and raw_typeclass_insts_t = qualified_name_t list
and vs_aux_t = {
  raw_type_constraint:typecode_t;
  raw_typeclass_reqs: raw_typeclass_insts_t
}

and plain_vs_list_t = (id_t * typecode_t) list
and plain_ivs_list_t = (id_t * int * typecode_t) list
and vs_list_t = plain_vs_list_t * vs_aux_t
and ivs_list_t = plain_ivs_list_t * vs_aux_t

(** Literals recognized by the lexer. *)
and literal_t =
  | AST_int of string * Big_int.big_int
  | AST_string of string
  | AST_cstring of string
  | AST_wstring of string
  | AST_ustring of string
  | AST_float of string * string

(** {7 Expressions}
 *
 * Raw expression terms. *)
and axiom_kind_t = [`Axiom | `Lemma ]
and axiom_method_t = [`Predicate of expr_t | `Equation of expr_t * expr_t]
and expr_t =
  [
  | `AST_vsprintf of Flx_srcref.t * string
  | `AST_map of Flx_srcref.t * expr_t * expr_t
  | `AST_noexpand of Flx_srcref.t * expr_t
  | `AST_name of Flx_srcref.t * string * typecode_t list
  | `AST_the of Flx_srcref.t * qualified_name_t
  | `AST_index of Flx_srcref.t * string * int
  | `AST_case_tag of Flx_srcref.t * int
  | `AST_typed_case of Flx_srcref.t * int * typecode_t
  | `AST_lookup of Flx_srcref.t * (expr_t * string * typecode_t list)
  | `AST_apply of Flx_srcref.t * (expr_t * expr_t)
  | `AST_tuple of Flx_srcref.t * expr_t list
  | `AST_record of Flx_srcref.t * (string * expr_t) list
  | `AST_record_type of Flx_srcref.t * (string * typecode_t) list
  | `AST_variant of Flx_srcref.t * (string * expr_t)
  | `AST_variant_type of Flx_srcref.t * (string * typecode_t) list
  | `AST_arrayof of Flx_srcref.t * expr_t list
  | `AST_coercion of Flx_srcref.t * (expr_t * typecode_t)
  | `AST_suffix of Flx_srcref.t * (qualified_name_t * typecode_t)

  | `AST_patvar of Flx_srcref.t * string
  | `AST_patany of Flx_srcref.t

  | `AST_void of Flx_srcref.t
  | `AST_ellipsis of Flx_srcref.t
  | `AST_product of Flx_srcref.t * expr_t list
  | `AST_sum of Flx_srcref.t * expr_t list
  | `AST_intersect of Flx_srcref.t * expr_t list
  | `AST_isin of Flx_srcref.t * (expr_t * expr_t)
  | `AST_setintersection of Flx_srcref.t * expr_t list
  | `AST_setunion of Flx_srcref.t * expr_t list
  | `AST_orlist of Flx_srcref.t * expr_t list
  | `AST_andlist of Flx_srcref.t * expr_t list
  | `AST_arrow of Flx_srcref.t * (expr_t * expr_t)
  | `AST_longarrow of Flx_srcref.t * (expr_t * expr_t)
  | `AST_superscript of Flx_srcref.t * (expr_t * expr_t)

  | `AST_literal of Flx_srcref.t * literal_t
  | `AST_deref of Flx_srcref.t * expr_t
  | `AST_ref of Flx_srcref.t * expr_t
  | `AST_likely of Flx_srcref.t * expr_t
  | `AST_unlikely of Flx_srcref.t * expr_t
  | `AST_new of Flx_srcref.t * expr_t
  | `AST_callback of Flx_srcref.t * qualified_name_t
  | `AST_dot of Flx_srcref.t * (expr_t * expr_t)
  | `AST_lambda of Flx_srcref.t * (vs_list_t * params_t list * typecode_t * statement_t list)

  (* this boolean expression checks its argument is
     the nominated union variant .. not a very good name for it
  *)
  | `AST_match_ctor of Flx_srcref.t * (qualified_name_t * expr_t)

  (* this boolean expression checks its argument is the nominate
     sum variant
  *)
  | `AST_match_case of Flx_srcref.t * (int * expr_t)

  (* this extracts the argument of a named union variant -- unsafe *)
  | `AST_ctor_arg of Flx_srcref.t * (qualified_name_t * expr_t)

  (* this extracts the argument of a number sum variant -- unsafe *)
  | `AST_case_arg of Flx_srcref.t * (int * expr_t)

  (* this just returns an integer equal to union or sum index *)
  | `AST_case_index of Flx_srcref.t * expr_t (* the zero origin variant index *)

  | `AST_letin of Flx_srcref.t * (pattern_t * expr_t * expr_t)

  | `AST_get_n of Flx_srcref.t * (int * expr_t) (* get n'th component of a tuple *)
  | `AST_get_named_variable of Flx_srcref.t * (string * expr_t) (* get named component of a class or record *)
  | `AST_as of Flx_srcref.t * (expr_t * string)
  | `AST_match of Flx_srcref.t * (expr_t * (pattern_t * expr_t) list)

  | `AST_typeof of Flx_srcref.t * expr_t
  | `AST_cond of Flx_srcref.t * (expr_t * expr_t * expr_t)

  | `AST_expr of Flx_srcref.t * string * typecode_t

  | `AST_type_match of Flx_srcref.t * (typecode_t * (typecode_t * typecode_t) list)

  | `AST_macro_ctor of Flx_srcref.t * (string * expr_t)
  | `AST_macro_statements of Flx_srcref.t * statement_t list

  | `AST_user_expr of Flx_srcref.t * string * ast_term_t
  ]

(** {7 Patterns}
 *
 * Patterns; used for matching variants in match statements. *)
and float_pat =
  | Float_plus of string * string (** type, value *)
  | Float_minus of string * string
  | Float_inf  (** infinity *)
  | Float_minus_inf (** negative infinity *)

and pattern_t =
  | PAT_nan of Flx_srcref.t
  | PAT_none of Flx_srcref.t

  (* constants *)
  | PAT_int of Flx_srcref.t * string * Big_int.big_int
  | PAT_string of Flx_srcref.t * string

  (* ranges *)
  | PAT_int_range of Flx_srcref.t * string * Big_int.big_int * string * Big_int.big_int
  | PAT_string_range of Flx_srcref.t * string * string
  | PAT_float_range of Flx_srcref.t * float_pat * float_pat

  (* other *)
  | PAT_coercion of Flx_srcref.t * pattern_t * typecode_t

  | PAT_name of Flx_srcref.t * id_t
  | PAT_tuple of Flx_srcref.t * pattern_t list
  | PAT_any of Flx_srcref.t
    (* second list is group bindings 1 .. n-1: EXCLUDES 0 cause we can use 'as' for that ?? *)
  | PAT_const_ctor of Flx_srcref.t * qualified_name_t
  | PAT_nonconst_ctor of Flx_srcref.t * qualified_name_t * pattern_t
  | PAT_as of Flx_srcref.t * pattern_t * id_t
  | PAT_when of Flx_srcref.t * pattern_t * expr_t
  | PAT_record of Flx_srcref.t * (id_t * pattern_t) list

(** {7 Statements}
 *
 * Statements; that is, the procedural sequence control system. *)
and param_kind_t = [`PVal | `PVar | `PFun | `PRef ]
and simple_parameter_t = id_t * typecode_t
and parameter_t = param_kind_t * id_t * typecode_t * expr_t option
and macro_parameter_type_t =
  | Ident
  | Expr
  | Stmt
and macro_parameter_t = id_t * macro_parameter_type_t
and lvalue_t = [
  | `Val of Flx_srcref.t * string
  | `Var of Flx_srcref.t * string
  | `Name of Flx_srcref.t * string
  | `Skip of Flx_srcref.t
  | `List of tlvalue_t list
  | `Expr of Flx_srcref.t * expr_t
]
and tlvalue_t = lvalue_t * typecode_t option

and funkind_t = [
  | `Function
  | `CFunction
  | `InlineFunction
  | `NoInlineFunction
  | `Virtual
  | `Ctor
  | `Generator
]

and property_t = [
  | `Recursive
  | `Inline
  | `NoInline
  | `Inlining_started
  | `Inlining_complete
  | `Generated of string
  | `Heap_closure        (* a heaped closure is formed *)
  | `Explicit_closure    (* explicit closure expression *)
  | `Stackable           (* closure can be created on stack *)
  | `Stack_closure       (* a stacked closure is formed *)
  | `Unstackable         (* closure cannot be created on stack *)
  | `Pure                (* closure not required by self *)
  | `Uses_global_var     (* a global variable is explicitly used *)
  | `Ctor                (* Class constructor procedure *)
  | `Generator           (* Generator: fun with internal state *)
  | `Yields              (* Yielding generator *)
  | `Cfun                (* C function *)
  | `Lvalue              (* primitive returns lvalue *)

  (* one of the below must be set before code generation *)
  | `Requires_ptf        (* a pointer to thread frame is needed *)
  | `Not_requires_ptf    (* no pointer to thread frame is needed *)

  | `Uses_gc             (* requires gc locally *)
  | `Virtual             (* interface in a typeclass *)
]

and type_qual_t = [
  | base_type_qual_t
  | `Raw_needs_shape of typecode_t
]

and requirement_t = [
  | `Body_req of c_t
  | `Header_req of c_t
  | `Named_req of qualified_name_t
  | `Property_req of string
  | `Package_req of c_t
]

and ikind_t = [
  | `Header
  | `Body
  | `Package
]

and raw_req_expr_t =
[
  | `RREQ_atom of requirement_t
  | `RREQ_or of raw_req_expr_t * raw_req_expr_t
  | `RREQ_and of raw_req_expr_t * raw_req_expr_t
  | `RREQ_true
  | `RREQ_false
]

and named_req_expr_t =
[
  | `NREQ_atom of qualified_name_t
  | `NREQ_or of named_req_expr_t * named_req_expr_t
  | `NREQ_and of named_req_expr_t * named_req_expr_t
  | `NREQ_true
  | `NREQ_false
]

and prec_t = string
and params_t = parameter_t list * expr_t option (* second arg is a constraint *)

and ast_term_t =
  [
  | `Expression_term of expr_t
  | `Statement_term of statement_t
  | `Statements_term of statement_t list
  | `Identifier_term of string
  | `Keyword_term of string
  | `Apply_term of ast_term_t * ast_term_t list
  ]

and statement_t =
  [
  | `AST_include of Flx_srcref.t * string
  | `AST_open of Flx_srcref.t * vs_list_t * qualified_name_t

  (* the keyword for this one is 'inherit' *)
  | `AST_inject_module of Flx_srcref.t * qualified_name_t
  | `AST_use of Flx_srcref.t * id_t * qualified_name_t
  | `AST_comment of Flx_srcref.t * string (* for documenting generated code *)
  (*
  | `AST_public of Flx_srcref.t * string * statement_t
  *)
  | `AST_private of Flx_srcref.t * statement_t

  (* definitions *)
  | `AST_reduce of Flx_srcref.t * id_t * vs_list_t * simple_parameter_t list * expr_t * expr_t
  | `AST_axiom of Flx_srcref.t * id_t * vs_list_t * params_t * axiom_method_t
  | `AST_lemma of Flx_srcref.t * id_t * vs_list_t * params_t * axiom_method_t
  | `AST_function of Flx_srcref.t * id_t * vs_list_t * params_t * (typecode_t * expr_t option) * property_t list * statement_t list
  | `AST_curry of Flx_srcref.t * id_t * vs_list_t * params_t list * (typecode_t * expr_t option) * funkind_t * statement_t list

  (* macros *)
  | `AST_macro_name of Flx_srcref.t * id_t * id_t
  | `AST_macro_names of Flx_srcref.t * id_t * id_t list
  | `AST_expr_macro of Flx_srcref.t * id_t * macro_parameter_t list * expr_t
  | `AST_stmt_macro of Flx_srcref.t * id_t * macro_parameter_t list * statement_t list
  | `AST_macro_block of Flx_srcref.t * statement_t list
  | `AST_macro_val  of Flx_srcref.t * id_t list * expr_t
  | `AST_macro_vals  of Flx_srcref.t * id_t * expr_t list
  | `AST_macro_var  of Flx_srcref.t * id_t list * expr_t
  | `AST_macro_assign of Flx_srcref.t * id_t list * expr_t
  | `AST_macro_forget of Flx_srcref.t * id_t list
  | `AST_macro_label of Flx_srcref.t * id_t
  | `AST_macro_goto of Flx_srcref.t * id_t
  | `AST_macro_ifgoto of Flx_srcref.t * expr_t * id_t
  | `AST_macro_proc_return of Flx_srcref.t

  (* type macros *)
  | `AST_macro_ifor of Flx_srcref.t * id_t * id_t list * statement_t list
  | `AST_macro_vfor of Flx_srcref.t * id_t list * expr_t * statement_t list

  (* composition of statements: note NOT A BLOCK *)
  | `AST_seq of Flx_srcref.t * statement_t list

  (* types *)
  | `AST_union of Flx_srcref.t * id_t * vs_list_t * (id_t * int option * vs_list_t * typecode_t) list
  | `AST_struct of Flx_srcref.t * id_t * vs_list_t * (id_t * typecode_t) list
  | `AST_cstruct of Flx_srcref.t * id_t * vs_list_t * (id_t * typecode_t) list
  | `AST_type_alias of Flx_srcref.t * id_t * vs_list_t * typecode_t
  | `AST_inherit of Flx_srcref.t * id_t * vs_list_t * qualified_name_t
  | `AST_inherit_fun of Flx_srcref.t * id_t * vs_list_t * qualified_name_t

  (* variables *)
  | `AST_val_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t option * expr_t option
  | `AST_lazy_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t option * expr_t option
  | `AST_var_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t option * expr_t option
  | `AST_ref_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t option * expr_t option

  (* module system *)
  | `AST_untyped_module of Flx_srcref.t * id_t * vs_list_t * statement_t list
  | `AST_typeclass of Flx_srcref.t * id_t * vs_list_t * statement_t list
  | `AST_instance of Flx_srcref.t * vs_list_t * qualified_name_t * statement_t list

  (* control structures: primitives *)
  | `AST_label of Flx_srcref.t * id_t
  (*
  | `AST_whilst of Flx_srcref.t * expr_t * statement_t list
  | `AST_until of Flx_srcref.t * expr_t * statement_t list
  *)
  | `AST_goto of Flx_srcref.t * id_t
  | `AST_ifgoto of Flx_srcref.t * expr_t *id_t
  | `AST_ifreturn of Flx_srcref.t * expr_t
  | `AST_ifdo of Flx_srcref.t * expr_t * statement_t list * statement_t list
  | `AST_call of Flx_srcref.t * expr_t * expr_t
  | `AST_assign of Flx_srcref.t * string * tlvalue_t * expr_t
  | `AST_cassign of Flx_srcref.t * expr_t * expr_t
  | `AST_jump of Flx_srcref.t * expr_t * expr_t
  | `AST_loop of Flx_srcref.t * id_t * expr_t
  | `AST_svc of Flx_srcref.t * id_t
  | `AST_fun_return of Flx_srcref.t * expr_t
  | `AST_yield of Flx_srcref.t * expr_t
  | `AST_proc_return of Flx_srcref.t
  | `AST_halt of Flx_srcref.t  * string
  | `AST_trace of Flx_srcref.t  * id_t * string
  | `AST_nop of Flx_srcref.t * string
  | `AST_assert of Flx_srcref.t * expr_t
  | `AST_init of Flx_srcref.t * id_t * expr_t
  | `AST_stmt_match of Flx_srcref.t * (expr_t * (pattern_t * statement_t list) list)

  | `AST_newtype of Flx_srcref.t * id_t * vs_list_t * typecode_t

  (* binding structures [prolog] *)
  | `AST_abs_decl of Flx_srcref.t * id_t * vs_list_t * type_qual_t list * c_t * raw_req_expr_t
  | `AST_ctypes of Flx_srcref.t * (Flx_srcref.t * id_t) list * type_qual_t list  * raw_req_expr_t
  | `AST_const_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t * c_t * raw_req_expr_t
  | `AST_fun_decl of Flx_srcref.t * id_t * vs_list_t * typecode_t list * typecode_t * c_t * raw_req_expr_t * prec_t
  | `AST_callback_decl of Flx_srcref.t * id_t * typecode_t list * typecode_t * raw_req_expr_t
  (* embedding *)
  | `AST_insert of Flx_srcref.t * id_t * vs_list_t * c_t * ikind_t  * raw_req_expr_t
  | `AST_code of Flx_srcref.t * c_t
  | `AST_noreturn_code of Flx_srcref.t * c_t

  | `AST_export_fun of Flx_srcref.t * suffixed_name_t * string
  | `AST_export_python_fun of Flx_srcref.t * suffixed_name_t * string
  | `AST_export_type of Flx_srcref.t * typecode_t * string

  | `AST_user_statement of Flx_srcref.t * string * ast_term_t
  | `AST_scheme_string of Flx_srcref.t * string
  ]


and exe_t =
  | EXE_code of c_t (* for inline C++ code *)
  | EXE_noreturn_code of c_t (* for inline C++ code *)
  | EXE_comment of string (* for documenting generated code *)
  | EXE_label of string (* for internal use only *)
  | EXE_goto of string  (* for internal use only *)
  | EXE_ifgoto of expr_t * string  (* for internal use only *)
  | EXE_call of expr_t * expr_t
  | EXE_jump of expr_t * expr_t
  | EXE_loop of id_t * expr_t
  | EXE_svc of id_t
  | EXE_fun_return of expr_t
  | EXE_yield of expr_t
  | EXE_proc_return
  | EXE_halt of string
  | EXE_trace of id_t * string
  | EXE_nop of string
  | EXE_init of id_t * expr_t
  | EXE_iinit of (id_t * int) * expr_t
  | EXE_assign of expr_t * expr_t
  | EXE_assert of expr_t

type sexe_t = Flx_srcref.t * exe_t

(** The whole of a compilation unit, this is the data structure returned by
 * parsing a whole file. *)
type compilation_unit_t = statement_t list

let src_of_qualified_name (e : qualified_name_t) = match e with
  | `AST_void s
  | `AST_name  (s,_,_)
  | `AST_case_tag (s,_)
  | `AST_typed_case (s,_,_)
  | `AST_lookup (s,_)
  | `AST_the (s,_)
  | `AST_index (s,_,_)
  | `AST_callback (s,_)
  -> s

let src_of_suffixed_name (e : suffixed_name_t) = match e with
  | #qualified_name_t as x -> src_of_qualified_name x
  | `AST_suffix (s,_)
  -> s

let src_of_typecode = function
  | TYP_void s
  | TYP_name  (s,_,_)
  | TYP_case_tag (s,_)
  | TYP_typed_case (s,_,_)
  | TYP_lookup (s,_)
  | TYP_the (s,_)
  | TYP_index (s,_,_)
  | TYP_callback (s,_)
  | TYP_suffix (s,_)
  | TYP_patvar (s,_)
  | TYP_patany s
  -> s

  | TYP_tuple _
  | TYP_unitsum _
  | TYP_sum _
  | TYP_intersect _
  | TYP_record _
  | TYP_variant _
  | TYP_function _
  | TYP_cfunction _
  | TYP_pointer _
  | TYP_array _
  | TYP_as _
  | TYP_typeof _
  | TYP_var _
  | TYP_none
  | TYP_ellipsis
  | TYP_isin _
  | TYP_typeset _
  | TYP_setunion _
  | TYP_setintersection _
  | TYP_dual _
  | TYP_dom _
  | TYP_cod _
  | TYP_proj _
  | TYP_case_arg _
  | TYP_apply _
  | TYP_typefun _
  | TYP_type
  | TYP_type_tuple _
  | TYP_type_match _
  -> Flx_srcref.dummy_sr

let src_of_expr (e : expr_t) = match e with
  | #suffixed_name_t as x -> src_of_suffixed_name x
  | `AST_vsprintf (s,_)
  | `AST_ellipsis s
  | `AST_noexpand (s,_)
  | `AST_product (s,_)
  | `AST_sum (s,_)
  | `AST_setunion (s,_)
  | `AST_intersect (s,_)
  | `AST_isin (s,_)
  | `AST_setintersection (s,_)
  | `AST_orlist (s,_)
  | `AST_andlist (s,_)
  | `AST_arrow (s,_)
  | `AST_longarrow (s,_)
  | `AST_superscript (s,_)
  | `AST_patvar (s,_)
  | `AST_patany s
  | `AST_map (s,_,_)
  | `AST_apply (s,_)
  | `AST_deref (s,_)
  | `AST_new (s,_)
  | `AST_ref  (s,_)
  | `AST_likely (s,_)
  | `AST_unlikely (s,_)
  | `AST_literal (s,_)
  | `AST_tuple  (s,_)
  | `AST_record (s,_)
  | `AST_variant (s,_)
  | `AST_record_type (s,_)
  | `AST_variant_type (s,_)
  | `AST_arrayof (s,_)
  | `AST_dot (s,_)
  | `AST_lambda (s,_)
  | `AST_match_ctor (s,_)
  | `AST_match_case (s,_)
  | `AST_ctor_arg (s,_)
  | `AST_case_arg (s,_)
  | `AST_case_index (s,_)
  | `AST_get_n (s,_)
  | `AST_get_named_variable (s,_)
  | `AST_coercion (s,_)
  | `AST_as (s,_)
  | `AST_match (s, _)
  | `AST_type_match (s, _)
  | `AST_cond (s,_)
  | `AST_expr (s,_,_)
  | `AST_letin (s,_)
  | `AST_typeof (s,_)
  | `AST_macro_ctor (s,_)
  | `AST_macro_statements (s,_)
  | `AST_user_expr (s,_,_)
  -> s

let src_of_stmt (e : statement_t) = match e with
  (*
  | `AST_public (s,_,_)
  *)
  | `AST_private (s,_)
  | `AST_label (s,_)
  | `AST_goto (s,_)
  | `AST_assert (s,_)
  | `AST_init (s,_,_)
  | `AST_function (s,_,_,_,_,_,_)
  | `AST_reduce (s,_,_,_,_,_)
  | `AST_axiom (s,_,_,_,_)
  | `AST_lemma (s,_,_,_,_)
  | `AST_curry (s,_,_,_,_,_,_)
  | `AST_macro_name (s,_,_)
  | `AST_macro_names (s,_,_)
  | `AST_expr_macro (s,_,_,_)
  | `AST_stmt_macro (s,_,_,_)
  | `AST_macro_block (s,_)
  | `AST_macro_val (s,_,_)
  | `AST_macro_vals (s,_,_)
  | `AST_macro_var (s, _,_)
  | `AST_macro_assign (s,_,_)
  | `AST_macro_forget (s,_)
  | `AST_macro_label (s,_)
  | `AST_macro_goto (s,_)
  | `AST_macro_ifgoto (s,_,_)
  | `AST_macro_proc_return s
  | `AST_macro_ifor (s,_,_,_)
  | `AST_macro_vfor (s,_,_,_)
  | `AST_val_decl (s,_,_,_,_)
  | `AST_lazy_decl (s,_,_,_,_)
  | `AST_var_decl (s,_,_,_,_)
  | `AST_ref_decl (s,_,_,_,_)
  | `AST_type_alias (s,_,_,_)
  | `AST_inherit (s,_,_,_)
  | `AST_inherit_fun (s,_,_,_)
  | `AST_nop (s,_)
  | `AST_assign (s,_,_,_)
  | `AST_cassign (s, _,_)
  | `AST_call (s,_,_)
  | `AST_jump (s,_,_)
  | `AST_loop (s,_,_)
  | `AST_svc (s,_)
  | `AST_fun_return (s,_)
  | `AST_yield (s,_)
  | `AST_proc_return s
  | `AST_halt (s,_)
  | `AST_trace (s,_,_)
  | `AST_ifgoto (s,_,_)
  | `AST_ifreturn (s,_)
  | `AST_ifdo (s,_,_,_)
  (*
  | `AST_whilst (s,_,_)
  | `AST_until (s,_,_)
  *)
  | `AST_abs_decl (s,_,_,_,_,_)
  | `AST_newtype (s,_,_,_)
  | `AST_ctypes (s,_,_,_)
  | `AST_const_decl (s,_,_,_,_,_)
  | `AST_fun_decl (s,_,_,_,_,_,_,_)
  | `AST_callback_decl (s,_,_,_,_)
  | `AST_insert (s,_,_,_,_,_)
  | `AST_code (s,_)
  | `AST_noreturn_code (s,_)
  | `AST_union (s, _,_,_)
  | `AST_struct (s,_,_,_)
  | `AST_cstruct (s,_,_,_)
  | `AST_typeclass (s,_,_,_)
  | `AST_instance (s,_,_,_)
  | `AST_untyped_module (s,_,_,_)
  | `AST_export_fun (s,_,_)
  | `AST_export_python_fun (s,_,_)
  | `AST_export_type (s,_,_)
  | `AST_open (s,_,_)
  | `AST_inject_module (s,_)
  | `AST_include (s,_)
  | `AST_use (s,_,_)
  | `AST_seq (s,_)
  | `AST_user_statement (s,_,_)
  | `AST_scheme_string (s,_)
  | `AST_comment (s,_)
  | `AST_stmt_match (s,_)
  -> s

let src_of_pat (e : pattern_t) = match e with
  | PAT_coercion (s,_,_)
  | PAT_nan s
  | PAT_none s
  | PAT_int (s,_,_)
  | PAT_string (s,_)
  | PAT_int_range (s,_,_,_,_)
  | PAT_string_range (s,_,_)
  | PAT_float_range (s,_,_)
  | PAT_name (s,_)
  | PAT_tuple (s,_)
  | PAT_any s
  | PAT_const_ctor (s,_)
  | PAT_nonconst_ctor (s,_,_)
  | PAT_as (s,_,_)
  | PAT_when (s,_,_)
  | PAT_record (s,_)
  -> s

let typecode_of_qualified_name = function
  | `AST_void sr -> TYP_void sr
  | `AST_name (sr,name,ts) -> TYP_name (sr,name,ts)
  | `AST_case_tag (sr,v) -> TYP_case_tag (sr,v)
  | `AST_typed_case (sr,v,t) -> TYP_typed_case (sr,v,t)
  | `AST_lookup (sr,(e,name,ts)) -> TYP_lookup (sr,(e,name,ts))
  | `AST_the (sr,name) -> TYP_the (sr,name)
  | `AST_index (sr,name,index) -> TYP_index (sr,name,index)
  | `AST_callback (sr,name) -> TYP_callback (sr,name)

let qualified_name_of_typecode = function
  | TYP_void sr -> Some (`AST_void sr)
  | TYP_name (sr,name,ts) -> Some (`AST_name (sr,name,ts))
  | TYP_case_tag (sr,v) -> Some (`AST_case_tag (sr,v))
  | TYP_typed_case (sr,v,t) -> Some (`AST_typed_case (sr,v,t))
  | TYP_lookup (sr,(e,name,ts)) -> Some (`AST_lookup (sr,(e,name,ts)))
  | TYP_the (sr,name) -> Some (`AST_the (sr,name))
  | TYP_index (sr,name,index) -> Some (`AST_index (sr,name,index))
  | TYP_callback (sr,name) -> Some (`AST_callback (sr,name))
  | _ -> None


(** get range from first and last expressions *)
let rsexpr a b = Flx_srcref.rsrange (src_of_expr a) (src_of_expr b)

(** get source range of non-empty list of expressions *)
let rslist lst =
  rsexpr (List.hd lst) (Flx_list.list_last lst)

(** Define a default vs_aux_t. *)
let dfltvs_aux =
  { raw_type_constraint = TYP_tuple []; raw_typeclass_reqs = []; }

(** Define a default vs_list_t. *)
let dfltvs = [], dfltvs_aux
