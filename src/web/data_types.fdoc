@h1 Data Types
Felix provides a very rich collection of base data types, 
facilities to defined your own, and multiple ways to integrate them
into libraries and programs.
@p
The felix compiler {flxg} has very little knowledge of core scalar data types
such as {bool}, {int}, {double}, {complex}, {string}:
such types, and the operations on them, are generally lifted from C
in the library using C binding technology.
@p
On the other hand, the compiler has strong support for data type
<em>constructors</em> such has formation of the product types 
<em>tuples</em>, <em>arrays</em>, <em>records</em>, <em>structs</em>
and <em>cstructs</em>, and sum types <em>sum</em>, <em>union</em>,
<em>enum</em>, <em>cenum</em>. Of course the compiler also has
core knowlege of <em>pointers</em>, <em>functions</em> and <em>procedures</em>.
@p
In turn, these data constructors can be used in the library to
define complicated or advanced data types.  To make the complexity
manageable, the compiler provides features like <em>type classes</em>
with <em>virtual</em> functions and <em>semantic specifications</em>, 
<em>data type abstraction</em>, access control using <em>private</em> definitions.
@p
To ensure all this stuff hangs together, Felix 
automates <em>resource management</em>, <em>memory management</em>.


