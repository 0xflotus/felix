// /home/fletch/project/felix.git/build/release/host/bin/flx --force --echo --test=build/release src/web/tut/arithmetic.flx
//
//To understand segfaults you do this:
//  (a) Run flx with --force and --echo
//        This tells you the name of the C++ file in the cache
//        Now edit the C++ file with your text editor to put printf()
//        statements in various places.
//
//  (b) Run flx again with --nofelix option
//        That stops the flxg compiler running so it doesn't clobber
//        your edits to the C++ file.
//
//You can then put Felix prints between the steps, this prints debug
//stuff to show progress AND it put the prints in the C++ so you can
//more easily find where you're up to.

//Result of a parse
union parsed[A, B] = 
  | Returns of B * list[A] 
  | Parse_failed
  ;

//Type of a parser
typedef parser[A, B] = list[A] -> parsed[A, B];

//Emtpy string parser
fun empty[A, B] (v:B)(toks:list[A]):parsed[A, B] => 
  Returns (v, toks)
  ;

//Given a predicate, produce a parser
fun token[A, B](test:A->opt[B]):parser[A,B] =>
  fun (l:list[A]):parsed[A, B] => 
    match l with
    | Cons (t, ts) =>
        match test t with
        | Some r => Returns[A, B] (r, ts)
        | #None => Parse_failed[A, B]
        endmatch
    | #Empty => Parse_failed[A, B]
    endmatch
  ;

//Parser of a specific token
fun char_[A with Eq[A]] (ch:A):parser[A, A] =>
  token (
  fun (tok:A):opt[A] =>
    match tok with
      | c when (c == ch) => Some ch
      | _ => None[A]
    endmatch
  )
  ;

//Parser disjunction
fun orelse[A, B] (p1:parser[A, B], p2:parser[A, B]):parser[A, B] =>
  fun (toks:list[A]):parsed[A, B] =>
      match p1 toks with
        | Parse_failed => p2 toks
        | res => res
      endmatch
  ;

//Parser conjunction
fun andalso[A, B, C] (p1:parser[A, B],p2:parser[A, C]):parser[A, (B * C)] =>
  fun (toks:list[A]) : parsed[A, (B * C)]=>
    match p1 toks with
      | Returns (r1, toks1) =>
          match p2 toks1 with
            | Returns (r2, toks2) => Returns ((r1, r2), toks2)
            | _ => Parse_failed[A, (B * C)]
          endmatch
      | _ => Parse_failed[A, (B * C)]
    endmatch
  ;

//Transform the result of a parse
fun gives[A, B, C] (p:parser[A, B], f:B ->C):parser[A, C] =>
  fun (toks:list[A]):parsed[A, C] =>
    match p toks with
      | Returns (v, toks1) => Returns (f v, toks1)
      | _ => Parse_failed[A, C]
   endmatch
  ;

//Infix operators
syntax infix_c
{
  //orelse
  x[ssetunion_pri] := 
   x[ssetunion_pri] "|~" x[>ssetunion_pri] =># 
    '''`(ast_apply ,_sr (,(nos "orelse") (,_1 ,_3)))'''
  ;

  //andalso
  x[ssetintersection_pri] := 
   x[ssetintersection_pri] "&~" x[>ssetintersection_pri] =># 
    '''`(ast_apply ,_sr (,(nos "andalso") (,_1 ,_3)))'''
  ;

  //gives
  x[scomparison_pri]:= 
   x[scomparison_pri] ">=~" x[>scomparison_pri] =># 
    '''`(ast_apply ,_sr (,(nos "gives") (,_1 ,_3)))'''
  ;

  //givento
  x[scomparison_pri]:= 
   x[scomparison_pri] ">>=~" x[>scomparison_pri] =># 
    '''`(ast_apply ,_sr (,(nos "givento") (,_1 ,_3)))'''
  ;

}

open syntax infix_c;

//Kleene '*'
fun zero_or_more[A, B] (p:parser[A, B]): parser[A, list[B]] =>
  fun (toks:list[A]) : parsed[A, list[B]] =>
    ((p &~ zero_or_more p >=~ 
     (fun (res:(B * list[B])) : list[B] => Cons (res.0, res.1))
    ) |~ (empty[A, list[B]] (list[B]()))) toks
  ;

syntax prefix_c 
{
  //zero_or_more
  x[srefr_pri] := "*" x[srefr_pri] =># "(prefix 'zero_or_more)";
}

open syntax prefix_c;

//Check if a character is a member of one of the provided ranges
fun char_range (c:char)(l:list[char * char]):bool =>
  match l with
    | #Empty => false
    | Cons ((c1, c2), tl) =>	
       (ord c1 <= ord c and ord c <= ord c2) or char_range c tl
  endmatch
  ;

//An element of the alphabet
var letter : parser[char, char] =
  token (fun (c:char) => if (isalpha c) then Some c else None[char])
  ;

//Digit parser
var digit : parser[char, char] = 
  token (fun (c:char) : opt[char] => if isdigit c then Some c else None[char])
  ;

//Parser of a sequence of digit
var digits : parser[char, list[char]] = 
  (digit &~ *digit) >=~ 
    (fun (p:char*list[char]):list[char] => Cons (p.0,p.1))
  ;

// '-' | '+' | eps
var optsign : parser[char, list[char]] =
  token (fun (c:char):opt[list[char]] =>
    match c with
    | c when c == char '-' => Some (list[char] (c))
    | c when c == char '+'=> Some (list[char] (c))
    | _ => None[list[char]]
   endmatch) |~ empty[char, list[char]] (list[char] ())
  ;

// '.' digit* | eps
var optfrac : parser[char, list[char]] =
  ((char_ (char '.') &~ *digit) >=~ (fun (p:char*list[char]):list[char] => Cons (p.0,p.1)))
  |~ empty[char, list[char]] (list[char] ())
  ;

//(('e'|'E') optsign digits)|eps
var optexp : parser[char, list[char]] =
  ((((char_ (char 'e') |~ char_ (char 'E')) &~ optsign) 
    >=~ (fun (p:char * list[char]):list[char] => Cons (p.0,p.1))) &~ digits) 
    >=~ (fun (x:list[char], y:list[char]) : list[char] => x + y)
;

//Tokens
union token_t  =
  | T_num of double
  | T_ident of string
  | T_lparen | T_rparen
  | T_plus | T_minus | T_star | T_slash | T_semicolon | T_equal
  ;

//Explode a string into a list of char
fun explode (s:string):list[char] =
{
  val n:size = len s;
  fun loop (acc:list[char]) (i:size) : list[char] =>
    if (i == n) then rev acc
    else loop (Cons (s.[i], acc)) (i + 1)
  ;
  return loop (list[char]()) 0uz;
};

//Implode a list of char to a string
fun implode (xs:list[char]) =>
  fold_left (fun (a:string) (b:char):string => a + b) "" xs
  ;

//Number token
var number:parser[char, token_t] =
  (digits &~ optfrac &~ optexp) >=~
    (fun (p:list[char] * list[char], cse:list[char]):token_t =>
      T_num (atof (implode (p.0 + p.1 + cse))))
  ;

//Identifier token
var identifier : parser[char, token_t] =
  (letter &~ *letter) >=~ 
    (fun (c:char, cs:list[char]):token_t => 
       T_ident (implode (Cons (c, cs))))
  ;

//Operator token
var operator : parser[char, token_t] =
  token (fun (ch:char) : opt[token_t] =>
    match ch with
    | c when c == char '-' => Some T_minus
    | c when c == char '+' => Some T_plus
    | c when c == char '*' => Some T_star
    | c when c == char '/' => Some T_slash
    | _ => None[token_t]
    endmatch
  );

//Parenthesis token
var paren : parser[char, token_t] =
  token (fun (ch:char) : opt[token_t] =>
    match ch with
    | c when c == char '(' => Some T_lparen
    | c when c == char ')' => Some T_rparen
    | _ => None[token_t]
    endmatch
  );

//Equal token
var equal : parser[char, token_t] =
  token (fun (ch:char) : opt[token_t] =>
  match ch with
  | c when c == '=' => Some T_equal
    | _ => None[token_t]
    endmatch
  );

//Semicolon token
var semicolon : parser[char, token_t] =
  token (fun (ch:char) : opt[token_t] =>
  match ch with
  | c when c == ';' => Some T_equal
    | _ => None[token_t]
    endmatch
  );

//Parse a whitespace character
var space_ : parser[char, unit] =
 token (fun (ch:char) : opt[unit] =>
   match ch with
     | c when c == char ' ' => Some[unit] ()
     | c when c == char '\t' => Some[unit] ()
     | c when c == char '\n' => Some[unit] ()
     | c when c == char '\r' => Some[unit] ()
     | _ => None[unit]
   endmatch
  );

//Parser of whitespace
fun spaces (toks : list[char]) : parsed[char, unit] => 
  (((space_ &~ spaces) >=~ (fun (x:unit, y:unit) : unit => ())) 
  |~ empty[char, unit] ()) toks
  ;

//Lexer for the language of arithmetic expressions
fun lex (toks : list[char]) : parsed [char, list[token_t]] =>
    (spaces &~ 
    *(((identifier |~ number |~ operator |~ paren |~ semicolon |~ equal) &~ spaces) >=~ 
    (fun (tok:token_t, _:unit) : token_t => tok)) >=~ (fun (u:unit, ts:list[token_t]) : list[token_t] => ts)) toks
  ;

//Arithmetic expressions
union ast_t =
  | E_const of double
  | E_var of string
  | E_add of ast_t * ast_t
  | E_sub of ast_t * ast_t
  | E_mul of ast_t * ast_t
  | E_div of ast_t * ast_t
  | E_let of (string * ast_t)
  ;

//Constants
val num:parser[token_t, ast_t] =
  token (
    fun (t:token_t):opt[ast_t] =>
      match t with
        | T_num n => Some (E_const n)
        | _ => None[ast_t]
      endmatch
  );

//Identifiers
val ident:parser[token_t, ast_t] =
  token (
    fun (t:token_t):opt[ast_t] =>
      match t with
        | T_ident s => Some (E_var s)
        | _ => None[ast_t]
  );

//Addition, subtraction operators
val addop:parser[token_t, ast_t -> ast_t -> ast_t] =
  token (
    fun (t:token_t):opt[ast_t -> ast_t -> ast_t] =>
      match t with
        | T_plus => Some (fun (e1:ast_t)(e2:ast_t):ast_t => E_add (e1, e2))
        | T_minus => Some (fun (e1:ast_t)(e2:ast_t):ast_t => E_sub (e1, e2))
        | _ => None[ast_t -> ast_t -> ast_t]
	endmatch
  );

//Multiplication, division operators
val mulop:parser[token_t, ast_t -> ast_t -> ast_t] =
  token (
    fun (t:token_t):opt[ast_t -> ast_t -> ast_t] =>
      match t with
        | T_star => Some (fun (e1:ast_t)(e2:ast_t):ast_t => E_mul (e1, e2))
        | T_slash => Some (fun (e1:ast_t)(e2:ast_t):ast_t => E_div (e1, e2))
        | _ => None[ast_t -> ast_t -> ast_t]
	endmatch
  );

//A parser that feeds its result into another
fun givento[A, B, C] (p1:parser[A, B], p2:B -> parser[A, C]) : parser[A, C] =>
  fun (toks : list[A]) : parsed[A, C] =>
     match p1 toks with
      | Returns (r1, toks1) => p2 r1 toks1
      | #Parse_failed => Parse_failed[A, C]
     endmatch
    ;

//Build left-associative trees e.g. expr := term (op term)*
fun left_assoc[A, B] 
  (term : parser[A, B]) 
  (op : parser[A, B -> B-> B]) : parser[A, B] =
{
  fun sequence (t1:B) : parser [A, B] =
  {
    return (op &~ term >=~ (fun (f:B -> B -> B, t2:B) => f t1 t2) >>=~ sequence of (B)) |~ (empty[A, B] t1);
  }

  return (term >>=~ sequence);
}

//Opening paren
var open_paren : parser[token_t, unit] =
  token (fun (tok : token_t) : opt[unit] =>
  match tok with
  | #T_lparen => Some (())
  | _ => None[unit]
  endmatch)
  ;

//Closing paren
var close_paren : parser[token_t, unit] =
  token (fun (tok : token_t) : opt[unit] =>
  match tok with
  | #T_rparen => Some (())
  | _ => None[unit]
  endmatch)
  ;

//Semi-colon
var semi : parser[token_t, unit] =
  token (fun (tok : token_t) : opt[unit] =>
  match tok with
  | #T_semicolon => Some (())
  | _ => None[unit]
  endmatch)
  ;

//Equals sign
var equals : parser[token_t, unit] =
  token (fun (tok : token_t) : opt[unit] =>
  match tok with
  | #T_equal => Some (())
  | _ => None[unit]
  endmatch)
  ;

//A language of arithmetic expressions
/*
expr_list :=
  | expr (';' expr)*
  ;
expr :=
  | identifier '=' expr
  | term (['+'|'-'] term)*
  ;
term :=
  | fact (['*'|'/'] fact)*
  ;
fact :=
  | num
  | identifier
  | '( expr ')
 */

//expr_list := expr (';' expr)*
var expr_list : parser[token_t, list[ast_t]] =
  (((expr &~ 
    zero_or_more(
       (semi &~ expr) >=~ (fun (p:(unit * ast_t)) : ast_t => p.1))
   ) >=~  (fun (p:ast_t * list[ast_t]):list[ast_t] => Cons (p.0,p.1))) 
   |~ empty[token_t, list[ast_t]] (list[ast_t]()))
  ;

//expr :=
//| bind
//| term (['+'|'-'] term)*
//;
fun expr (toks : list[token_t]) : parsed[token_t, ast_t] =>
  (bind |~ left_assoc[token_t, ast_t] term addop) toks
  ;

//bind := identifier '=' expr
var bind : parser[token_t, ast_t] =
   (((ident &~ equals) >=~ (fun (p:ast_t * unit) : ast_t => p.0)) &~ expr) >=~ 
   (fun (p : ast_t * ast_t) : ast_t => 
      match p.0 with
      | E_var e => E_let (e, p.1)
      endmatch)
  ;

//term := fact (['*'|'/'] fact)*
var term : parser[token_t, ast_t] = left_assoc[token_t, ast_t] fact mulop ;

//fact :=
// | num
// | identifier
// | '( expr ')
// ;
fun fact (toks : list[token_t]) : parsed[token_t, ast_t] =>
  (num |~ ident |~ 
    ((open_paren &~ expr &~ close_paren) >=~ 
        (fun (p:(unit * ast_t), u:unit) : ast_t => p.1))
   ) toks
  ;

//A function to extract the result of a parse
fun accept[A, B] (result : parsed[A, B]) : opt[B] =>
  match result with
  | Returns (b, #Empty) => Some[B] (b)
  | #Parse_failed => None[B]
  endmatch
  ;

//A function to produce a list of tokens from a string
fun tokenize (s : string) : opt[list[token_t]] => 
  accept (lex (explode (s))) 
  ;

//A function to produce an AST from a list of tokens
fun parse_expr (s : string) : opt[ast_t] =>
  match tokenize s with
    | Some toks => accept (expr toks)
    | #None => None[ast_t]
  endmatch
  ;

//A function to produce a list of ASTs from a list of tokens
fun parse_expr_list (s : string) : opt[list[ast_t]] =>
  match tokenize s with
  | Some toks => accept (expr_list toks)
  | #None => None[list[ast_t]]
  endmatch
  ;

//assoc a l returns the value associated with key a in the list of
//pairs l.  That is, assoc a [ ...; (a,b); ...] = b if (a,b) is the
//leftmost binding of a in list l
fun assoc[A, B with Eq[A]] (x : A) (l : list[(A * B)]) : opt[B] =>
  match l with
    | #Empty => None[B]
    | Cons ((a, b), t) => if a == x then Some b else assoc x t
  endmatch
    ;

//Evaluate an expression in an environment
fun eval (env:&list[(string * double)]) (ast:ast_t): double =>
  match ast with 
    | E_const f => f
    | E_let (tag, e) => let v = eval env e in v
    /*...*/
   endmatch
  ;

//---

var p:parser[char,char] = char_ (char 'a');
var q:parser[char,char] = char_ (char 'b');

match *p $ explode "aab" with
 | Returns (v, remains)
     => println$ "Parse succeeded : v = \"" + str v + "\", remains = " + str remains;
 | _ => println $ "Parse failed";
endmatch
;
