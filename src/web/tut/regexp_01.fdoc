@title Basic Regexps
@h1 Basic RE2
Felix provides Google's RE2 engine for regular expressions.
The basic syntax and capabilities are a subset of Perl's PCRE,
only RE2 actually works correctly and performs well.
RE2 does not support backreferences.

@h2 Reference
<ul>
<li><a href="https://code.google.com/p/re2/">Google RE2</a></li>
<li><a href="/share/lib/std/strings/re2.flx">Felix RE2 binding</a></li>
<li><a href="/share/lib/rtl/re2/re2.h?cpp">Google re2.h header</a></li>
<li><a href="/share/lib/std/strings/regdef.flx">Felix regular definition library</a></li>
<li><a href="/share/lib/grammar/regdefs.flxh">Felix regular definition grammar</a></li>
<li><a href="http://xkcd.com/208/">Obligatory XKCD</a></li>
<li><a href="http://xkcd.com/1313/">Obligatory XKCD</a></li>
</ul>

@h2 Compiling a regexp.
A regexp can be compiled with the {RE2} function.
@felix
var r = RE2(" *([A-Za-z_][A-Za-z0-9]*).*");
@
@h2 Simple {Match}ing
Matching is done with the {Match} function:
@felix
var line = "Hello World";
var maybe_subgroups = Match (r, line);
@
Please note, {Match} only supports a complete match.
There's no searching or partial matching. Instead,
just use repeated wildcards as shown.
@h2 Checking {Match} results.
The best way to check the result of a {Match} is
with a <a href="pattern_index.fdoc">pattern match</a>
as follows:
@felix
match maybe_subgroups with
| None => println$ "No match";
| Some ?a =>
  println$ "Matched " + a.1;
endmatch;
@expect
Matched Hello
@
@h2 Supported Syntax.
See <a href="http://code.google.com/p/re2/wiki/Syntax">RE2 syntax.</a>
@h1 Regular definitions.
Regular expressions are quoting hell. Luckily Felix provides a
solution: regular definitions:
@felix
begin
  regdef lower = charset "abcdefghijklmnopqrstuvwxyz";
  regdef upper = charset "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  regdef digit = charset "0123456789";
  regdef alpha = upper | lower;
  regdef cid0 = alpha | "_";
  regdef cid1 = cid0 | digit;
  regdef cid = cid0 cid1 *;
  regdef space = " ";
  regdef white = space +;
  regdef integer = digit+;
@
These are some basic definitions. Note that {regdef} introduces a new
syntax corresponding with the notation usually used for 
regular expressions.

This is called a DSSL or Domain Specific Sub-Language. Its not a DSL,
because that's a complete new language, rather the <em>sub</em> suggests
its an extension of normal Felix. The extension is written entirely
in user space.

Now to use these definitions:
@felix
// match an assignment statement
  regdef sassign = 
    white? "var" white? 
    group (cid) white? "=" white? 
    (group (cid) | group (integer)) 
    white? ";" white?
  ;

  var rstr : string = sassign.Regdef::render;
  var ra = RE2 rstr;
  var result = Match (ra, " var a = b; ");
  match result with
    | None => 
      println$ "No match?";

    | Some ?groups => 
      if groups.2 != "" do
        println$ "Assigned " + groups.1 + " from variable " + groups.2;
      else
        println$ "Assigned " + groups.1 + " from integer" + groups.3;
      done;
  endmatch;
end
@expect
Assigned a from variable b
@
Note that the regdef kind of variable must be converted to a 
Perl regexp in a string form using the {render} function.

