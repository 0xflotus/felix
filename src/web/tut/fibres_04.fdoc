@h1 Futures.
Felix uses fibres and channels to provide futures.
@felix
include "std/control/future";

var x = future { 42 };
println$ x.get;

// More nasty test.

var ch = mk_schannel[int]();
var y = future { var k = read ch; return k; };
spawn_fthread { write (ch, 77); };
println$ y.get;

println$ #x, #y;
@
The argument of a future is function accepting unit argument.
The function calculates the value of the future.
The evaluation may occur any time between the construction
of the future and its first use. If the future hasn't been
calculated, or the calculation is incomplete, the program
stalls at the use point until the future is evaluated.

The value of a future is cached, so the evaluation is never
performed more than once.

Futures allow a program to request an asynchronous I/O transfer
and then continue on concurrently with the transfer, until
the results are required.

You can use either the {#x} or {x.get} notation to fetch
the value of a future.

The function to be evaluated is scheduled as a fibre
which writes its result into a hidden variable and
sets a flag signalling completion.

