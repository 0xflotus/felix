
@h1 Variables
Felix provides three kinds of variables, {var}, {fun} and {val}.
@felix
var a = 1;
fun f => a;
val l = a;
++a;

println$ a,l,f;
@
A {var} is a storage location, or <em>object</em> 
containing a value. A {var} is addressable and mutable, its value is stored 
when control passes through its initialiser, or assignment. We say the 
assignment does <em>eager</em> evaluation.
@p
A {fun} is a function with no arguments which returns the current
value of its initialiser on every use. If the initialiser depends
on a {var}, the value will change as the {var} changes. This is 
called <em>lazy</em> evaluation. Usually, the initialiser
simply replaces the variable name. This is called <em>substitution</em>
or <em>inlining</em>.
@p
A {val} is a named expression, it is neither addressable nor mutable,
and must be initialised. Its value is that of its initialiser at
the time of evaluation. Vals can be evaluated eagerly like a {var},
but they may also be evaluated lazily, at the time of use
like a {fun}.
@p
The value represented by a {val} which has an initialiser depending
on a variable, directly by name or indirectly by some other means,
is not precisely specified, and we call this <em>indeterminate</em>
evaluation.
@p
The primary motivation for using {val}s is to support superior
optimisation. The compiler can choose either eager or lazy evaluation
depending on what seems to be most efficient. If the number of uses
of the {val} is low, lazy evaluation is usally faster.
@p
Felix provides one more kind of variable the {ref}. This is just a magical
pointer that is dereferenced automatically on every use, saving 
typing at least one {*} and possibly some parentheses. The initialiser
for a {ref} must be a variable.
@felix
var b = 1;
ref r <- b;
val pb = &b;
++b;
println$ b,r,*pb;
@
The primary use for {ref} is for function parameters.
