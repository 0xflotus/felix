@h1 Basic Data types
To get moving we give some basic data types:
@pre
  Type        Example Values
  ---------------------------------------
  int         1234, 0, -24
  double      12.34,  -2.0e2, 7.6e-2, 0.0
  string      "hello", 'world'
  char        char 'x', char 32
@
Note that there are no {char} literals, instead the char constructor takes
a string and provides the first character (if there is one) or the {nul}
character if the string is empty.

@h1 Type aliases
In Felix you can introduce an alias for a type:
@felix
typedef myint = int;
typedef int_pair = int * int;
@

@h1 Tuples
We can combine several values in a comma separated list to form tuple.
@felix
  1,2.9,"Hello"
@
The type of this value is:
@felix
  int * double * string
@
You can retrive a value from a tuple with a integral literal:
@felix
  val x = 1,2.9,"Hello";
  println x.0; // 1
  println x.1; // 2.9
  println x.2; // "Hello"
@
Note the field numbers are zero origin in keeping with C conventions.
There are no tuples with one component. 
@h2 Unit
However, there is a tuple with no components with a single unique value:
@felix
  ()
@
the type of which is called {unit} type and can also
be designated by {1}.


@h2 Records
There is another aggregate similar to a tuple except the fields are named:
@felix
  val x = (a=1, b=2.9, c="Hello");
  val y = x;
  println x.a + y.a;
  println x.b + y.b;
  println x.c + y.c;
@
The type of these records are given by:
@felix
  (a:int, b:double, c:string)
@
Records can have a any number of components, including 1 and 0.
The record type with zero components is identified with the tuple
with no components, namely {unit}.

