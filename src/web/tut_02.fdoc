@h1 Simple function definitions
You can define simple calculations easily. We'll
use a classic example:
@felix
fun square (x:int) => x * x;
write$ stdout, "Input number: "; fflush stdout;
val result = readln$ stdin;
val cleaned_result = strip result;
val v = int cleaned_result;
val v2 = square v;
println$ "Square of " + str v + " is " + str v2;
@
Here:
<ul>
<li> The {fun} binder introduces the function {square}.</li>
<li> {square} accepts a single argument of type {int}.</li>
<li> The operator {*} is used for multiplication.</li>
<li> {square} returns the product of its argument with itself.</li>
<li> The type of value returned by {square} is deduced by the compiler, 
that type will be {int} because multiplying an {int} by another {int}
yields an {int}. </li>
<li> The type {int} can also be used as a function to convert a {string} 
containing only digits to an {int}.</li>
<li>The function {str} can be used to convert an {int} to a string.</li>
</ul>

There is a rule for functions: 
<blockquote><em>
A function introduced by
a {fun} binder is not allowed to have any side effects.
</em></blockquote>

The compiler does not enforce this rule, but it does take
advantage of it when optimising your code. 

