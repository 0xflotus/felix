@h1 Special Things
This section contains miscellaneous things that should be documented but haven't
yet been put in an appropriate place, or, for which there is no appropriate
place, at least yet.

@h2 Apply function
Normally, you can only expect:
@felix
f x
@
to work when f is a function. However if you write a function:
@felix
fun apply (x:string, y:string) => x + y;
@
then you can write:
@felix
h := "Hello";
sp := " ";
world := "World";
println$ h sp world;
@
Applying a string to another string is now defined by the {apply} function.
We have turned {string} into an <em>applicative type</em>.


@h2 Printf style formatting
You can use a special notation:
@felix
println$ f"Loaded text file %S, len=%d" (fname, txt.len.int);
@
to get {printf} style formatting. The {f".."} string here
is actually a function. Felix supports a substantial set of
the usual printf codes. Underneath it uses {vsprintf} to do the
formatting. However it is fully typesafe. Only literal strings
can be used.

Here is a complete list of supported format type codes:
@pre
  Code       Arg type
  ------------------------
  hhd        tiny
  hhi        tiny
  hho        utiny
  hhx        utiny
  hhX        utiny

  hd         short
  hi         short
  hu         ushort
  ho         ushort
  hx         ushort
  hX         ushort

  d          int
  i          int
  u          uint
  o          uint
  x          uint
  X          uint

  ld         long
  li         long
  lu         ulong
  lo         ulong
  lx         ulong
  lX         ulong

  lld        vlong
  lli        vlong
  llu        uvlong
  llo        uvlong
  llx        uvlong
  llX        uvlong

  zd         ssize
  zi         ssize
  zu         size
  zo         size
  zx         size
  zX         size

  jd         intmax
  ji         intmax
  ju         uintmax
  jo         uintmax
  jx         uintmax
  jX         uintmax


  td         ptrdiff
  ti         ptrdiff
  tu         uptrdiff
  to         uptrdiff
  tx         uptrdiff
  tX         uptrdiff

  e          double
  E          double
  f          double
  F          double
  g          double
  G          double
  a          double
  A          double

  Le         ldouble
  LE         ldouble
  Lf         ldouble
  LF         ldouble
  Lg         ldouble
  LG         ldouble
  La         ldouble
  LA         ldouble

  c          int

  S          string
  s          &char
  p          address
  P          address

@
@h2 Identifiers
Felix allows single quote marks in identifiers, this is primarily to allow mathematics style
trailing primes:
@felix
id, id', i'dent = 1,2,3
@
The first character may not be a prime. Care is required comprehending the lexicology
because the single quote also introduces strings. In particular special Python
style strings with prefix letters like {r'hello'} have precedence over primes.

Felix also allows identifier which start with a slosh and continue with upper or lower
case letters, where letter means ASCII A-Za-z, and not unicode. This is to support
TeX, LaTeX, AMSTeX symbols. Digits and other characters aren't included.
The Felix webserver will typeset these symbols
using MathJax.
@felix
val \delta = 1;
@
Although Felix accepts all such symbols as identifiers, MathJax only typesets 
a subset of standard TeX symbols. The subset is rather large though. If you use
an unsupported name, the display will not come out right: it will probably be
shown in a box.


@h2 def
Felix has a special constuction to allow multiple assignments from a tuple:
@felix
var i: int;
def i, var j, val k = 1,2,3;
@
Here {def} is used to specify that {i} is an existing variable to be
assigned to, {j} is a new variable, and {k} is a value name.

@h2 Control Structures
Should go elsewhere ..

@h2 goto
Jumps .. 

@h2 if

Conditional

@h2 Match

Procedural match

@h2 Loops
Labels, break, conditinue, redo

@h2 while
While loop

@h2 for

Basic for loop

@h2 Call, return

Yep.

@h2 Yield

Fun stuff

@h2
Exceptions

@h2 Comments
Felix has both C and C++ style comments:
@felix
// Comments containing \( \delta \) stuff
/* Another \({\Bbb R}\Big(\sigma^{n}_{i=1}\sin\ x\) comment /* C comments */ can be nested */
comment """ and you can have string $${\Bbb R}\Big(\sigma^{n}_{i=1}\sin\ x$$ comments too""";

@
