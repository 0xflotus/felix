@h1 Regular Expressions
Felix current provides two regular expression libraries: TRE and RE2 from Google.

@h2 RE2
Module <a href='/lib/std/re2.flx'>Re2</a> is binding 
for <a href='http://code.google.com/p/re2/'>Googles regex library</a>.
Please consult Google for details.

The core functionality is easy to use:
@felix
val s = System::argv 1;
val re = RE2("x(\\d*)");
var groups : array[StringPiece,2];
var nmatch = 2;
val res = Match(re,StringPiece(s),0,ANCHOR_BOTH,carray (&groups),nmatch);
if res do
  println$ "Matched " + s + ", n="+ str groups.[1];
else
  println$ "No match " + s;
done
@
but a bit longwinded. {StringPiece} is a view of part of a {string}. 
A quick way to just check for a match:
@felix
println$ s in re;
@
{RE2} uses Perl regexp without back references. To avoid
having to write {\\} all the time you can use Python style
raw strings:
@felix
r"x(\d)" == "x(\\d)"
@

@h2 Reliable construction of regular expressions
Complicated regular expressions are very hard to get right. 
Languages copying Perl regexps without Perl's interpolation
and quoting arrangements are unsuitable for regular matching
jobs.

Felix provides two level of fix for this problem,
functional <a href="/lib/std/regdef.flx">combinators</a>
and syntactic sugar for them as 
<a href="/lib/grammar/regexps.flxh">regular definitions</a>.

@h3 Functional combinators
This method allows you to build a tree using the type and function:
@felix

  union regex =
  | Alts of list[regex]
  | Seqs of list[regex]
  | Rpt of regex * int * int
  | Charset of string
  | String of string
  | Group of regex
  | Perl of string
  ;
  fun render: regex -> string;
@
Here's an example:
@felix
open Regdef;
{
  var digit = Charset "9";
  val digits = Rpt (digit, 1, -1);
  var letter = Charset "x";
  var us = Regdef::String "_";
  var id = Seqs (list (
     Alts (list(us,letter)), 
     Rpt( 
       Alts(list(letter,digit,us)),0,-1)));
  println$ render id;
};
@
Note the {Regdef::String} is used because {String} is also the name
of a library module.

@h3 Regular Definitions
Regular definitions make it even easier:
@felix
var digit = regexp( charset "0123456789" );
regdef digits = digit+;
var letter = regexp ( perl "[A-Za-z]" );
var us = regexp "_";
regdef id = (us|letter)(letter|digit|us)*;
regdef pid = regexp (perl("[a-zA-Z][a-zA-Z_0-9]*"));
var r = RE2 (render id);
@
All the symbols here have type {regex} except the 
final {r}.

The {regdef} statement announces the assignment of a {regexp}
variable using the usual syntax for regexp formation without
requiring ugly quotation stuff. Of course you can also do calculations
using any Felix functional operations. 

The operator {perl} and function {render}
are basically opposites: {perl} converts a string with Perl style
regex code into a {regex} whereas {render} converts a {regex} into
a Perl string.

The {regexp} symbol is a <em>keyword</em> of ordinary Felix grammar,
which can be used in any ordinary Felix expression to switch 
syntax from Felix normal syntax into regular expression syntax. 

The {regex} symbol does the opposite: it is used in any regex grammar
expression to switch to Felix syntax.
