@h1 Callbacks
A typical use of a C function is for callbacks.
Unfortunately, C callbacks are universally ill-typed.
This can't be tolerated in Felix, and in this case
there's no way to "cast away" the problem.

Here's how callbacks work. A callback is a function
like this:
@felix
  void f(int x, void *client_data);
@
It is registered by a function like this:
@felix
  void register_callback(event e, void (*f_t)(int, void*), void *client_data);
@
Now, what we want to do here is use a felix function for the callback:
@felix
proc f(x:int){ println$ "Called back with " + str x; }
@
To do this we generate a C function:
@felix
  void wrap_f(int x, void *client_data)
  {
    f_t p = (f_t)client_data;
    p->call(x);
  }
@
This casts the {client_data} to a pointer to the C++ class
of the Felix function, then calls it with the proper arguments.
Now, to register it, something like this:
@felix
register_callback(event, wrap_f, (void*)(new f));
@
To generate the wrapper all you need to do is label
a function or procedure a callback:
@felix
callback f(x:int, f){ println$ "callback " + str x; }
@
Here's a complete example
@felix
callback fun f: int * f -> int;

fun g(x:int)=> x + x + 1;

print$ f(2, g); endl;

callback proc p: int * p;

proc q(x:int){ print x; endl; }

p(31,q);

typedef cf = int --> int;

proc h(y:cf, x:int) {
  print$ y x; endl;
}

body """
  int yyy(int x) { return x + 3; }
""";

const yyy: int --> int;

h(yyy,2);
@

