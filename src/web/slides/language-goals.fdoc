@slideshow
<hr/>
<p style="text-align:center; font-size:120%"> Felix Goals </center>
<hr/>
@slide
PERFORMANCE
<hr/>
@section
There's nothing more annoying than a slow program.
@section
It's time scripting languages achieved the performance of systems
programming languages.
@section
Or better.
@section
We want Felix to be as fast as C.
@section
Or faster!
@section
<hr/>
<em>Hyper-light speed performance &gt;= C</em>
<hr/>
@slide
CORRECTNESS and SAFETY
<hr/>
@section
There's no point writing a program that aborts with
an error.
@section
Or worse, a segfault (I'm too old to debug core dumps!)
@section
But there's one thing worse than either of these things.
@section
A result which appears correct but is actually wrong.
@section
We need a system it is easy to reason about.
@section
<hr/>
<em>Reasonable Programs</em>
<hr/>
@slide
EASE OF USE
<hr/>
@section
A language system needs to be easy to use.
@section
Otherwise programmers won't use it!
@section
It must be easy to write, with syntax
corresponding to ideas. 
@section
It should be reasonably brief...
@section
... but enough redundancy to
catch simple errors and create patterns.
@section
It must be easy to translate programs.
@section
This is one good reason scripting languages are
popular.
@section
Just run the script, no switches, no compilation
steps, makefiles, IDEs or complex build tools
required.
@section
And of course it must be easy to read and maintain!
@section
<hr/>
<em>Rapid Prototyping</em>
<hr/>
@slide
COMPATIBILITY
<hr/>
@section
A language system has to be compatible with existing code bases.
@section
This means easy binding to C and C++.
@section
The exemplar is unquestioned: C++ provides C compatibility
par excellance.
@section
Programmers learn new semantics and systems easily.
@section
But they're fixated on visual appearance.
@section
This is because visual pattern matching is the first
stage of appreciation of structure. Syntax matters!
<hr/>
@slide
REUSE and MODULARITY
<hr/>
@section
Bertrand Meyer's <em>Open/Closed Principle</em>
is the cornerstone of software methodology.
@section
It says modules must be closed in the sense of being
completed to the extent they can be used.
@section
But they must also be open for extension and improvement.
@section
Lack of reusability is the most important theoretical
and practical problem of modern programming.
<hr/>
@slide
ADAPTABILITY
<hr/>
@section
Software Systems need to work in many environments.
<ul>
@section
<li>Commerce</li>
@section
<li>Finance</li>
@section
<li>Education</li>
@section
<li>Research</li>
@section
<li>High Tech</li>
@section
<li>Games</li>
@section
<li>Networking</li>
@section
<li>OS Kernels</li>
</ul>
<hr/>
@section
The demands in each domain are different.
@section
Sometimes we need to be close  to the metal.
@section
Sometimes at a high level of abstraction.

@slide
SUMMARY of GOALS
<hr/>
<ul>
@section
<li>Hyperlight Performance</li>
@section
<li>Reasonable Programming</li>
@section
<li>Rapid Prototyping</li>
@section
<li>Compatibility</li>
@section
<li>Reusable Components</li>
@section
<li>Adaptability</li>
</ul>
<hr/>
@slide
ACHIEVING THE GOALS
<hr/>
Translate to C++ and compile down to binary.
<hr/>
@section
<em>Performance:</em> Let the C++ compiler do low level optimisation.
@section
<em>Correctness:</em> C++ type system provides extra security.
@section
<em>Compatibility and Reuse:</em> 
C++ compilers are readily available.

C++ supports a wide range of support tools,
including debuggers, profilers, static analysis.
@section
There's huge code base of C and C++ libraries
to leverage.
@section
<em>Reasoning:</em> Semantic specification in terms of generated code
is comprehensible to programmers.

@slide
ACHIEVING THE GOALS
<hr/>
Static Typing
<hr/>
@section
<em>Correctness:</em> Static typing provides early error detection.
@section
<em>Performance:</em> It enables sophisticated optimisations
at both the high and low level.
@section
<em>Ease of Use and Reuse: </em> It supports features such as overloading and
polymorphism which make it easier to remember functions names and
to write ones which can be resused in different contexts.
@section
The extra specification required is minimal in a well designed
language.

@slide
ACHIEVING THE GOALS
<hr/>
Structural Typing
<hr/>
@section
<em>Ease of Use: </em> Structural typing greatly reduces the need to name and remember
the name of each and every type in a program.
@section
Tuples
@felix
var x = "Hello", 42, 2.3;
var y : string * int * double = x;
println$ x;
println$ y.0,y.1,y.2;
@
@section
Arrays:
@felix
var x = "Hello", "World", "Welcome";
var y : string^3 = x;
println$ x;
for var i in 0 upto 2 do
  println$ y.i;
done
@
@section
Records:
@felix
var x = (greet="Hello", name="World", location="Oz");
var y = (greet:string, name:string, location:string) = x;
println$ x;
println$ y.greet, y.name, y.location;
@
@section
Objects:
@felix
var hithere = object (name:string, location: string) = {
  method fun get_greet() => "Hello";
  method fun get_name() => name;
  method fun get_location() => greet;
};
var world = hithere ("World", "Oz");
println$ world. get_greet(), world.get_name(), world.get_location();
@
@section
Functions:
@felix
var x = 
@section
Tuples, records, structurally typed objects, anonymous functions,
and other manifestations of structural typing reduce clutter
and enforce correctness just as well as nominal typing.
@section
If not better!

@slide
ACHIEVING THE GOALS
<hr/>
Polymorphism
<hr/>
@section
<em>Reuse:</em> Parametric polymorphism is the
best known technique for providing reusability.

@felix
  union list[T] = | Empty | Cons of T * list[T];

  // return option of first element in list satisfying predicate
  fun find[T] (pred:T -> bool) (xs:list[T]) : opt[T] =>
    match xs with
    | Empty => None[T]
    | Cons (?h,?t) => 
      if pred h then Some h 
      else find pred t 
      endif
    endmatch
  ;
@

@section
<em>Ease of Use: </em> Felix also provides
C++ style open overloading, this saves inventing
complicated names and enhances readbility.

@felix
fun sqr (x:int) => x * x;
fun sqr (x:double) => x * x;
println$ sqr 2, sqr 1.2;
@

@section
<em>Modularity: </em> Felix also provides
a compromise between parametric polymorphism
and overloading: type classes based on Haskell.

@section
Type classes treat functions as polymorphic and binding
time, but require type specific instances during
monomorphisation.

@felix
class Str [T] {
  virtual fun str: T -> string;
}
instance Str [dcomplex] {
  fun str (z:dcomplex) => str(real z) + "+" + str(imag z)+"i";
}
@
Type classes take more work to set up, but provide
excellent support for the open/closed principle by
delaying the requirement to provide instances for
specific types until they're required.

<em>Reasonable Programs:</em> Felix type classes
also support semantic specifications in the form
of axions, lemmas and theorems.

@felix
// equality: technically, equivalence relation
class Eq[t] {
  virtual fun == : t * t -> bool;
  virtual fun != (x:t,y:t):bool => not (x == y);

  axiom reflex(x:t): x == x;
  axiom sym(x:t, y:t): (x == y) == (y == x);
  axiom trans(x:t, y:t, z:t): x == y and y == z implies x == z;

  fun eq(x:t, y:t)=> x == y;
  fun ne(x:t, y:t)=> x != y;
}
@

<em>Compatibility:</em> Felix also provides
a limited kind of constrained polymorphism
which allows a type variable to be restricted to 
a specific set of types when used in a C binding. 

For example you can
restrict a binary operator to the set of integer types,
which simplifies overloads of C primitives.

@felix
typedef sints = typeset (tiny, short, int, long, vlong);
typedef uints = typeset (utiny, ushort, uint, ulong, uvlong);
fun add[T]: T * T -> T = "$1+$2";
@

