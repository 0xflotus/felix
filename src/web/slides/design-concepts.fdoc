@slideshow
FELIX CONCEPTS
<hr/>
@slide
FUNCTIONAL and IMPERATIVE
<hr/>
@section
Felix supports both functional and imperative programming
paradigms.
@section
With functional programmming correctness can be
easier to achieve.
@section
Some people find declarative specifications easier
to work with.
@section
With imperative programming, performance can
be easier to achieve.
@section
Some people find action based recipies easier to work with.
@section
Object based technologies are traditionally imperative.
@section
Felix provides strong support for both styles.

@slide
OBJECTS and VALUES
<hr/>
@section
Felix supports the functional concept of value and
the imperative concept of object.
@section
Named values can be declared by the {val} binder.
@felix
val one : int = 1; 
@
@section
Objects can be created by the {var} binder.
@felix
var i : int = 1;
@
@section
The key distinction is that objects have an address
which can be used to locate and perhaps modify a value
stored in an object.
@section
The address of an object is itself a value of pointer type.
@felix
var pi : &int = &i;
@
@section
Any value can be converted to an object by storing it
in a variable.
@felix
i = 22;
pi <- one;
@
@section
Values can be retrieved from pointer with the 
dereference operator.
@felix
val k = *pi;
@
@section
Objects can also be explicitly created on the heap
with the {new} operator, which returns a pointer.
@felix
val pj = new 66;
@
@slide
EAGER and LAZY EVALUATION
<hr/>
@section
Felix provides three evaluation strategies.
@section
Eager evaluation is familiar to most programmers.
@section
When calling a function, the arguments are evaluated
first, the results stored in parameters, and then
the function is called.
@section
Lazy evaluation is also familiar though less
understood by many programmers. 
@section
In the C construction
@c++
d == 0.0 ? 0.0 : 1.0 / d
@
it is understood the check for zero is evaluated
first and the division executed only if {d} is
not zero. This is lazy evaluation.
@section
Lazy evaluation is sometimes termed <em>call-by-name</em>. 
@section
However despite expectations, almost all program code
is lazily evaluated. Defering a computation until control
flows through it is lazy evaluation. 
@section
So actually almost all of C programming is lazy, not eager,
despite the incorrect belief of programmers that C uses
eager evaluation.
@slide
LAZY EVALUATION
<hr/>
@section
Lazy evaluation can be achieved by two techniques.
The most obvious is substitution: just replace the parameter
in the function body with the argument expression.
@section
This is really fast if the parameter is only used once since
it avoids overheads and allows further optimisations.
@section
It is generally achieved by inlining the function body
as well as replacing the parameters with their
arguments.
@section
The other way to achive lazy evaluation is required when
the function body is not inlined. 
@section
In that case a closure
is created which captures the computation the argument
expression represents, and that is passed to the function.
@section
The function evaluates the expression on demand when
control passes through the referencing code by actually
invoking the closure.
@section
Closures are expensive: they use up storage, require
heap allocation, and require the overhead of function
calling.

@slide
INDETERMINATE EVALUATION
<hr/>
@section
Felix is an unusual language because it provides three
evaluation strategies. 
@section
We have discussed eager and lazy evaluation.
@section
The third strategy is called <em>indeterminate evaluation</em>.
@section
This just means the compiler can choose either eager or lazy!
@section
Indeterminate evaluation allows the compiler to replace parameters
with arguments when a function is inlined.
@section
or
@section
the compiler can calculate the argument eagerly and store it
in a variable when the function is not inlined or the parameter
is used many times in the function.
@section
Other languages mandate either eager or lazy evaluation and
can switch implementations only when the compiler can prove
that the result will not differ from what the semantic
rules require.
@section
Felix allows the programmer to explicitly indicate that
this is the case so that the most efficient implementation
can be chosen without needing a mind-reading compiler.
@section
Indeterminate evaluation is the default, so by default
programs go fast!

@slide
EXTENSIBILITY.
<hr/>
@section
Most programming systems consist of:
@section
A language translator.
@section
A library.
@section
An operating environment.
@section
Extension of capabilities is usually achieved by adding
new types and functions to the library.
@section
Felix does more. 
@section.
Felix allows the programmer to add new syntax as well.
@section
This allows the programmer to design sub-languages suitable
for particular domains: Domain Specific Sub-Languages (DSSLs).
@section
In fact, what you think of as the Felix language is actually
defined in user space.
@section
The grammar is part of the library.
@section
A good example of this is the way regular definitions
are introduced. 
@section
The library support is enhanced by adding syntax specifically
to allow regular definitions:
@felix
regdef letter = charset "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
regdef digit = charset "0123456789";
regdef id1 = letter | "_";
regdef id2 = id1 | digit | "-" | "'";
regdef id = id1 id2*;
@
@section
@section
