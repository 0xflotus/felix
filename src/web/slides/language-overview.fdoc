@slideshow
<hr/>
<p style="text-align:center; font-size:120%"> Felix Slideshow </center>
<hr/>
@slide
Simple printing.
<hr/>
@section
The @{println} command prints some data to standard output followed by a newline.
@felix
println$ 21;
println$ "Hi There";
@
@section
Two or more values can be printed too:
@felix
println$ "Hello",42;
@pre
(Hello,42)
@slide
You can use {+} to concatenate two strings.
@felix
println$ "Hello " + "World";
@pre
Hello World
@section
And you can use the @{str} function to convert most
data to a string:
@felix
println$ "Hello " + str 42;
@pre
Hello 42
@slide
Felix supports strings in Python style.
@section
With double quotes:
@felix
println$ "Double Quotes";
@
@section
or with single quotes:
@felix
println$ 'Single Quotes';
@
a string must be contained within a single line.
@section
With tripled double quotes:
@felix
println$ """
Tripled
Double
Quotes""";
@
or with tripled single quotes:
@felix
println$ '''Tripled
Single
Quotes
can span
lines''';
@

@slide
Variables.
<hr/>
@section
You can store the result of a calculation in a variable:
@felix
var x = "hello " + str 42;
println$ x;
@pre
hello 42
@section
If you like you can specify the type of a variable:
@felix
var i : int = 42;
var x : string = "hello " + str i;
println$ x;
@pre
hello 42
@section
Variables do not need to be initialised,
in this case the type is required. The variable will initially
have C++ default value for the type, if there is one.
@felix
var s : string;          // initially ""
var i : int;             // not initialised
@
Using an uninitialised value is an error. Using
a default initialised value is not, but it is bad
practice.
@section
The value stored in a variable can be modified, or set for the first time, by assignment:
@felix
var i = 42;
i = 67;
println$ 67;
@pre
67
@
@slide
Pointers.
<hr/>
@section
You can take the address of a variable with prefix operator {&} and use
it to get or set the value stored in it.  
The value of the address is called a pointer.
@felix
var x = 42;
var px = &x;
px <- 43;          // store 43 where px points (at x)
println$ x;        // modified value stored in x
println$ *px;      // get value stored at px
@pre
43
43
@section
If the original variable had type @{T} then
a pointer to a variable of that type has type {&T},
pronounced "pointer to T".
@felix
var x = 42;
var px : &int = &x;
println$ *px;
@section
Assignment to a variable @{x} 
is equivalent to storing at the address of @{x}:
@felix
var x = 42;           // initial value
x = 43;               // assignment to x
&x <- 44;             // assignment via pointer
@
@section
In fact assignment with {=} is just syntactic sugar
for storing at the address of a variable.
@slide
Everyday Types.
<hr/>
@section
Here are some types you will use every day:
@felix
var i  : int     = 1;       // C int
var x  : double = 4.2;      // C float double
var ch : char   = char "H"; // C++ char
var ch : char   = char 63;  // C++ char 'A'
var s  : string  = "Hi";    // C++ string
@section
If you're a mathematican you may like to get complicated:
@felix
var cart : dcomplex = complex (4.2, 5.3);  // C++ complex<double>
var pole : dcomplex = polar   (1,0, 0.5);  // C++ complex<double>
@
@slide
Tuples.
<hr/>
@section
Felix builds aggregates of values called tuples automatically:
@felix
var x = "Hello",42;
println$ x . 0, x . 1;
@section
As you can see you can use zero origin integer literals to extract
a tuple component. We will see later you can also use pattern matching
to do this.
@section
A tuple is a cartesian product and the type uses product notation:
@felix
var x : string * int = "Hello", 42;
println$ x;
@pre
("Hello",42)
@slide
Records.
<hr/>
@section
A record is basically a tuple with named components:
@felix
var a = (x = 1.1, y = 2.2);
println$ a.x, a.y;
@pre 
(1.1, 2.2)
@
so you can access the components by name instead of number.
@section
A record is a cartesian product too, but the type
is given like this:
@felix
var a : (x:double, y:double) = (x = 1.1, y = 2.2);
@section
@slide
Structs
<hr/>
@section
A struct is yet another kind of cartesian product!
A struct is a named record type:
@felix
struct X { a:int; b:int; };
var x =  X(1,2);
println$ x.a, x.b;
@section
Nominal, or named, typing, differs from structural
typing in that you have to define the type and name
it in order to use it. 
@section
Two struct definitions name
two distinct types, even if they have the same
component names and types. 
@section
Structs can be initialised using a tuple consisting
of components of the same types, in the same order,
as in the struct.
@section
@slide
Arrays
<hr/>
@section
A array seems to be yet another kind of cartesian
product:
@felix
var a = 1,2,3,4;
println$ a;
println$ a.0, a.2;
@pre
(1,2,3,4)
(1,3)
@section
But wait! Isn't that just a tuple with all the
component values the same type?
@section
Indeed it is! However there are two shorthand notations
for the type:
@felix
var a: int * int * int * int = 1,2,3,4;
var b: int ^ 4 = 1,2,3,4;
var c: array[int,4] = 1,2,3,4;
@section
The symbol {^} represents exponentiation.
@section
So an array of 4 @{int}s is just @{int} raised
to the power of 4. 
@section
This is just your usual index law!
@section
However there is some magic:
@felix
var a = 1,2,3,4;
var i = 2;
println$ a . i;
@pre
3
@section
Unlike tuples, arrays can be indexed by expressions.
@section
We can do this because all the components are the same
type.
@slide
Functions.
<hr/>
@section
Simple functions are easy to write:
@felix
fun twice (x:int) => x + x;
println$ twice 42;
@pre
84
@section
As well as the mathematical prefix notation,
function can be called in a postfix style:
@felix
println$ 42.twice;
@
This resembles OO notation, but it isnt.
@section
Here is a function with a tuple argument:
@felix
fun sum (x:int, y:int) => x + y;
println$ sum (1,2);
println$ (1,2).sum;
@pre
3
3
@section
Whilst we sometimes say the function has two
arguments, its a white lie. The function has
a single argument that happens to be a tuple.
@section
@slide
Function values: Closures
<hr/>
@section
Functions can be put in variables. The value
stored there is called a closure:
@felix
var f : int * int -> int = 
  fun (x:int, y:int) => x * y + 1
;
var a = 1,2;
println$ f a;
@pre
1
@section
This example shows a function type {int*int->int}, 
and also an  anonymous function, sometimes called 
a <em>lambda</em>, which is assigned to the variable @{f}.
@section
Then, the closure @{f} is applied to the argument @{a} which
is a tuple of type {int*int}. Of course the result is 
of type @{int}.
@section
@section
@slide
Projection functions
<hr/>
@section
Did you guess you can do this too?
@felix
var tup = 1,2;
println$ 0 tup, 1 tup;           // tuple components

var rec = (a=1, b=2);
println$ a rec, b rec;           // record components

struct S { a:int; b:int; }; 
var s = S(1,2); 
println$ a s, b s;               // struct components

var arr = 1,2,3,4;
var i = 2;
println$ i arr;                  // array components
@section
@section
Now remember, operator dot {.} just provides reverse
application.
@section
So when we showed you before how to
access the components of a product type, we lied again.
@section
The field names are actually <em>projection functions</em> as
shown, and the reverse notation using dot is syntactic
sugar!
@section
@section
@section

