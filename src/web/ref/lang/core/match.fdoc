@h1 Match

{match} is used for pattern matching.

@h2 Pattern Matching Values

A simple version of pattern matching compares an input to set of likely
candidates and selects a result based on that:

@felix
fun how_fast(verb:string) =>
    match verb with
        | "run" => "fast"
        | "walk" => "slow"
        | "crawl" => "very slow"
        | "sleep" => "stationary"
        | _ => verb+"ing speed" 
    endmatch
;
 
println$ "Walking is "+how_fast("walk"); // Walking is slow
println$ "Glurping is "+how_fast("glurp"); // Glurping is glurping speed
@

This is similar to the {switch} statement in other languages.

@h2 Pattern Matching on Tuples

Pattern matching can be used to pattern match on tuples.  For example:

... TODO! ...

@h2 Pattern Matching on Unions

{match} is used in conjunction with unions.  For example:

@felix
union Z = 
  | Cart of double * double // cartesian complex x+iy
  | Polar of double * double // polar complex re^(i\theta)
;

fun str (z:Z) => match z with
  | Cart (?x,?y) => str x + "+"+str y+"i"
  | Polar (?r,?theta) => str r + "e^"+str theta+"i"
  endmatch
;
@

For more examples, look at the docs for <a href="union.fdoc">Unions</a>.

@h2 Iteration Using Match

A variation of {match} can be used to unpack successive elements in a stream
or a sequence:

@felix
val pairs = ((1,2),(2,3),(3,4));
match ?a, ?b in pairs do
    println$ (a+b);
done
@

@h2 See also

<ul>
<li><a href="union.fdoc">Unions</a></li>
</ul>
