@h1 Procedures

Procedures are a subroutine that has no return value.  Procedures are defined in a similar
manner to functions but they use the keyword {proc} and do not declare any return value.

@felix
proc greet(who:string) = {
   println$ "Hello, "+who+"!";
}
proc hello_world = {
    greet "World";
}

hello_world; // Prints Hello, World!
@

Procedures support currying as well; in this case the final return value is a procedure but
the intermediate ones are actually a function:

@felix
proc greet(how:string)(who:string) = {
   println$ how+", "+who+"!";
}
// These are both functions returning a procedure that takes a string as a parameter
val hello = greet("Hello"); 
val goodbye = greet("Bye, bye");
goodbye "Love"; // Bye, bye, Love!
goodbye "Happiness"; // Byte, bye, Happiness!
hello "Loneliness"; // Hello, Loneliness!
@

@h2 Anonymous Procedure Expressions

When you need to pass a procedure to a function you can do so without giving it
a name.  This is an anonymous procedure:

@felix
proc do_ba(a:unit->void, b:unit->void) = {
    b;
    a;
}

do_ba({print "A";}, {print "B";}); // Prints BA
endl;
@

Using anonymous procedures can allow you to create your own control flow structures
with relatively "native looking" syntax:

@felix
proc unless(cond:bool)(action:unit->void) = {
    if cond==false do action; done
}

unless (2+2==5) { println$ "Math OK."; };
@

Note that the syntax in these cases is not as flexible as the built-in control flow
stuff; you need a semicolon after the call, the operator precedence isn't quite ideal,
and you cannot use {do}/{done} as is normally used for built-in control flow.

Note that it is possible to extend the felix parser to implement new kinds of control
flow and domain-specific languages.  However, doing so is rather complex; this approach
is simpler and suitable for most DSLs.

@h2 Procedures as Coroutines or Fibers

Procedures allocate their local variables on the heap rather than the stack.  This
allows them to operate as coroutines or fibers, releasing control of the OS thread
when they are not actively running.

The Fibres class handles the creation of fibres as a network of interacting
procedures.

... TODO ...

@h2 C++ Procedures

You can also define a procedure using C++ code.  This is part of how you
integrate your felix code with existing C++ code.  For example:

@felix
proc print_int : int = "printf("%d", $1);";
@

There's a shortcut for procedures that already exist in C++ with the same
name and signature; just leave off the body:

@felix
// Version printf that takes an int and a c string
proc printf : +char * int; // usage: printf(c"%d", 123);
// puts
proc puts : +char; // usage: puts c"whatever";
// exit
proc exit : int; // usage: exit 1;
@

@h2 See also

<ul>
<li><a href="subroutines.fdoc">Subroutines</a></li>
<li><a href="fun.fdoc">Functions</a></li>
<li><a href="proc.fdoc">Procedures</a></li>
<li><a href="calls.fdoc">Function Calls</a></li>
</ul>

