@h1 Unions

A {union} type describes a set of alternatives.  A simple union is similar to an enum in other languages.
The {match} operator is used to detect that alternative that was selected:

@felix
union Color =
    | Red
    | Green
    | Blue
;

fun to_int(c:Color) => match c with
    | Red => 0xFF0000
    | Green => 0x00FF00
    | Blue => 0x0000FF
    endmatch
;
@

Union alternatives can have a value associated with them; the type of value is declared
when the union is declared.  The {match} operator extracts those values based on
the selected alternative:

@felix
union Z = 
  | Cart of double * double // cartesian complex x+iy
  | Polar of double * double // polar complex re^(i\theta)
;

fun str (z:Z) => match z with
  | Cart (?x,?y) => str x + "+"+str y+"i"
  | Polar (?r,?theta) => str r + "e^"+str theta+"i"
  endmatch
;
@
 

