@h1 Classes

A felix class is a collection of types and subroutines.  It provides
a seperate scope for the names and also allows common type parameters
to be shared within that collection.

Unless a class is declared "open" or opened using the "open" keyword, names 
inside a class must be prefixed with the class name plus the :: scope operator
to refer to those names.

This is similar to namespaces in C++, or when type parameters are used it is
similar to a template in C++ which has only static members.

To declare a class, use:

@felix
class Foo {
  fun bar(s:string) => "Bar "+s;
}
@

When something is declared inside the class it can be used directly from within that class
with no qualifiers.

To specify a member of a class from outside the class, add the class name plus 
{::} as a prefix:

@felix
class Foo {
  fun bar(s:string) => "Bar "+s;
}

println$ Foo::bar("none!"); // Bar none!
@

You can also put all the names in a class in your search path using the
{open} keyword:

@felix
class Foo {
  fun bar(s:string) => "Bar "+s;
}

open Foo;
println$ bar("none!"); // Bar none!
@

You can also declare the class as {open} right when you declare it:

@felix
open class Foo {
  fun bar(s:string) => "Bar "+s;
}
println$ bar("none!"); // Bar none!
@

Names in the class may be declared private, in which case they will not
be visible from outside the class:

@felix
class Bla {
  private val secret_key = "drowssap";
}
println$ Bla::secretkey;  // Error!
@

A class may use {open} to add other classes to its search path; this will not
add those other classes to the search path of any other code that uses {open}
on that class.

A class can also use {inherit} to add names into its scope from another class; 
in this case names are treated as if they were defined in that class.

@h2 Felix Classes Versus Object-Oriented Classes

The use of the term "class" here may seem confusing for those accustomed to the
use of the same word in object oriented languages.

In Felix, a class with type parameters is a namespace and a collection of re-usable 
functions, types, and procedures that can be applied to different types of objects.

In object-oriented programming a class is a namespace and a type plus a bunch 
of methods, functions, and procedures that apply mainly to objects of that type.

Probably the most important difference is that a Felix class is not a type of 
object - it cannot be instantiated into an object and doesn't have any methods or
instance variables.  All its members are essentially "static" members (to use the Java/C++ term).



