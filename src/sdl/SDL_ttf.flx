//Module        : SDL_ttf_h
//Timestamp     : 2006/1/8 3:36:0 UTC
//Timestamp     : 2006/1/8 14:36:0 (local)
//Raw Header    : /usr/include/SDL/SDL_ttf.h
//Preprocessor  : gcc -E
//Input file: sdl.flxcc.i
//Flxcc Control : sdl.flxcc
//Felix Version : 1.1.2_rc1

//#define TTF_GetError  SDL_GetError
//#define TTF_SetError  SDL_SetError
//#define TTF_RenderUNICODE(font, text, fg, bg) \
//#define TTF_RenderUTF8(font, text, fg, bg)    \
//#define TTF_RenderText(font, text, fg, bg)    \
//#define TTF_STYLE_UNDERLINE   0x04
//#define TTF_STYLE_ITALIC      0x02
//#define TTF_STYLE_BOLD                0x01
//#define TTF_STYLE_NORMAL      0x00
//#define UNICODE_BOM_SWAPPED   0xFFFE
//#define UNICODE_BOM_NATIVE    0xFEFF
//#define TTF_VERSION(X)                                                        \
//#define TTF_PATCHLEVEL                6
//#define TTF_MINOR_VERSION     0
//#define TTF_MAJOR_VERSION     2
//#define _SDLttf_h

//INCLUDES
include "SDL/SDL_rwops";
include "SDL/SDL_version";
include "SDL/SDL_video";

module SDL_ttf_h
{
  requires package "sdl";
  header '#include "SDL_ttf.h"';
  open C_hack;
  open SDL_rwops_h;
  open SDL_version_h;
  open SDL_video_h;

  //PURE INCOMPLETE TYPES
  type _struct__TTF_Font = 'struct _TTF_Font'; //local

  //STRUCT or UNION TAG ALIASES
  typedef TTF_Font = _struct__TTF_Font;

  //PROCEDURES
  proc TTF_ByteSwappedUNICODE: int;
  proc TTF_CloseFont: ptr[TTF_Font];
  proc TTF_Quit: 1;
  proc TTF_SetFontStyle: ptr[TTF_Font] * int;

  //FUNCTIONS
  fun TTF_FontAscent: ptr[TTF_Font] -> int;
  fun TTF_FontDescent: ptr[TTF_Font] -> int;
  fun TTF_FontFaceFamilyName: ptr[TTF_Font] -> ptr[char];
  fun TTF_FontFaceIsFixedWidth: ptr[TTF_Font] -> int;
  fun TTF_FontFaceStyleName: ptr[TTF_Font] -> ptr[char];
  fun TTF_FontFaces: ptr[TTF_Font] -> long;
  fun TTF_FontHeight: ptr[TTF_Font] -> int;
  fun TTF_FontLineSkip: ptr[TTF_Font] -> int;
  fun TTF_GetFontStyle: ptr[TTF_Font] -> int;
  fun TTF_GlyphMetrics: ptr[TTF_Font] * uint16 * ptr[int] * ptr[int] * ptr[int] * ptr[int] * ptr[int] -> int;
  fun TTF_Init: 1 -> int;
  fun TTF_Linked_Version: 1 -> cptr[SDL_version];
  fun TTF_OpenFont: cptr[char] * int -> ptr[TTF_Font];
  fun TTF_OpenFontIndex: cptr[char] * int * long -> ptr[TTF_Font];
  fun TTF_OpenFontIndexRW: ptr[SDL_RWops] * int * int * long -> ptr[TTF_Font];
  fun TTF_OpenFontRW: ptr[SDL_RWops] * int * int -> ptr[TTF_Font];
  fun TTF_RenderGlyph_Blended: ptr[TTF_Font] * uint16 * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderGlyph_Shaded: ptr[TTF_Font] * uint16 * SDL_Color * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderGlyph_Solid: ptr[TTF_Font] * uint16 * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderText_Blended: ptr[TTF_Font] * cptr[char] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderText_Shaded: ptr[TTF_Font] * cptr[char] * SDL_Color * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderText_Solid: ptr[TTF_Font] * cptr[char] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUNICODE_Blended: ptr[TTF_Font] * cptr[uint16] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUNICODE_Shaded: ptr[TTF_Font] * cptr[uint16] * SDL_Color * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUNICODE_Solid: ptr[TTF_Font] * cptr[uint16] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUTF8_Blended: ptr[TTF_Font] * cptr[char] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUTF8_Shaded: ptr[TTF_Font] * cptr[char] * SDL_Color * SDL_Color -> ptr[SDL_Surface];
  fun TTF_RenderUTF8_Solid: ptr[TTF_Font] * cptr[char] * SDL_Color -> ptr[SDL_Surface];
  fun TTF_SizeText: ptr[TTF_Font] * cptr[char] * ptr[int] * ptr[int] -> int;
  fun TTF_SizeUNICODE: ptr[TTF_Font] * cptr[uint16] * ptr[int] * ptr[int] -> int;
  fun TTF_SizeUTF8: ptr[TTF_Font] * cptr[char] * ptr[int] * ptr[int] -> int;
  fun TTF_WasInit: 1 -> int;
}
