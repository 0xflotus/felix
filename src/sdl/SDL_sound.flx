//Module        : SDL_sound_h
//Timestamp     : 2006/1/8 3:36:0 UTC
//Timestamp     : 2006/1/8 14:36:0 (local)
//Raw Header    : /usr/include/SDL/SDL_sound.h
//Preprocessor  : gcc -E
//Input file: sdl.flxcc.i
//Flxcc Control : sdl.flxcc
//Felix Version : 1.1.2_rc1

//#define SOUND_VERSION(x) \
//#define SOUND_VER_PATCH 1
//#define SOUND_VER_MINOR 0
//#define SOUND_VER_MAJOR 1
//#define SNDDECLSPEC
//#define SNDDECLSPEC __declspec(dllexport)
//#define SDLCALL
//#define _INCLUDE_SDL_SOUND_H_

//INCLUDES
include "SDL/SDL_rwops";

module SDL_sound_h
{
  requires package "sdl";
  header '#include "SDL_sound.h"';
  open C_hack;
  open SDL_rwops_h;

  //ABSTRACT TYPES
  type Sound_Sample = 'Sound_Sample';
  type Sound_Version = 'Sound_Version';
  type Sound_AudioInfo = 'Sound_AudioInfo';
  type Sound_SampleFlags = 'Sound_SampleFlags';
  type Sound_DecoderInfo = 'Sound_DecoderInfo';

  //ENUMERATION CONSTANTS
  const SOUND_SAMPLEFLAG_ERROR: int = 'SOUND_SAMPLEFLAG_ERROR';
  const SOUND_SAMPLEFLAG_NONE: int = 'SOUND_SAMPLEFLAG_NONE';
  const SOUND_SAMPLEFLAG_EAGAIN: int = 'SOUND_SAMPLEFLAG_EAGAIN';
  const SOUND_SAMPLEFLAG_EOF: int = 'SOUND_SAMPLEFLAG_EOF';
  const SOUND_SAMPLEFLAG_CANSEEK: int = 'SOUND_SAMPLEFLAG_CANSEEK';

  //PROCEDURES
  proc Sound_ClearError: 1;
  proc Sound_FreeSample: ptr[Sound_Sample];
  proc Sound_GetLinkedVersion: ptr[Sound_Version];

  //FUNCTIONS
  fun Sound_AvailableDecoders: 1 -> ptr[cptr[Sound_DecoderInfo]];
  fun Sound_Decode: ptr[Sound_Sample] -> uint32;
  fun Sound_DecodeAll: ptr[Sound_Sample] -> uint32;
  fun Sound_GetError: 1 -> cptr[char];
  fun Sound_Init: 1 -> int;
  fun Sound_NewSample: ptr[SDL_RWops] * cptr[char] * ptr[Sound_AudioInfo] * uint32 -> ptr[Sound_Sample];
  fun Sound_NewSampleFromFile: cptr[char] * ptr[Sound_AudioInfo] * uint32 -> ptr[Sound_Sample];
  fun Sound_Quit: 1 -> int;
  fun Sound_Rewind: ptr[Sound_Sample] -> int;
  fun Sound_Seek: ptr[Sound_Sample] * uint32 -> int;
  fun Sound_SetBufferSize: ptr[Sound_Sample] * uint32 -> int;
}
