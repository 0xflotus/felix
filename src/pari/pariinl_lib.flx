//Module        : pariinl_h
//Timestamp     : 2006/4/5 6:8:55 UTC
//Timestamp     : 2006/4/5 16:8:55 (local)
//Raw Header    : pariinl.h
//Preprocessor  : gcc -E
//Input file: pari.flxcc.i
//Flxcc Control : pari.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define INLINE
//#define SPLIT(a, b, c) b = HIGHWORD(a); c = LOWWORD(a)
//#define GLUE(hi, lo) (((hi) << BITS_IN_HALFULONG) + (lo))
//#define LOWWORD(a) ((a) & LOWMASK)
//#define HIGHWORD(a) ((a) >> BITS_IN_HALFULONG)
//#define SAVE_HIREMAINDER
//#define LOCAL_HIREMAINDER
//#define SAVE_OVERFLOW
//#define LOCAL_OVERFLOW
//#define INLINE
//INCLUDES
include "parigen_lib";

module pariinl_h
{
  requires package "pari";
  header '#include "pariinl.h"';
  open C_hack;
  open parigen_h;

  //VARIABLES
  const overflow: ulong = 'overflow';
  const hiremainder: ulong = 'hiremainder';

  //PROCEDURES
  proc addsii: long * GEN * GEN;
  proc addssz: long * long * GEN;
  proc affii: GEN * GEN;
  proc affsi: long * GEN;
  proc affsr: long * GEN;
  proc divisz: GEN * long * GEN;
  proc divrrz: GEN * GEN * GEN;
  proc divsiz: long * GEN * GEN;
  proc divssz: long * long * GEN;
  proc dvmdiiz: GEN * GEN * GEN * GEN;
  proc dvmdisz: GEN * long * GEN * GEN;
  proc dvmdsiz: long * GEN * GEN * GEN;
  proc dvmdssz: long * long * GEN * GEN;
  proc mpaff: GEN * GEN;
  proc mulsii: long * GEN * GEN;
  proc mulssz: long * long * GEN;
  proc resiiz: GEN * GEN * GEN;

  //FUNCTIONS
  fun addll: ulong * ulong -> long;
  fun addllx: ulong * ulong -> long;
  fun addmul: ulong * ulong -> long;
  fun addssmod: long * long * long -> long;
  fun bfffo: ulong -> int;
  fun cgetg: long * long -> GEN;
  fun cgeti: long -> GEN;
  fun cgetr: long -> GEN;
  fun cmpir: GEN * GEN -> int;
  fun cmpsr: long * GEN -> int;
  fun divise: GEN * GEN -> int;
  fun divisii: GEN * long * GEN -> long;
  fun divll: ulong * ulong -> long;
  fun divss: long * long -> GEN;
  fun divssmod: long * long * long -> long;
  fun dvmdis: GEN * long * ptr[GEN] -> GEN;
  fun dvmdsi: long * GEN * ptr[GEN] -> GEN;
  fun dvmdss: long * long * ptr[GEN] -> GEN;
  fun evalexpo: ulong -> ulong;
  fun evallg: ulong -> ulong;
  fun evallgef: ulong -> ulong;
  fun evalvalp: ulong -> ulong;
  fun expi: GEN -> long;
  fun gtodouble: GEN -> double;
  fun icopy: GEN -> GEN;
  fun icopy_av: GEN * GEN -> GEN;
  fun itos: GEN -> long;
  fun modis: GEN * long -> GEN;
  fun mpabs: GEN -> GEN;
  fun mpadd: GEN * GEN -> GEN;
  fun mpcmp: GEN * GEN -> int;
  fun mpcopy: GEN -> GEN;
  fun mpdiv: GEN * GEN -> GEN;
  fun mpdivis: GEN * GEN * GEN -> int;
  fun mpmul: GEN * GEN -> GEN;
  fun mpneg: GEN -> GEN;
  fun mpsub: GEN * GEN -> GEN;
  fun mulll: ulong * ulong -> long;
  fun mulssmod: ulong * ulong * ulong -> long;
  fun new_chunk: long -> GEN;
  fun resis: GEN * long -> GEN;
  fun ressi: long * GEN -> GEN;
  fun shiftl: ulong * ulong -> long;
  fun shiftlr: ulong * ulong -> long;
  fun shiftr: GEN * long -> GEN;
  fun smodis: GEN * long -> long;
  fun stoi: long -> GEN;
  fun subii: GEN * GEN -> GEN;
  fun subir: GEN * GEN -> GEN;
  fun subll: ulong * ulong -> long;
  fun subllx: ulong * ulong -> long;
  fun subri: GEN * GEN -> GEN;
  fun subrr: GEN * GEN -> GEN;
  fun subsi: long * GEN -> GEN;
  fun subsr: long * GEN -> GEN;
  fun subssmod: long * long * long -> long;
  fun utoi: ulong -> GEN;
  fun vali: GEN -> long;
}
