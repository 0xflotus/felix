//Module        : paristio_h
//Timestamp     : 2006/4/5 6:8:55 UTC
//Timestamp     : 2006/4/5 16:8:55 (local)
//Raw Header    : paristio.h
//Preprocessor  : gcc -E
//Input file: pari.flxcc.i
//Flxcc Control : pari.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define SIGINT 2
//#define SIG_IGN (void(*)())1
//#define stack_lim(av,n) (bot + (((av)-bot)>>(n)))
//#define low_stack(x,l) (avma < (x))
//#define low_stack(x,l) (avma < (l))
//#define isonstack(x) ((ulong)(x)>=bot && (ulong)(x)<top)
//#define icopyifstack(x,y) {ulong t=(ulong)(x); \
//#define copyifstack(x,y) {ulong t=(ulong)(x); \
//#define is_universal_constant(x) ((GEN)(x) >= gzero && (GEN)(x) <= gi)

module paristio_h
{
  requires package "pari";
  header '#include "paristio.h"';
  open C_hack;

  //CSTRUCTS
  cstruct pariFILE {
    file: ptr[FILE];
    type_: int;
    name: ptr[char];
    prev: ptr[_struct_pariFILE];
    next: ptr[_struct_pariFILE];
  }
  cstruct entree {
    name: ptr[char];
    valence: ulong;
    value: address;
    menu: long;
    code_: ptr[char];
    next: ptr[_struct_entree];
    help: ptr[char];
    args: address;
  }
  cstruct PariOUT {
    putch: paristio_h_cft_1;
    puts: paristio_h_cft_2;
    flush: paristio_h_cft_3;
    die: paristio_h_cft_3;
  }
  cstruct stackzone {
    zonetop: long;
    bot: long;
    top: long;
    avma: long;
    memused: long;
  }

  //C FUNCTION POINTER TYPES
  header '''typedef void (*paristio_h_cft_1)(char);''';
  type paristio_h_cft_1 = 'paristio_h_cft_1';
  header '''typedef void (*paristio_h_cft_3)(void);''';
  type paristio_h_cft_3 = 'paristio_h_cft_3';
  header '''typedef void (*paristio_h_cft_2)(char *);''';
  type paristio_h_cft_2 = 'paristio_h_cft_2';

  //STRUCT or UNION TAG ALIASES

  //TYPE ALIASES
  typedef byteptr = ptr[utiny];
  typedef _struct_pariFILE = pariFILE;
  typedef _struct_entree = entree;
  typedef _struct_stackzone = stackzone;
  typedef _struct_PariOUT = PariOUT;

  //VARIABLES
  const diffptr: byteptr = 'diffptr';
  const pariOut: ptr[PariOUT] = 'pariOut';
  const current_psfile: ptr[char] = 'current_psfile';
  const pariErr: ptr[PariOUT] = 'pariErr';
  const errmessage: ptr[ptr[char]] = 'errmessage';
  const varentries: ptr[ptr[entree]] = 'varentries';
  const avma: ulong = 'avma';
  const infile: ptr[FILE] = 'infile';
  const top: ulong = 'top';
  const bot: ulong = 'bot';
  const memused: ulong = 'memused';
  const pari_outfile: ptr[FILE] = 'pari_outfile';
  const errfile: ptr[FILE] = 'errfile';
  const logfile: ptr[FILE] = 'logfile';
}
