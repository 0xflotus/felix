include "plat/config";

// Changed to just copy values out of the library
// Change to use structs
var INSTALL_ROOT_TOPDIR=Config::INSTALL_ROOT_TOPDIR;
var INSTALL_ROOT=Config::INSTALL_ROOT;
var FLX_INSTALL_DIR=Config::FLX_INSTALL_DIR;
var CYGWIN=Config::CYGWIN;
var WIN32=Config::WIN32;
var MACOSX=Config::MACOSX;
var HAVE_GNU=Config::HAVE_GNU;
var HAVE_MSVC=Config::HAVE_MSVC;
var CCOBJ_DLLIB=Config::CCOBJ_DLLIB;
var CCLINK_DLLIB=Config::CCLINK_DLLIB;
var CCOBJ_STATIC_LIB=Config::CCOBJ_STATIC_LIB;
var CCLINK_STATIC=Config::CCLINK_STATIC;
var VERSION=Config::VERSION;
var EXT_LIB=Config::EXT_LIB;
var EXT_STATIC_OBJ=Config::EXT_STATIC_OBJ;
var EXT_SHARED_OBJ=Config::EXT_SHARED_OBJ;
var EXT_EXE=Config::EXT_EXE;
var EXT_SHLIB=Config::EXT_SHLIB;
var SPEC_OBJ_FILENAME=Config::SPEC_OBJ_FILENAME;
var SPEC_EXE_FILENAME=Config::SPEC_EXE_FILENAME;
var OPTIMISE=Config::OPTIMISE;
var DEBUG_FLAGS=Config::DEBUG_FLAGS;
var DEFAULT_LINK_STATIC=Config::DEFAULT_LINK_STATIC;

dbug := false; // switch off for production
var RECOMPILE=0;
var DEBUG=0;
var DEBUG_COMPILER=0;
var INLINE=100;
var ECHO=0;
var TIME=0;
var NOOPTIMISE=0;
var TIMECMD="time -p";
var STATIC=DEFAULT_LINK_STATIC;

var RUNIT=1;
var CCFLAGS="";
var FELIX=1;
var LINKER_SWITCHES="";
var MACROS="";
var grab=1;
var cpps="";
var cppos="";
var INCLUDE_DIRS="";
var INCLUDE_FILES="";
var NOSTDLIB=0;
var STDOUT="";
var STDIMPORT="--import=nugram.flxh --import=plat/flx.flxh";
var IMPORTS="";
var OUTPUT_DIR="";

var DRIVER_PKG = "";
var DRIVER = "";
var LINK_STRING = "";

var pkgs="";

var CONFIG_DIR = "";
var FLXG = "";
var FLXRUN = "";

var DLINK_STRING:string;
var SLINK_STRING:string;

fun splitext(p:string)=>
  if p.[-4 to] == ".flx" then p.[to -4],"flx"
  elif p.[-4 to] == ".cpp" then p.[to -4],"cpp"
  else p,""
  endif
;

gen system(cmd:string):int= {
  if ECHO==1 do println(cmd); done
  var result = System::system(cmd);
  if ECHO==1 do println("Result code " + str(result)); done
  return result;
}

var argno=1;
fun prefix(arg:string,key:string)=>
  arg.[to len key]==key
;

var compile_exts = List::list ('cpp','cxx');
var linkexts =  List::list ('o','obj','lib','dll','a','so');
var arg = "";
var result = 0;

whilst grab == 1 and argno<System::argc do
  arg = System::argv argno;
  dbug?? println$ "ARGNO="+str(argno)+", arg='"+arg+"'";
  var path,ext = splitext(arg);
  var dir,base = Filename::split1(path);
  dbug?? println$ "path="+path+", ext="+ext+",dir="+dir+",base="+base;
  if ext != "flx" and ext != "" do
    // add to list of things to link, and also things to compile
    // if the extension is appropriate
    if List::mem eq of (string * string) compile_exts ext do
      cpps = cpps + " " + arg;
      cppos = cppos + " " + path + "." + EXT_OBJ;
    else
     cppos = cppos + " " + arg;
    done

  elif arg == "--nostdimport" do
    dbug?? println "No standard library import";
    // Note: currently, Felix compiler generates code that REQUIRES
    // the standard library, eg the driver passes a gc_profile_t record
    // and the compiler generates _uctor_ objects, etc etc
    STDIMPORT="";

  elif prefix(arg,"--import=") do
   dbug?? println "Add import";
   IMPORTS=IMPORTS + " " + arg.[9 to];

  elif prefix(arg,"--test=") do
    dbug?? println "Set test directory";
    FLX_INSTALL_DIR=arg.[7 to];

  elif arg=="--test" do
    dbug?? println "Set test directory";
    FLX_INSTALL_DIR=".";

  elif arg=="--install" do
    dbug?? println "Intall Felix";
    println "Install Felix: ONLY ON UNIX (you may need to be superuser)";
    println "Always installs the --test directory to the configured install target";
    println "Because that is hard coded into this program";
    println "Note: does NOT install this program 'flx' into your PATH!";
    println$ "FROM: " + FLX_INSTALL_DIR;
    println$ "TO  : " + INSTALL_ROOT;
    if FLX_INSTALL_DIR == INSTALL_ROOT do
      println "Can't install, src and dst are the same";
      System::exit(1);
    else
      result=system("mkdir -pv "+INSTALL_ROOT_TOPDIR);
      if result != 0 do
        println$ "Cannot create directory " + INSTALL_ROOT_TOPDIR;
        System::exit 1;
      done
      result=system("rm -rf "+INSTALL_ROOT);
      result=system("mkdir -pv "+INSTALL_ROOT);
      result=system("cp -Rpv "+FLX_INSTALL_DIR+"/* "+INSTALL_ROOT);
      if result == 0 do println "Install succeeded"
      else println$ "Install failed, code = " + str(result);
      done
      System::exit(result);
    done

  elif prefix(arg,"--stdout=") do
    dbug?? println "Redirect standard output";
    // of the Felix program only: used for saving the output
    // to a file so the test harness can compare it with an .expect file
    STDOUT=arg.[9 to];

  elif arg=="--force" do
    dbug?? println "Force recompilation";
    // of the felix code, runs Felix unless --nofelix is set
    // the C++ compiler is run unless the felix compile failed
    RECOMPILE=1;

  elif arg=="--debug" do
    dbug?? println "Enable runtime debugging";
    DEBUG=1;

  elif arg=="--debug-compiler" do
    dbug?? println "Enable compiler debugging";
    DEBUG_COMPILER=1;

  elif arg=="--nooptimise" do
    dbug?? println "Disable optimisation";
    NOOPTIMISE=1;

  elif arg=="--nostdlib" do
    dbug?? println "Do not load standard library";
    NOSTDLIB=1;

  elif arg == "--echo" do
    dbug?? println "Echo commands sent to system";
    ECHO=1;

  elif arg == "--static" do
    dbug?? println "Compile a statically linked program";
    STATIC=1;

  elif prefix(arg,"--inline=") do
    dbug?? println "Set inline aggressiveness";
    INLINE=int(arg.[to 9]);

  elif arg == "--inline" do
    dbug?? println "Set inline aggressiveness";
    INLINE=100;

  elif arg == "--noinline" do
    dbug?? println "Disable inlining (NOT RECOMMENDED)";
    INLINE=0;

  elif arg == "--version" do
    dbug?? println "Print Felix version and exit";
    print("version ..");
    println(VERSION);
    System::exit(0);

  elif arg == "--config" do
    println$ "VERSION            = "+VERSION;
    println$ "INSTALL_ROOT_TOPDIR= "+INSTALL_ROOT_TOPDIR;
    println$ "INSTALL_ROOT       = "+INSTALL_ROOT;
    println$ "FLX_INSTALL_DIR    = "+FLX_INSTALL_DIR;
    println$ "";
    println$ "CYGWIN             = "+str CYGWIN;
    println$ "WIN32              = "+str WIN32;
    println$ "MACOSX             = "+str MACOSX;

    println$ "";
    println$ "HAVE_GNU           = "+str HAVE_GNU;
    println$ "HAVE_MSVC          = "+str HAVE_MSVC;

    println$ "";
    println$ "CCOBJ_DLLIB        = "+CCOBJ_DLLIB;
    println$ "CCLINK_DLLIB       = "+CCLINK_DLLIB;
    println$ "CCOBJ_STATIC_LIB   = "+CCOBJ_STATIC_LIB;
    println$ "CCLINK_STATIC      = "+CCLINK_STATIC;

    println$ "";
    println$ "EXT_LIB            = "+EXT_LIB;
    println$ "EXT_STATIC_OBJ     = "+EXT_STATIC_OBJ;
    println$ "EXT_SHARED_OBJ     = "+EXT_SHARED_OBJ;
    println$ "EXT_EXE            = "+EXT_EXE;
    println$ "EXT_SHLIB          = "+EXT_SHLIB;
    println$ "SPEC_OBJ_FILENAME  = "+SPEC_OBJ_FILENAME;
    println$ "SPEC_EXE_FILENAME  = "+SPEC_EXE_FILENAME;

    println$ "";
    println$ "OPTIMISE           = "+str OPTIMISE;
    println$ "DEBUG_FLAGS        = "+str DEBUG_FLAGS;
    System::exit(0);

  elif arg == "--options" do
    println$ "NOOPTIMISE         = "+str NOOPTIMISE;
    println$ "STATIC             = "+str STATIC;
    println$ "ECHO               = "+str ECHO;
    println$ "NOSTDLIB           = "+str NOSTDLIB;
    println$ "DEBUG              = "+str DEBUG;
    println$ "DEBUG_COMPILER     = "+str DEBUG_COMPILER;
    println$ "STDIMPORT          = "+str STDIMPORT;
    println$ "IMPORTS            = "+str IMPORTS;
    println$ "RECOMPILE          = "+str RECOMPILE;
    println$ "cpps               = "+str cpps;
    println$ "cppos              = "+str cppos;
    println$ "TIME               = "+str TIME;
    println$ "OUTPUT_DIR         = "+str OUTPUT_DIR;
    println$ "RUNIT              = "+str RUNIT;
    println$ "INCLUDE_DIRS       = "+str INCLUDE_DIRS;
    println$ "FELIX              = "+str FELIX;
    println$ "LINKER_SWITCHES    = "+str LINKER_SWITCHES;
    println$ "MACROS             = "+str MACROS;
    System::exit(0)

  elif arg == "--where" do
    dbug?? println "Print location of install directory and exit";
    println(FLX_INSTALL_DIR);
    System::exit(0);

  elif arg == "--time" do
    dbug?? println "Time program execution and print after running";
    TIME=1;

  elif prefix(arg,"--output_dir=") do
    dbug?? println "Set the directory for compiler generated C++ files";
    OUTPUT_DIR=arg;

  elif arg == "--help" do
    dbug?? println "Display top level manual page using 'man' program";
    C_hack::ignore(system( "man -M "+FLX_INSTALL_DIR+Filename::sep+"man"+" flx"));
    System::exit(0);

  elif arg == "-c" do
    dbug?? println "Compile program but do not run it";
    RUNIT=0;

  elif prefix(arg,"-I") do
    dbug?? println "Set include directories for both Felix and C/C++";
    INCLUDE_DIRS=INCLUDE_DIRS + " " + arg;

  elif arg== "--nofelix" do
    dbug?? println "Do not translate Felix code, just compile generated C++ (used to debug at C++ level)";
    FELIX=0;

  elif prefix(arg,"-l") or prefix(arg,"-L") do
    dbug?? println "Set extra switched for linker";
    LINKER_SWITCHES=LINKER_SWITCHES + " " + arg;

  elif prefix(arg,"-D") do
    dbug?? println "Set extra macros for C++ compilation";
    MACROS=MACROS + " " + arg;

  elif prefix(arg,"--pkg=") do
    dbug?? println "Add pkgconfig package to link";
    pkgs= pkgs + " " + arg.[6 to];

  elif prefix(arg,"--") do
    dbug?? println "Unknown -- style option, abort";
    println("Unknown option '"+ arg+"'");
    System::exit(1);

// the main filename -- subsequent args are args to flx_run
  else
    dbug?? println "Assume we have the filename now";
    grab=0;
  done
  argno = argno + 1;
done

dbug?? println$ grab,argno,System::argc;
if grab == 1 and argno == System::argc do
  println("usage: flx [options] filename");
  System::exit(1);
done

dbug?? println "#--------";
dbug?? println$ "DONE, option index = "+str(argno);
dbug?? println$ "path="+path+": dir="+dir+",base="+base", ext="+ext;
dbug?? println$ "cpps="+cpps;
dbug?? println$ "cppos="+cppos;

var USER_ARGS = ""; whilst argno < System::argc do USER_ARGS+=" " + System::argv argno; ++argno; done
//println$ "USER_ARGS=" + USER_ARGS;

if NOOPTIMISE == 0 do
  dbug?? println "Set C++ compiler optimisation switches";
  CCFLAGS=CCFLAGS+" " + OPTIMISE;
else
  dbug?? println "What, no optimisation?";
done

var PKGCONFIG=Filename::join$ List::list(FLX_INSTALL_DIR,"bin","flx_pkgconfig");
dbug?? println$ "Felix package manager program is "+PKGCONFIG;

if ECHO == 1 do
  println("#FLX_INSTALL_DIR="+FLX_INSTALL_DIR);
  println("#PKGCONFIG="+PKGCONFIG);
done

DLINK_STRING, SLINK_STRING = Config::link_strings(FLX_INSTALL_DIR);

CONFIG_DIR = Filename::join(FLX_INSTALL_DIR,'config');
dbug?? println$ "Felix package manager config directory is "+CONFIG_DIR;
// make a list of any *.cpp files (or other g++ options ..)

var EXT_OBJ = 
  if STATIC == 0 then EXT_SHARED_OBJ
  else EXT_STATIC_OBJ
  endif
;

// this hack forces a directory name, because executing "prog"
// can fail if the currect directory is not on the PATH, 
// or worse, the wrong program can execute. The PATH is not
// searched if the filename includes a / somewhere so force one in.
// similarly for dynamic loaders looking for shared libraries
//
// It would probably be better to convert any relative filename
// to an absolute one, however this only makes sense on Unix 
// since Windows has multiple "drives" it is much harder to
// do the conversion.
dir = 
  if dir != "" then dir 
  else "."
  endif
;

var filebase = Filename::join(dir,base);
dbug?? println$ "User program base is " + filebase;

// Find absolute pathname

if path == "" do
  fprint$ cerr, ("No such felix program: "+path+"\n");
  System::exit(1);
done

gen get_stdout(x:string) = {
  // We're screwed if popen doesn't work ..
/*
  if os.name == "nt": // popen doesn't work on Windows
*/
    result := system(x + " >tmp.out");
    Stdout::flush();
    output := Text_file::load "tmp.out";
/*
  else:
    fout = os.popen(x+" 2>&1 ","r")
    output = []
    try:
      for line in fout:
        output.append(line)
        if outit: outit(line)
    finally:
      result = fout.close()
*/
  return result,output;
}

gen xqt(cmd:string) = {
  ECHO == 1 or dbug ?? println("cmd="+cmd);
  var result,output = get_stdout(cmd);
  if result == 0 do
    n := 
      match find_first_of (output, char "\n") with
      | Some ?n => n 
      | None => len output 
      endmatch
    ; 
    output = output.[to n]; // first line excluding newline
    ECHO==1 or dbug ?? println("output='"+output+"'");
  else
    dbug ?? println ("COMMAND FAILED");
    fprint$ cerr, ("Error "+repr(result)+" executing command " + cmd + "/n");
    System::exit result;
  done
  return output;
}

proc calpackages () {

  // find external header files
  var PKGCONFIG_CFLAGS=PKGCONFIG+ " --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=cflags ";

  // external header files
  var PKGCONFIG_INCLUDES=PKGCONFIG+ " --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=includes ";

  // find external dynload libraries
  var PKGCONFIG_DLIBS=PKGCONFIG+" -r --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=provides_dlib --field=requires_dlibs ";

  // find external static libraries
  var PKGCONFIG_SLIBS=PKGCONFIG+" -r --keeprightmost --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=provides_slib --field=requires_slibs ";

  //find driver package required
  var PKGCONFIG_DRIVER=PKGCONFIG+" --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=flx_requires_driver ";


  // find all include directories
  var x = xqt(PKGCONFIG_CFLAGS+ " @"+filebase+".resh");
  INCLUDE_DIRS=INCLUDE_DIRS +" " + x;

  // find all include files
  x = xqt(PKGCONFIG_INCLUDES+ " @"+filebase+".resh");
  INCLUDE_FILES=INCLUDE_FILES +" " + x;

  // find the driver package
  DRIVER_PKG=xqt(PKGCONFIG_DRIVER+" @"+filebase+".resh");
  DRIVER_PKG == "" ??  DRIVER_PKG="flx_run";

  // find the driver entity
  if STATIC == 0 do
    // dynamic linkage: the driver executable
    DRIVER=Filename::join$ List::list (FLX_INSTALL_DIR,"bin",DRIVER_PKG+EXT_EXE);
  else
    // static linkage: the driver object file
    DRIVER=Filename::join$ List::list (FLX_INSTALL_DIR,"lib","rtl",DRIVER_PKG+EXT_STATIC_OBJ);
  done

  if STATIC == 0 do
    // dynamic linkage: all the libraries required by the application
    LINK_STRING=DLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_DLIBS+" @"+filebase+".resh");
  else
    // static linkage: all the libraries required by the application and driver
    LINK_STRING=SLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_SLIBS+" "+DRIVER_PKG+" @"+filebase+".resh");
  done

  if ECHO == 1 do
    println("//RESOURCE FILE="+filebase+".resh");
    println("//INCLUDE_DIRS="+INCLUDE_DIRS);
    println("//INCLUDE_FILES="+INCLUDE_FILES);
    println("//DRIVER="+DRIVER);
    println("//LINK_STRING="+LINK_STRING);
  done
}

proc write_include_file(path:string) {
  includes := split (strip INCLUDE_FILES,char " ");
  var f = Text_file::fopen_output(path+".includes");
  List::iter  
    (proc (i:string) { Text_file::writeln$ f, "#include " + i; })
    includes
  ;
  Text_file::fclose f;
}

val args = USER_ARGS;
dbug?? println$ "Target program args = "+args;

var INCLUDE_DIR="-I"+Filename::join(FLX_INSTALL_DIR,"lib","rtl") + " -I"+Filename::join(FLX_INSTALL_DIR,"config","target");
dbug?? println$ "C++ Include directory for Felix library " + INCLUDE_DIR;

var FLXLIB="-I"+Filename::join(FLX_INSTALL_DIR,"lib");
var STDLIB="std";
if NOSTDLIB == 1 do
  FLXLIB="";
  STDLIB="";
done

if WIN32 do
  FLXG=Filename::join(FLX_INSTALL_DIR, 'bin', 'flxg');
  FLXRUN='';
else
  FLXG="env PATH="+FLX_INSTALL_DIR+"/bin:$PATH "+FLX_INSTALL_DIR+"/bin/flxg";
  // the mac uses DYLD_LIBRARY_PATH instead of LD_LIBRARY_PATH
  if MACOSX do
    FLXRUN="env DYLD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$DYLD_LIBRARY_PATH ";
  else
    FLXRUN="env LD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$LD_LIBRARY_PATH ";
  done
done

var DEBUGSWITCH="";
DEBUG_COMPILER == 1?? DEBUGSWITCH=" --debug";

var STATIC_ENV="";
DEBUG_COMPILER == 1?? STATIC_ENV="env FLX_DEBUG=1 ";

body """
long macosx_ftime(string s) {
  struct stat sb;
  int e = stat(s.data(),&sb);
  if(e != 0) return 0l;
  return sb.st_mtime;
}
""" requires header "#include <sys/stat.h>";

body """
long posix_ftime(string s) {
  struct stat sb;
  int e = stat(s.data(),&sb);
  if(e != 0) return 0l;
  return sb.st_mtime;
}
""" requires header "#include <sys/stat.h>";


fun macosx_ftime: string -> long = "macosx_ftime($1)";
fun posix_ftime: string -> long = "posix_ftime($1)";

fun filetime(f:string)=>if MACOSX then macosx_ftime(f) else posix_ftime(f) endif;

var cmd = "";
dbug?? println$ "RECOMPILE="+str RECOMPILE;
dbug?? println$ "RUNIT="+str RUNIT;

if RECOMPILE == 0 and RUNIT == 1 do
  // not (--force or -c)
  dbug?? println "Checking to see if the binary is uptodate";
  if STATIC == 0 do
    if (filetime(filebase+EXT_SHLIB) > filetime (filebase+".flx")) do
      dbug?? println$ "Running dynamically linked binary";
      calpackages();
      cmd=FLXRUN+DRIVER+DEBUGSWITCH+" "+ filebase+EXT_SHLIB+" "+args;
      dbug?? println$ "Uptodate shared lib: Running command " + cmd;
      System::exit(system(cmd));
    else
      dbug?? println$ "Dynamically linked binary out of date or non-existant";
    done
  else
    if (filetime(filebase+EXT_EXE) > filetime(filebase+".flx")) do
      dbug?? println$ "Running statically linked binary";
      cmd=STATIC_ENV+" "+filebase+" "+args;
      dbug?? println$ "Uptodate executable: Running command " + cmd;
      System::exit(system(cmd));
    else
      dbug?? println$ "Statically linked binary out of date or non-existant";
    done
  done
done

// Need Felix and c++ compile, then run it

var VERBOSE = "";
if DEBUG_COMPILER == 1 do
  VERBOSE="-v";
  dbug?? println "Compiler debugging on";
else
  VERBOSE="-q";
  dbug?? println "Compiler debugging off";
done

if DEBUG==1 do
  CCFLAGS=CCFLAGS+DEBUG_FLAGS;
done

var FLXFLAGS="--inline="+str(INLINE) + ' ' + str(OUTPUT_DIR);

var FCMD="";
var LCMD="";
var CCMD="";

if FELIX == 1 do
  FCMD=List::cat ' ' (List::list (
    FLXG,
    VERBOSE, FLXFLAGS, FLXLIB,
    INCLUDE_DIRS, STDIMPORT, IMPORTS,
    STDLIB, filebase));
  dbug?? println$ "Felix command="+FCMD;
  result=system(FCMD);
  if result != 0 do 
   dbug?? println "Felix compilation failed";
    System::exit(int(0!=result)); 
  done
  dbug?? println "Felix compilation succeeded";
  calpackages();
  write_include_file(filebase);
else
  dbug?? println "Felix compilation skipped by switch";
  calpackages(); // need to do this here to set linker switches
done


if STATIC == 0 do
  dbug?? println "Dynamic linkage";
  CCMD=List::cat ' ' (List::list (
    CCOBJ_DLLIB, CCFLAGS, "-DTARGET_BUILD",
    INCLUDE_DIR, INCLUDE_DIRS, MACROS,
    cpps, filebase+".cpp",
    SPEC_OBJ_FILENAME+filebase+EXT_OBJ));
  LCMD=List::cat ' ' (List::list (
    CCLINK_DLLIB, CCFLAGS,
    cppos, filebase+EXT_OBJ,
    SPEC_EXE_FILENAME+filebase+EXT_SHLIB,
    LINK_STRING));
  dbug?? println$ "C++ command="+CCMD;
  result = system(CCMD);
  if result == 0 do
    dbug?? println$ "Link command="+LCMD;
    result = system(LCMD);
    if result == 0 do
      if RUNIT == 1 do
        if TIME == 1 do
          cmd=List::cat ' ' (List::list (
            TIMECMD,
            FLXRUN+DRIVER+DEBUGSWITCH,
            filebase+EXT_SHLIB, args));
        else
          cmd=List::cat ' ' (List::list (
            FLXRUN+DRIVER+DEBUGSWITCH,
            filebase+EXT_SHLIB, args));
        done
        if STDOUT != "" do cmd=cmd+" > " +STDOUT; done
        dbug?? println$ "Run command="+cmd;
        System::exit(int(0!=system(cmd)));
      else
        dbug?? println "Not running program selected by switch";
      done
    else
      dbug?? println "Dynamic linkage failed";
    done
  else
    dbug?? println "C++ compilation failed";
  done
else
  dbug?? println "Static linkage";
  CCMD=List::cat ' ' (List::list (
    CCOBJ_STATIC_LIB,
    CCFLAGS, "-DTARGET_BUILD",
    "-DFLX_STATIC_LINK", INCLUDE_DIR, INCLUDE_DIRS,
    MACROS, cpps, filebase+".cpp",
    SPEC_OBJ_FILENAME+filebase+EXT_OBJ));
  LCMD=List::cat ' ' (List::list (
    CCLINK_STATIC, SPEC_EXE_FILENAME+filebase+EXT_EXE,
    filebase+EXT_OBJ, DRIVER, cppos, LINK_STRING));
  dbug?? println$ "C++ command="+CCMD;
  result=system(CCMD);
  if result == 0 do
    dbug?? println$ "Link command="+LCMD;
    result=system(LCMD);
    if result == 0 do
      // rm -f "$base.cpp"
      if RUNIT == 1 do
        if TIME == 1 do
          cmd= List::cat ' ' (List::list (
            TIMECMD, STATIC_ENV, filebase, args));
        else
          cmd=List::cat ' ' (List::list (
            STATIC_ENV, filebase,args));
        done
        if STDOUT != "" do cmd=cmd + " > "+STDOUT; done
        dbug?? println$ "Run command="+cmd;
        System::exit(int(0!=system(cmd)));
      else
        dbug?? println "Not running program selected by switch";
      done
    else
      dbug?? println "Static Linkage failed";
    done
  else
    dbug?? println "C++ compilation failed";
  done
done

System::exit(int(0!=result));

