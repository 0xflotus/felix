include "plat/config";
include "./flx_plat";
include "./flx_install";
include "./flx_cmdopt";
include "./flx_cache";
include "./flx_pkg";
include "./flx_config";
include "./flx_control";
include "./flx_profile";
include "./flx_run";

// Felix version of THIS program (NOT the one being installed
// if you're using flx to install Felix)

var config = #Config::config;

// --------------------------------------------------
// Optionally print a debug line.
// --------------------------------------------------

var dbug = false; // switch off for production
var ECHO= if dbug then 1 else 0;

proc debugln[T with Str[T]] (x:T) {
  dbug ?? fprintln (cerr, "[flx] " + str x);
}

var profile = #dflt_profile;

var control = #dflt_control;

var compile_exts = List::list ('cpp','cxx','c','cc');
var linkexts =  List::list ('o','obj','lib','dll','a','so');
var result = 0;

var loopctl = #init_loopctl;
processing_stage1;

debugln$ "Felix package manager program is "+control.PKGCONFIG;

if ECHO == 1 do
  fprintln (cerr, "#FLX_INSTALL_DIR="+config.FLX_INSTALL_DIR);
  fprintln (cerr, "#PKGCONFIG="+control.PKGCONFIG);
done

debugln$ "Felix package manager config directory is "+control.CONFIG_DIR;
// make a list of any *.cpp files (or other g++ options ..)

debugln$ "FileDir= " + loopctl.dir;
var rel_filebase = if loopctl.dir == "." then loopctl.base else Filename::join(loopctl.dir,loopctl.base);
debugln$ "Rel_filebase= " + rel_filebase;
debugln$ "Given Extension=" + loopctl.ext;

  // this is a hack! We should resolve the filename first.
var use_ext = if loopctl.ext != "" then "."+loopctl.ext else
  #{ 
     var flxt = dfiletime (rel_filebase+".flx",#past_time);
     var fdoct = dfiletime (rel_filebase+".fdoc",#past_time);
     return 
       if flxt > fdoct then ".flx"
       elif fdoct > flxt then ".fdoc"
       else ""
     ;
  }
;
debugln$ "Computed Extension=" + use_ext;
var filebase = Directory::mk_absolute_filename$ rel_filebase;
debugln$ "User program base is " + filebase;
var cpp_filebase =
  match control.BUNDLE_DIR with
  | Some ?dir => Filename::join(dir,Filename::basename filebase)
  | None =>if control.OUTPUT_DIR=="" then filebase 
           else cache_join(control.OUTPUT_DIR,filebase) 
           endif
  endmatch;         
debugln$ "C++ file base is " + cpp_filebase;

// Find absolute pathname

if loopctl.path == "" do
  fprint$ cerr, ("No such felix program: "+loopctl.path+"\n");
  System::exit(1);
done

if control.LINKER_OUTPUT_FILENAME == "" do
  if control.STATIC == 0 do // dynamic
    control.LINKER_OUTPUT_FILENAME = filebase+config.EXT_SHLIB;
  else
    control.LINKER_OUTPUT_FILENAME = filebase+config.EXT_EXE;
  done
done
control.LINKER_OUTPUT_FILENAME =  Directory::mk_absolute_filename control.LINKER_OUTPUT_FILENAME; 

val args = control.USER_ARGS;
debugln$ "Target program args = "+args;

var INCLUDE_DIR=quote("-I"+Filename::join(config.FLX_INSTALL_DIR,"lib","rtl")) + " "+quote("-I"+Filename::join(config.FLX_INSTALL_DIR,"config","target"));
debugln$ "C++ Include directory for Felix library " + INCLUDE_DIR;

var FLXLIB=quote("-I"+Filename::join(config.FLX_INSTALL_DIR,"lib"));
var STDLIB=list("std","web");
if control.NOSTDLIB == 1 do
  FLXLIB="";
  STDLIB=Empty[string];
done

var DEBUGSWITCH="";
if control.DEBUG_COMPILER == 1 do DEBUGSWITCH=" --debug"; done

var STATIC_ENV="";
if control.DEBUG_COMPILER == 1 do STATIC_ENV="env FLX_DEBUG=1 "; done

var cmd = "";
debugln$ "RECOMPILE="+str control.RECOMPILE;
debugln$ "RUNIT="+str control.RUNIT;
if control.SHOWCODE == 1 do {
  var prg = 
    if use_ext == "" then "// No file "+filebase+".(flx|fdoc) found"
    else load(filebase+"."+use_ext)
  ;
  print prg;
}; done

run_if_required_and_uptodate;

// Need Felix and c++ compile, then run it
dbug??println$ "RECOMPILING!!";

var VERBOSE = "";
if control.DEBUG_COMPILER == 1 do
  VERBOSE="-v";
  debugln "Compiler debugging on";
else
  VERBOSE="-q";
  debugln "Compiler debugging off";
done

if control.DEBUG==1 do
  control.CCFLAGS=control.CCFLAGS+config.DEBUG_FLAGS;
done

run_felix_compiler_if_required;

if control.CCOMPILEIT == 0 do
  debugln "C++ compilation skipped by switch";
elif control.STATIC == 0 do

  debugln "Dynamic linkage";
  cxx_compile_dynamic;

  if control.LINKIT == 0 do
    debugln "Not linking program selected by switch";
  else
    cxx_link_dynamic;
    if control.RUNIT == 1 do
      run_program_dynamic;
    else
      debugln "Not running program selected by switch";
    done
  done
else

  debugln "Static linkage";
  cxx_compile_static;

  if control.LINKIT == 0 do
    debugln "Not linking based on switch";
  else
    cxx_link_static;
    if control.RUNIT == 1 do
      run_program_static;
    else
      debugln "Not running program selected by switch";
    done
  done
done

pexit(result);


