include "plat/config";
include "./flx_plat";
include "./flx_install";
include "./flx_cmdopt";
include "std/felix/flx_cache";
include "std/felix/flx_pkg";
include "std/felix/flx_flxg";
include "std/felix/flx_cxx";
include "./flx_config";
include "./flx_control";
include "./flx_profile";
include "./flx_run";
include "./flx_depvars";

open FlxCache;

// Felix version of THIS program (NOT the one being installed
// if you're using flx to install Felix)

var config = #Config::config;

// --------------------------------------------------
// Optionally print a debug line.
// --------------------------------------------------

var dbug = false; // switch off for production
var ECHO= if dbug then 1 else 0;

proc debugln[T with Str[T]] (x:T) {
  dbug ?? fprintln (cerr, "[flx] " + str x);
}

var profile = #dflt_profile;

var control = #dflt_control;

var loopctl = #init_loopctl;
processing_stage1;


if control.INREGEX != "" do
  control.USER_ARGS = Shell::quote_arg(loopctl.progname) + ' ' + control.USER_ARGS;
  if control.INDIR == "" do control.INDIR = "."; done
  var regex = RE2 control.INREGEX;
  if not regex.ok do
    eprintln$ "Malformed regex " + control.INREGEX;
    System::exit(1);
  done
  var files = FileSystem::regfilesin (control.INDIR, regex);
  var n = files.len.int;
  println$ "Processing " + files.len.str + " files";
  var i = 1;
  for file in files do
    var arg = Filename::join (control.INDIR, file);
    loopctl.path,loopctl.ext = Filename::split_extension(arg);
    loopctl.dir,loopctl.base = Filename::split1(loopctl.path);
    // temporary hack, to force reset of the linker filename, stdout, and expect
    // file names in cal_depvars so they depend on the current file.
    control.LINKER_OUTPUT_FILENAME = "";
    control.STDOUT = "";
    control.EXPECT = "";
    var dvars = #cal_depvars;
    println$ f"Processing [%02d/%02d]: %S" (i, n, file);
    runit;
    ++i;
  done
  System::exit (0); 
done

if control.SHOWCODE == 1 do {
    var prg = 
      if dvars.use_ext == "" then "// No file "+dvars.filebase+".(flx|fdoc) found"
      else load(dvars.filebase+"."+dvars.use_ext)
    ;
    print prg;
  }; 
done

dvars = #cal_depvars;
runit;

System::exit (0);

