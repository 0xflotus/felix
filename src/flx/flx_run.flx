
proc run_felix_compiler_if_required
{
  if control.FELIX == 1 do

    var FLXFLAGS="--inline="+str(control.INLINE);
    if control.OUTPUT_DIR != "" do 
      FLXFLAGS += ' '+quote('--output_dir=' + str(control.OUTPUT_DIR)); 
    done
    for dir in control.BUNDLE_DIR do 
      FLXFLAGS += ' ' + quote('--bundle_dir=' + dir); 
    done
    if control.CACHE_DIR != "" do 
      FLXFLAGS += " "+quote("--cache_dir=" + control.CACHE_DIR); 
    done
    if control.COMPILER_PHASE != "" do 
      FLXFLAGS += ' --compiler-phase=' + control.COMPILER_PHASE; 
    done
    if control.DOREDUCE == 0 do
      FLXFLAGS += ' --no-reduce';
    done

    var stdlibs = cat ' ' STDLIB;
    var CMD=cat ' ' (list (
      control.QUOTE_FLXG,
      VERBOSE, FLXFLAGS, FLXLIB,
      control.INCLUDE_DIRS, 
      "--syntax="+control.STDGRAMMAR, 
      control.STDIMPORT, control.IMPORTS)) + 
      ' ' + stdlibs + 
      ' ' + quote(filebase+use_ext)
    ;
    debugln$ "Felix command="+CMD;
    
    result=system(CMD);
    if result != 0 do 
      eprintln$ "Felix compilation "+CMD+" failed";
      pexit(result); 
    done
    debugln "Felix compilation succeeded";
    calpackages;
    write_include_file(cpp_filebase);
  else
    debugln "Felix compilation skipped by switch";
    calpackages;
  done
}

proc cxx_compile_dynamic1(src:string, dst:string)
{
  var CMD=List::cat ' ' (list (
    config.CCOBJ_DLLIB, control.CCFLAGS, "-DTARGET_BUILD",
    INCLUDE_DIR, control.INCLUDE_DIRS, control.MACROS,
    quote(src),
    config.SPEC_OBJ_FILENAME+quote(dst)))
  ;
  debugln$ "C++ command="+CMD;
  result = system(CMD);
  if result != 0 do
    eprintln $ "C++ command="+CMD + " FAILED";
    pexit(result);
  done

}

proc cxx_compile_dynamic
{
  cxx_compile_dynamic1 (cpp_filebase+".cpp", cpp_filebase+config.EXT_SHARED_OBJ);

  for src in control.cpps do
    var dst = Filename::strip_extension src + config.EXT_SHARED_OBJ;
    cxx_compile_dynamic1 (src,dst);
    control.cppos += dst;
  done
 
}

proc cxx_link_dynamic
{
  var CMD=List::cat ' ' (list (
    config.CCLINK_DLLIB, 
    control.CCFLAGS,
    cat " " control.cppos, 
    quote(cpp_filebase+config.EXT_SHARED_OBJ),
    config.SPEC_EXE_FILENAME+quote(control.LINKER_OUTPUT_FILENAME),
    control.LINK_STRING))
  ;
  debugln$ "Link command="+CMD;
  result = system(CMD);

  if result != 0 do
    eprintln $ "Dynamic link command="+CMD + " FAILED";
    pexit(result);
  done
}

proc cxx_compile_static1 (src: string, dst: string)
{
  var CMD=List::cat ' ' (list (
    config.CCOBJ_STATIC_LIB,
    control.CCFLAGS, 
    "-DTARGET_BUILD",
    "-DFLX_STATIC_LINK", 
    INCLUDE_DIR, 
    control.INCLUDE_DIRS,
    control.MACROS, 
    quote(src),
    config.SPEC_OBJ_FILENAME+quote(dst)));

  debugln$ "C++ command="+CMD;
  result=system(CMD);

  if result != 0 do
    eprintln$ "C++ compilation "+src+" failed";
    pexit(result);
  done

}

proc cxx_compile_static
{
  cxx_compile_static1
  (
    cpp_filebase+"_static_link_thunk.cpp",
    cpp_filebase+"_static_link_thunk"+config.EXT_STATIC_OBJ
  );

  for src in control.cpps do
    var dst = Filename::strip_extension src +config.EXT_STATIC_OBJ;
    if control.RECOMPILE == 1 or dfiletime(src,#past_time) > dfiletime (dst, #future_time) do
      cxx_compile_static1 (src,dst);
    done
    control.cppos += dst;
  done
 
  cxx_compile_static1 (cpp_filebase+".cpp",cpp_filebase+config.EXT_STATIC_OBJ);

}

proc cxx_link_static
{
  var xargs = list 
    (
      config.CCLINK_STATIC, config.SPEC_EXE_FILENAME+quote(control.LINKER_OUTPUT_FILENAME),
      quote(cpp_filebase+"_static_link_thunk"+config.EXT_STATIC_OBJ),
      quote(cpp_filebase+config.EXT_STATIC_OBJ)
    ) + 
    control.DRIVER_OBJS + 
    control.cppos + 
    control.LINK_STRING
  ;
  var CMD = cat ' ' xargs;

  debugln$ "Link command="+CMD;
  result=system(CMD);
  if result != 0 do
    debugln$ "Link command="+CMD+ " FAILED";
    pexit(result);
  done 
}

proc run_program_dynamic
{
  var xargs = list (
      control.FLXRUN,control.DRIVER_EXE,DEBUGSWITCH,
      quote(control.LINKER_OUTPUT_FILENAME), args)
  ;
  if control.TIME == 1 do xargs = control.TIMECMD + xargs; done
  var CMD = cat ' ' xargs;
  if control.STDOUT != "" do CMD=CMD+" > " +quote(control.STDOUT); done
  debugln$ "Run command="+CMD;
  pexit(system(CMD));

}

proc run_program_static
{
  var xargs = list ( STATIC_ENV, quote(control.LINKER_OUTPUT_FILENAME),args);
  if control.TIME == 1 do xargs = control.TIMECMD + xargs; done
  var CMD = cat ' ' xargs;
  if control.STDOUT != "" do CMD=CMD + " > "+quote(control.STDOUT); done
  debugln$ "Run command="+CMD;
  pexit(system(CMD));

}

proc run_if_required_and_uptodate
{

  if control.RECOMPILE == 0 and control.RUNIT == 1 and control.CLEAR_CACHE == 0 do
    // not (--force or -c)
    debugln "Checking to see if the binary is uptodate";
    var xtime = dfiletime(control.LINKER_OUTPUT_FILENAME,#past_time);
    var srctime = cal_dep_time (filebase);
    srctime = fold_left maxf srctime control.cpps;
    srctime = fold_left maxf srctime control.cppos;

    debugln$ "Filebase = " + filebase; 
    debugln$ "Binary time = " + strfiletime (xtime);
    debugln$ "src time = " + strfiletime (srctime);
    debugln$ "cache time = " + strfiletime (control.cache_time);
    if control.STATIC == 0 do
      if xtime > srctime and xtime > control.cache_time do
        debugln$ "Running dynamically linked binary";
        calpackages;
        debugln$ "Uptodate shared lib: Running command " + cmd;
        run_program_dynamic;
      else
        debugln$ "Dynamically linked binary out of date or non-existant";
      done
    else
      if xtime > srctime and xtime > control.cache_time do
        debugln$ "Running statically linked binary";
        run_program_static;
      else
        debugln$ "Statically linked binary out of date or non-existant";
      done
    done
  done


}


