
class WikiHandler {
  open ServerConfig;
  open HTTPRequest;
  open HTTPConnection;
  open HTTPHandler;
  open HTTPResponse;
  open HTTPBasicAuth;
  open WikiModel;
  open WikiFileModel;
  open MIMEType;


  fun app_handlers() =>
      Cons (http_handler((fun (c:server_config,r:http_request) => true),
            (proc (c:http_connection, r:http_request ) {c.config.log(INFO,r.path);})),
      Cons (http_handler(save_edit_route,requires_auth(auth_source,"Felix Wiki",
            requires_group_auth(save_edit))),
      Cons (http_handler(edit_route,requires_auth(auth_source,"Felix Wiki",
            requires_group_auth(edit))),
      Cons (http_handler(delete_route,requires_auth(auth_source,"Felix Wiki",
            requires_group_auth(delete))),
      Cons (http_handler(preview_route,requires_auth(auth_source,"Felix Wiki",
            requires_group_auth(preview))),
      Cons (http_handler(login_route,requires_auth(auth_source,"Felix Wiki",login)),
      Cons (http_handler(users_edit_route,requires_auth(admin_auth_source,"Felix Wiki",users_edit)),
      Cons (http_handler(users_reset_route,requires_auth(admin_auth_source,"Felix Wiki",users_reset)),
      Cons (http_handler(users_delete_route,requires_auth(admin_auth_source,"Felix Wiki",users_delete)),
      Cons (http_handler(users_table_route,requires_auth(admin_auth_source,"Felix Wiki",users_table)),
      Cons (http_handler(users_route,requires_auth(admin_auth_source,"Felix Wiki",users)),
      Cons (http_handler(user_profile_route,requires_auth(auth_source,"Felix Wiki",user_profile)),
      Cons (http_handler(user_reset_route,requires_auth(auth_source,"Felix Wiki",user_reset)),
      Cons (http_handler(path_edit_route,requires_auth(admin_auth_source,"Felix Wiki",path_edit)),
      Cons (http_handler(path_delete_route,requires_auth(admin_auth_source,"Felix Wiki",path_delete)),
      Cons (http_handler(path_table_route,requires_auth(admin_auth_source,"Felix Wiki",path_table)),
      Cons (http_handler(path_route,requires_auth(admin_auth_source,"Felix Wiki",path)),
//      Cons (http_handler(search_route,search),
      Cons (http_handler(dir_route,requires_group_auth(dir)),
      Cons (http_handler(pull_route,requires_group_auth(pull)),
      Cons (http_handler(html_route,requires_group_auth(html)),
      Cons (http_handler(get-wiki_route,requires_group_auth(get-wiki)),
      Cons (http_handler(wiki_route,requires_group_auth(wiki)),
      Cons (http_handler(web_route,requires_group_auth(web)),
      Cons (http_handler(lib_route,requires_group_auth(lib)),
      Cons (http_handler(inc_route,requires_group_auth(inc)),
      Empty[http_handler]))))))))))))))))))))))));

  fun auth_source(uname:string,passwd:string):bool => 
    db_get_auth_fdoc(uname,passwd);

  fun admin_auth_source(uname:string,passwd:string):bool => 
    db_get_auth_fdoc(uname,passwd) and db_user_is_admin(uname);

  fun is_authorized_for(conn:http_connection,request:http_request/*,lvl:string*/):bool =>
    mem (fun(path:string^4):bool => if \in(request.path,RE2(path.(2))) then
      (match authorized_user(conn,request) with
      |Some ?user => (match db_get_user(user) with
        |Some (?u,?name,?grp,?email) => path.(0) == grp
        |_ =>  path.(0) == "public"
        endmatch)
      |_ => path.(0) == "public"
      endmatch)
      else
        false
      endif // and path.(3) == lvl
    ) (db_get_paths());
 
  proc requires_group_auth (/*lvl:string,*/
                     handler_fn:(http_connection*http_request) -> void)
                    (conn:http_connection, request:http_request ) = {
    
    if is_authorized_for(conn,request/*,lvl*/) do
      handler_fn(conn,request);
    else
      write(conn, make_forbidden(
        apply_to_template("page-template.html",
          Cons(("<!--___CUSTOM_HEADER___-->",""),
          Cons(("___CENTER_CONTENT___",load_template("access-denied-body.html")),
          Cons(("___FNAME___","Access Denied"),
          Cons(("___CTRLS___",set-ctrls(conn,request)),
          Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
          Empty[string^2]))))))));
    done
  }
 
  fun apply_to_template(templ:string,params:list[string^2]):string = {
    var template = load(Filename::join(TEMPLATE_ROOT,templ));
    iter (proc (kv:string^2) {template = let ?k,?v = kv in search_and_replace(template,k,v);})
      params;
    return template;
  }

  fun load_template(templ:string):string =>
    load(Filename::join(TEMPLATE_ROOT,templ));

  fun login_route(config:server_config,request:http_request) =>
    startswith request.path  "/login";
  
   proc login (conn:http_connection, request:http_request ) {
    var path = (get_param(request,"return_to")).or_else("/wiki/");
    write(conn,make_see_other(path));
  }


  fun set-ctrls(conn:http_connection,request:http_request) = {
    val user = match authorized_user(conn,request) with
      |Some ?u => q"<div class='inline'><span class='ui-icon ui-icon-person' style='float:left;'></span><a href='/user/profile/'>$(u)</a></div>"
      |None => "<a href='/login?return_to=" + request.path "'>Login</a>"""
    endmatch;
    return user;
  
  }

  fun set-search ():string = {
    var search = """<div class='inline search'>  
      <form action='/wiki/search/'>
      <label>Search</label> <input name='for' type='text' /></form></div>""";
    return search; 
  }

  fun admin-menu(conn:http_connection,request:http_request):string =>
    match authorized_user(conn,request) with
      |Some ?u => if db_user_is_admin(u) then load_template("admin-menu.html") else "" endif
      |None => ""
    endmatch;

mathjax := '''
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
        skipTags: ["script","noscript","style","textarea"]
    }
  });
</script> 
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
''';

  
  fun format_doc (content:string,path:string):bool*bool*string*string =>
    match get_suffix(path) with
    | "cpp" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "c" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "cpp" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "c" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "h" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "hpp" => let ?ok,?html = (DocumentPlugins::xlat_cpp (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "flx" => let ?needs_mathjax,?html = (DocumentPlugins::xlat_felix (content, path)) in
      true,true,if needs_mathjax then mathjax else "" endif,"<pre>"+html+"</pre>"
    | "flxh" => let ?needs_mathjax,?html = (DocumentPlugins::xlat_felix (content, path)) in
      true,true,if needs_mathjax then mathjax else "" endif,"<pre>"+html+"</pre>"
//    Currently SIGEVS when calling xlat_fpc 
// JS: Yes, but it SIGEVS even with this commented out, so the bug
// is not in the fpc formatter
    | "fpc" => let ?ok,?html =(DocumentPlugins::xlat_fpc (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "fdoc" => let ?needs_mathjax, ?html = DocumentPlugins::xlat_fdoc (content,path) in
      true,true,if needs_mathjax then mathjax else "" endif,html
    | "ml" => let ?ok,?html = (DocumentPlugins::xlat_ocaml (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "mli" => let ?ok,?html = (DocumentPlugins::xlat_ocaml (content, path)) in
      ok,false,"","<pre>"+html+"</pre>"
    | "py" => let ?ok,?html = DocumentPlugins::xlat_py (content, path) in
      ok,false,"","<pre>"+html+"</pre>"
    | ?b    =>  let ?ok,?html = (DocumentPlugins::xlat_felix (content, path)) in
      ok,true,"",content
    endmatch;
  
  fun get_title(conn:http_connection,request:http_request):string = {
      var title = (get_fname(request)).or_else "wiki_main.fdoc";
      return match authorized_user(conn,request) with
      |Some ?u => title+if startswith request.path "/wiki/" and 
                     not startswith request.path "/wiki/edit/" 
                  then """[<a href='/wiki/edit/"""+request.path.[6 to]+"'>Edit</a>]"
                  else ""
                  endif
      |None => title
    endmatch;
  }
 fun wiki_route(config:server_config,request:http_request) ={
    return startswith request.path  "/wiki/"or request.path =="/" or request.path == "";
  }

  proc wiki (conn:http_connection, request:http_request ) {
    var path = request.path.[6 to];
    if path =="" or path == "/" do
       write(conn,make_see_other("/wiki/wiki_main.fdoc"));
      return;
    done
    var fname = get_title(conn,request);//(get_fname(request)).or_else "wiki_main.fdoc";
    val dirname = Filename::dirname path;
    var content:string = "";
    var html:string = "";
    var hd:string = "";
    var needs_mathjax=false;
    var ok=false;
    if has_doc(path) do
      content = match get_doc(path) with |Some ?e => e.content |_ => "" endmatch;
    elif fname ==  "wiki_main.fdoc" do
      content = load_template("wiki-welcome.html");
      fname = "Welcome to the Felix wiki!";
    else
      write(conn,make_see_other("/wiki/edit/"+path));
      return;
    done
    ok,needs_mathjax,hd,html = format_doc(content,path);
    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("<!--___CUSTOM_HEADER___-->",hd),
         Cons(("___CENTER_CONTENT___",html),
         Cons(("___FNAME___",fname),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
    write(conn,data);
  }

 fun html_route(config:server_config,request:http_request) ={
   return startswith request.path  "/js/" or startswith request.path  "/css/" or
     startswith request.path  "/images/" or startswith request.path  "/CodeMirror/";

  }


  proc html (conn:http_connection, request:http_request ) {
    if  has_html_doc(request.path) do
      match get_html_doc(request.path) with
        | Some ?s => {write(conn,make_html(s.content));}
        | _ => { handle_not_found(conn,request); }
      endmatch;
    elif (handle_css_route(conn.config,request)) do handle_css(conn,request);  
    elif (handle_js_route(conn.config,request)) do handle_js(conn,request);
    elif (handle_image_route(conn.config,request)) do handle_image(conn,request);
    else
        handle_not_found(conn,request);
    done
    return;
  }



  fun edit_route(config:server_config,request:http_request) =>
    startswith request.path  "/wiki/edit/";

  proc edit (conn:http_connection, request:http_request ) {
    var txt:string = "";
    var path = request.path.[11 to];
    if not path_exists(path) do
      handle_not_found(conn,request);
      return;
    done
    if has_doc(path) do
      txt = match get_doc_for_edit(conn.config,path) with |Some ?e => e.content |_ => "" endmatch;
    done
    var fname = (get_fname(request)).or_else "";
    val html = apply_to_template("edit-body.html",
         Cons(("___TEXT_TO_EDIT___",txt),
         Cons(("___FNAME___",fname),
         Cons(("___PATH___",path),
         Empty[string^2]))));
    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("___CENTER_CONTENT___",html),
         Cons(("___FNAME___",fname),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         Cons(("<!--___CUSTOM_HEADER___-->",apply_to_template(
          "edit-head.html",Cons(("___PATH___",path),
                           Empty[string^2]))),
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
    write(conn,data);
  }

  fun delete_route(config:server_config,request:http_request) =>
    startswith request.path  "/wiki/delete/";

  proc delete (conn:http_connection, request:http_request ) {
    var path = request.path.[13 to];
    if not path_exists(path) do
      handle_not_found(conn,request);
      return;
    done
    var fname= (get_fname(request)).or_else "";
    if has_doc(path) do
      var retval,msg = delete_doc(path) ;
        if retval do
          write(conn,make_html(q"<p>$(fname) deleted\n$(msg)</p>"));
        else
          write(conn,make_html(q"<p>Error deleting $(fname)\n$(msg)</p>"));
        done

    else
         write(conn,make_html(q"<p>Error deleting $(fname)\n$(msg)</p>"));
    done
  }


 fun save_edit_route(config:server_config,request:http_request) =>
    (startswith request.path  "/wiki/edit/") and str(request.hmethod) == str(POST);


  proc save_edit (conn:http_connection, request:http_request ) {
    var path = request.path.[11 to];
    if not path_exists(path) do
      handle_not_found(conn,request);
      return;
    done
    var txt = strip_ctrl_m((get_post_param(request,"content")).or_else "");    
      var ok,msg = if has_doc(path) then
         update_doc(entry(path,txt))
        else
          insert_doc(entry(path,txt))
        endif;
      if ok do
        write(conn,make_html(q"<p>$(path) saved!\n$(msg)</p>"));
      else
        write(conn,make_html(q"<p>$(msg)</p>"));
        //wiki(conn,request);
      done
  }

    fun preview_route(config:server_config,request:http_request) ={
      return startswith request.path  "/wiki/preview/" and str(request.hmethod) == str(POST);
    }

  proc preview (conn:http_connection, request:http_request ) {
    conn.config.log(INFO,"preview");
    var path = request.path.[15 to];
    var fname= let ?f = ((get_fname(request)).or_else "") in if f == "" then "main.fdoc" else f endif;
    conn.config.log(INFO,"preview:"+fname);
    var content = strip_ctrl_m((get_post_param(request,"content")).or_else "");
    def val ok,val needs_mathjax,val hd,val html = format_doc(content,path);
    write(conn,make_html(html));
  }




  fun web_route(config:server_config,request:http_request) => startswith request.path "/web/";

  proc web(conn:http_connection,request:http_request) {
    var re_conn = conn;
    var fname = get_title(conn,request);
    if get_suffix(request.path) == "fdoc" do
    var path = request.path.[5 to];
    var content:string = "";
    var html:string = "";
    var hd:string = "";
    var needs_mathjax=false;
    var ok=false;
println$ path;
    if has_document(DOCUMENT_ROOT,path) do
      content = match get_document(DOCUMENT_ROOT,path) with |Some ?e => e.content |_ => "" endmatch;
    else 
      write(conn,make_see_other("/wiki/edit/"+path));
      return;
    done
    ok,needs_mathjax,hd,html = format_doc(content,path);
    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("<!--___CUSTOM_HEADER___-->",hd),
         Cons(("___CENTER_CONTENT___",html),
         Cons(("___FNAME___",fname),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
    write(conn,data);
    else
      re_conn.config.document_root = #Config::config.FLX_INSTALL_DIR;
      iter (proc (handler:http_handler) { 
        if not *re_conn.dirty  do
          if handler.handles(re_conn.config,request) do
            handler.handler_fn(re_conn,request);
          done
        else
          goto finished; 
        done
        }) (default_handlers());
      finished:> 
        return;
    done
    }

  fun lib_route(config:server_config,request:http_request) => startswith request.path "/lib/";

  proc lib(conn:http_connection,request:http_request) {
    var re_request = request;
    re_request.path ="/"+request.path;
    re_request.params = Cons((get_suffix(request.path),""),Empty[string^2]);
    inc(conn,re_request); 
  }

  fun inc_route(config:server_config,request:http_request) => startswith request.path "/$/";

  proc inc(conn:http_connection,request:http_request) {
    var path = request.path.[1 to];
    if path =="" or path == "/" do
       write(conn,make_see_other("/wiki/wiki/wiki_main.fdoc"));
      return;
    done
    var fname = (get_fname(request)).or_else "wiki_main.fdoc";
    val dirname = Filename::dirname path;
    def val ok,val needs_mathjax, val hd, val html =  match get_ref_file(path,C_PATH) with 
      |Some ?e => format_doc(load(e),path) |_ => false,false,"","Not Found" 
    endmatch;
    
    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("<!--___CUSTOM_HEADER___-->",hd),
         Cons(("___CENTER_CONTENT___",html),
         Cons(("___FNAME___",fname),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
    write(conn,data);

  }

  fun dir_route(config:server_config,request:http_request) ={
    return startswith request.path  "/dir/";
  }

  proc dir (conn:http_connection, request:http_request) {
    var rpath = if endswith  request.path "/" then request.path.[0 to (len(request.path)-1)] 
                                              else request.path endif;
    var path = if endswith  rpath "/" then rpath.[5 to (len(rpath)-1)] else rpath.[5 to] endif;
    var fspath = Filename::join(WIKI_ROOT,path);
    var dir_list = "<ul>";
    var href = "";
    var icon = "";
    match FileStat::filetype fspath with
    | DIRECTORY => {
      match Directory::filesin fspath with
      | Some ?files => { iter (proc (y:string) {
        if y != "." do
      	  if y == ".." do
            if rpath != "/dir" do 
              href,icon = double_dot(rpath),"ui-icon ui-icon-folder-collapsed";
              dir_list = dir_list+ q"<li><span ><span class='$(icon)' style='float:left;'></span> <span ><a href='$(href)'>$(y)</a></span> </span></li>";
             
            done
      	  else      
	    href,icon = match FileStat::filetype (Filename::join(fspath,y)) with
                | DIRECTORY => q"$(rpath)/$(y)","ui-icon ui-icon-folder-collapsed"
                | REGULAR => q"/wiki/$(path)/$(y)","ui-icon ui-icon-document"
                | _ => "#",""                
            endmatch;
            val link = q"<li><span ><span class='$(icon)' style='float:left;'></span> <span ><a href='$(href)'>$(y)</a></span> </span></li>";
            dir_list = dir_list+link;
      	  done
      done
      }) (sort(files));
    }
    | None => {  }
    endmatch;
  }
  | REGULAR => {write(conn,make_see_other(q"/wiki/$(path)"));}
  |_ => {write(conn,make_see_other(q"/error/dir/$(path)"));}
  endmatch;
  dir_list = q"$(dir_list)</ul>";
  val data = make_html(
    apply_to_template("page-template.html",
    Cons(("___CENTER_CONTENT___",dir_list),
    Cons(("___FNAME___",path),
    Cons(("___CTRLS___",set-ctrls(conn,request)),
    Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
    Empty[string^2]))))));
    write(conn,data);
}


  fun pull_route(config:server_config,request:http_request) ={
    return startswith request.path  "/wiki/pull/";
  }

  proc pull (conn:http_connection, request:http_request ) {
    var fname= let ?f = ((get_fname(request)).or_else "") in if f == "" then "main.fdoc" else f endif;
    var txt:string;
    if has_doc(fname) do
      txt = match get_doc(fname) with
               | Some ?s => s.content
               | _ => ""
             endmatch;
      write(conn,make_html(txt));
    else 
        handle_not_found(conn,request);
        return;
    done
  }



  fun get_suffix(fn:string) = {
    var fname = fn;
    var suffix = "";
    match rfind (fname, "?") with
      | Some ?pos => { suffix = fname.[pos + 1 to]; fname=fname.[0 to pos]; }
      | None[int] =>
      {
        match rfind (fname, ".") with
          | None[int] => {}
          | Some ?pos => { suffix = fname.[pos + 1 to]; }
        endmatch; 
      }
    endmatch;
    return suffix;
  }

  fun double_dot (path:string):string ={
    var p = match rev(split(path,'/')) with
      | Cons(?hd,?tl) => 
            fold_left (fun(x:string) (y:string):string => x +"/"+ y) "" (rev(tl))
      | ?f => path
    endmatch;
    return if len(p) > size(1) then p.[ 1 to ] else p endif+"/"; 
  }

  fun users_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/users/";
  }

  proc users (conn:http_connection, request:http_request ) {
    val groups = "<select name='group' id='group'>"+
      (fold_left (fun(x:string) (y:string):string => x +""+ y)  ""
       (map (fun (a:string^2) => "<option value='"+a.(0)+"'>"+a.(1)+"</option>") 
         (db_get_groups())))+"</select>";
    val users = 
      (fold_left (fun(x:string) (y:string):string => x +""+ y)  ""
       (map (fun (a:string^5) => "<tr><td><a onclick=\"sel_user('"+a.(0)+"','"+ 
           a.(1)+"','"+ a.(2)+"','"+a.(4)+"')\"'>select</a></td><td>"+a.(0)+"</td><td>"+a.(1)+"</td><td>"+a.(3)+"</td><td>"+a.(4)+"</td></tr>") 
         (db_get_users())));


    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("___CENTER_CONTENT___",
           apply_to_template("users-form.html",
             
             Cons(("___GROUP_SELECT___",groups),
             Cons(("___USERS___",users),
             Empty[string^2])))),
         Cons(("<!--___CUSTOM_HEADER___-->",load_template("users-head.html")),
         Cons(("___FNAME___","User Administration"),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
  ;
     write(conn,data);
  }

  fun users_table_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/users/table/";
  }

 proc users_table (conn:http_connection, request:http_request ) {
    val users = 
      (fold_left (fun(x:string) (y:string):string => x +""+ y)  ""
       (map (fun (a:string^5) => "<tr><td><a onclick=\"sel_user('"+a.(0)+"','"+ 
           a.(1)+"','"+ a.(2)+"','"+a.(4)+"')\"'>select</a></td><td>"+a.(0)+"</td><td>"+a.(1)+"</td><td>"+a.(3)+"</td><td>"+a.(4)+"</td></tr>") 
         (db_get_users())));
    val data = make_html(apply_to_template("users-table.html",
             Cons(("___USERS___",users),
         Empty[string^2])));
     write(conn,data);
  }


  fun users_edit_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/users/edit/";
  }

  proc users_edit (conn:http_connection, request:http_request ) {
    var user= (get_fname(request)).or_else "";
    var grp = (get_post_param(request,"grp")).or_else "";
    var name = (get_post_param(request,"name")).or_else "";
    var email = (get_post_param(request,"email")).or_else "";
    val message = if (if db_has_user(user) then
          db_update_user(user,name,grp,email)
        else
          db_add_user(user,"",name,grp,email)
        endif) then
      "User update successful"
    else
      "User update failed"
    endif;
    write(conn,make_html("<p>"+message+"</p>"));
  }


  fun users_reset_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/users/reset/";
  }

  proc users_reset (conn:http_connection, request:http_request ) {
    var user= (get_fname(request)).or_else "";
    var passwd = strip_ctrl_m((get_post_param(request,"password")).or_else "");

    val message = if db_reset_password(user,passwd) 
      then "<p>"+user+" reset!</p>"
      else "<p>"+user+" reset failed!</p>"
    endif; 
    write(conn,make_html(message));
  }


  fun users_delete_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/users/delete/";
  }

  proc users_delete (conn:http_connection, request:http_request ) {
    var user= (get_fname(request)).or_else "";
    val message = if db_delete_user(user) 
      then "<p>"+user+" deleted!</p>"
      else "<p>"+user+" deletion failed!</p>"
    endif; 
    write(conn,make_html(message));
  }

  fun user_profile_route(config:server_config,request:http_request) ={
    return startswith request.path  "/user/profile/";
  }


   proc user_profile (conn:http_connection, request:http_request ) {
     var data = "";  
     match authorized_user(conn,request) with
       |Some ?u => { 
          val user = let Some ?v = db_get_user(u) in v;
          val profile = "<table><tr><td>User:</td><td>"+user.(0)+"</td></tr>"+
            "<tr><td>Name:</td><td>"+user.(1)+"</td><tr>"+
            "<tr><td>Group:</td><td>"+user.(3)+"</td></tr>"+
            "<tr><td>Email</td><td>"+user.(4)+"</td></tr></table><br/>";
          
          data = make_html(
            apply_to_template("page-template.html",
              Cons(("___CENTER_CONTENT___",profile + load_template("user-reset-password.html")),
              Cons(("<!--___CUSTOM_HEADER___-->",load_template("user-head.html")),
              Cons(("___FNAME___","User Profile"),
              Cons(("___CTRLS___",set-ctrls(conn,request)),
              Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
             Empty[string^2])))))));
      }
      |_ => { handle_not_found(conn,request);
              return;}
    endmatch;
     write(conn,data);
  }

  fun user_reset_route(config:server_config,request:http_request) ={
    return startswith request.path  "/user/reset/";
  }


  proc user_reset (conn:http_connection, request:http_request ) {
    match authorized_user(conn,request) with
    |Some ?u => { 
      var passwd = strip_ctrl_m((get_post_param(request,"password")).or_else "");
      val message = if db_reset_password(u,passwd) 
        then "<p>"+u+" reset!</p>"
        else "<p>"+u+" reset failed!</p>"
        endif; 
      write(conn,make_html(message));}
    |_ => { handle_not_found(conn,request);
              return;}
    endmatch;
  }


  fun path_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/path/";
  }


  proc path (conn:http_connection, request:http_request ) {
    val groups = "<select name='group' id='group'>"+
      (fold_left (fun(x:string) (y:string):string => x +""+ y)  ""
       (map (fun (a:string^2) => "<option value='"+a.(0)+"'>"+a.(1)+"</option>") 
         (db_get_groups())))+"</select>";
     /*val lvls = "<select name='lvl' id='lvl'><option value='ro'>ro</option>"+
                "<option value='rw'>rw</option></select>"; */
    val paths = 
      (fold_left (fun(x:string) (y:string):string => x + "" + y)  ""
       (map (fun (a:string^4) => "<tr><td><a onclick=\"sel_path('" + a.(0) + "','"+ 
           a.(2) + "','" + a.(3) + "')\"'>select</a></td><td>"+a.(1)+"</td><td>" + a.(2) + "</td><!-- <td>" + a.(3) + "</td>--></tr>") 
         (db_get_paths())));


    val data = make_html(
        apply_to_template("page-template.html",
         Cons(("___CENTER_CONTENT___",
           apply_to_template("path-form.html",
             //Cons(("___LVL_SELECT___",""  lvls ),
             Cons(("___GROUP_SELECT___",groups),
             Cons(("___PATHS___",paths),
             Empty[string^2])))),//),
         Cons(("<!--___CUSTOM_HEADER___-->",load_template("path-head.html")),
         Cons(("___FNAME___","Wiki Access"),
         Cons(("___CTRLS___",set-ctrls(conn,request)),
         
         Cons(("<!--___MENU___-->",load_template("main-menu.html") + admin-menu(conn,request)),
         Empty[string^2])))))));
  ;
     write(conn,data);
  }

  fun path_table_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/path/table/";
  }

 proc path_table (conn:http_connection, request:http_request ) {
   val paths = 
      (fold_left (fun(x:string) (y:string):string => x + "" + y)  ""
       (map (fun (a:string^4) => "<tr><td><a onclick=\"sel_path('" + a.(0) + "','"+ 
           a.(2) + "','" + a.(3) + "')\"'>select</a></td><td>"+a.(1)+"</td><td>" + a.(2) + "</td>" + /* "<td>" + a.(3) + "</td>"*/ "</tr>") 
         (db_get_paths())));

    val data = make_html(apply_to_template("paths-table.html",
             Cons(("___PATHS___",paths),
         Empty[string^2])));
     write(conn,data);
  }


  fun path_edit_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/path/edit/";
  }

  proc path_edit (conn:http_connection, request:http_request ) {
    var grp = (get_post_param(request,"grp")).or_else "";
    var path = (get_post_param(request,"path")).or_else "";
    var lvl = (get_post_param(request,"lvl")).or_else "";
    val message = if (if db_has_path(path,grp) then
          db_update_path(path,grp,lvl)
        else
          db_add_path(path,grp,lvl)
        endif) then
      "Path update successful"
    else
      "Path update failed"
    endif;
    write(conn,make_html("<p>"+message+"</p>"));
  }

  fun path_delete_route(config:server_config,request:http_request) ={
    return startswith request.path  "/admin/path/delete/";
  }

  proc path_delete (conn:http_connection, request:http_request ) {
    var grp = (get_post_param(request,"grp")).or_else "";
    var path = (get_post_param(request,"path")).or_else "";
    val message = if db_delete_path(path,grp) 
      then "<p>Path deleted!</p>"
      else "<p>Path deletion failed!</p>"
    endif; 
    write(conn,make_html(message));
  }


  fun get-wiki_route(config:server_config,request:http_request) ={
    return startswith request.path  "/wiki/get-wiki";
  }

  proc get-wiki (conn:http_connection, request:http_request ) {
    var user= (get_fname(request)).or_else "";
    var method = strip_ctrl_m((get_post_param(request,"get-option")).or_else "");

    val message = q"<h1>Getting wiki with $(method)</h1>;

    write(conn,make_html(message));
  }




}
