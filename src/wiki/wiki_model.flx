class WikiModel {
  open Sqlite3;
  open Sqlite3Ext;

  gen db_get_auth_fdoc(name:string,passwd:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = """SELECT count(*) 
FROM users WHERE user='"""+name+"' AND password='"+Base64::encode(passwd)+"'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  =>  var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      if get_next(it,&row) do
                        val ret =  (match row with
                                  |row ?r => get_int_val(get(r,0))>0
                                  |_ => false
                                endmatch);
                        C_hack::ignore(sqlite3_finalize(s));
                        return ret; 
                      else 
                        return false;
                      done
      | _ =>  return false;
     endmatch;
    return None[entry];
  }

  fun db_get_groups():list[string^2] = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = "SELECT grp,description FROM grp"; 
    var result:list[string^2] = Empty[string^2];
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => 
        var it = sqlite3_row_iterator (s);
        var row:ret_val[darray[column_value]];
        while (get_next(it,&row)) do
          result = result+Cons( (let row ?r = row in  
            ((get_text_val(get(r,0))),(get_text_val(get(r,1))))),
            Empty[string^2]);
        done
      |qry_fail (?a,?b) => result = Empty[string^2];
     endmatch;
    return result;
  }

  fun db_get_users():list[string^5] = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = """SELECT user,name,grp.grp,description,email FROM users
                 INNER JOIN grp on grp.grp = users.grp
"""; 
    var result:list[string^5] = Empty[string^5];
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => 
        var it = sqlite3_row_iterator (s);
        var row:ret_val[darray[column_value]];
        while (get_next(it,&row)) do
          result = result+Cons( (let row ?r = row in  
            ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
             (get_text_val(get(r,2))),(get_text_val(get(r,3))),
             (get_text_val(get(r,4))))),
            Empty[string^5]);
        done
      |qry_fail (?a,?b) => result = Empty[string^5];
     endmatch;
    return result;
  }

    fun db_get_user(user:string):opt[string^5] = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"""SELECT user,name,grp.grp,description,email FROM users
                 INNER JOIN grp on grp.grp = users.grp where user='$(user)'"""; 
    var result:opt[string^5] = None[string^5];
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => 
        var it = sqlite3_row_iterator (s);
        var row:ret_val[darray[column_value]];
        if (get_next(it,&row)) do
          return Some (let row ?r = row in  
            ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
             (get_text_val(get(r,2))),(get_text_val(get(r,3))),
             (get_text_val(get(r,4)))));
        else
          return None[string^5];
        done;    
        
      |qry_fail (?a,?b) => return  None[string^5];
     endmatch;
    return result;
  }


  gen db_get_path_auth(name:string,path:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"""SELECT path FROM authorized_paths 
                   INNER JOIN users ON users.grp = authorized_paths.grp 
                   WHERE users.name = '$(name)'""";   
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  =>  var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      if get_next(it,&row) do
                        val ret =  (match row with
                                  |row ?r => get_text_val(get(r,0)) == path
                                  |_ => false
                                endmatch);
                        C_hack::ignore(sqlite3_finalize(s));
                        return ret; 
                      else 
                        return false;
                      done
      | _ =>  return false;
     endmatch;
    return None[entry];
  }
  
  fun db_reset_password(user:string,password:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = "UPDATE users SET password='"+Base64::encode(password)+q"' WHERE user='$(user)'";
     match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }

  gen db_add_user(user:string,password:string,name:string,grp:string,email:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val passwd = Base64::encode(password);
    val qry = q"""INSERT INTO users (user,password,name,grp,email)
                  VALUES ('$(user)','$(passwd)','$(name)','$(grp)','$(email)')""";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }

  gen db_update_user(user:string,name:string,grp:string,email:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    
    val qry = q"""UPDATE users SET name='$(user)',grp='$(grp)',email='$(email)'
                  WHERE user='$(user)'""";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }


  gen db_delete_user(user:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"DELETE FROM users WHERE user='$(user)'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }

  gen db_has_user(user:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"SELECT count(*) FROM users WHERE user='$(user)'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  =>  var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      if get_next(it,&row) do
                        val ret =  (match row with
                                  |row ?r => get_int_val(get(r,0))>0
                                  |_ => false
                                endmatch);
                        C_hack::ignore(sqlite3_finalize(s));
                        return ret; 
                      else 
                        return false;
                      done
      | _ =>  return false;
     endmatch;
    return None[entry];
  }

  gen db_user_is_admin(user:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"SELECT count(*) FROM users WHERE user='$(user)' AND grp='admin'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  =>  var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      if get_next(it,&row) do
                        val ret =  (match row with
                                  |row ?r => get_int_val(get(r,0))>0
                                  |_ => false
                                endmatch);
                        C_hack::ignore(sqlite3_finalize(s));
                        return ret; 
                      else 
                        return false;
                      done
      | _ =>  return false;
     endmatch;
    return None[entry];
  }

  fun db_get_paths():list[string^4] = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = """SELECT grp.grp,description,path,lvl FROM paths
                 INNER JOIN grp on grp.grp = paths.grp
"""; 
    var result:list[string^4] = Empty[string^4];
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => 
        var it = sqlite3_row_iterator (s);
        var row:ret_val[darray[column_value]];
        while (get_next(it,&row)) do
          result = result+Cons( (let row ?r = row in  
            ((get_text_val(get(r,0))),(get_text_val(get(r,1))),
             (get_text_val(get(r,2))),(get_text_val(get(r,3))))),
            Empty[string^4]);
        done
      |qry_fail (?a,?b) => result = Empty[string^4];
     endmatch;
    return result;
  }

  gen db_add_path(path:string,grp:string,lvl:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"""INSERT INTO paths (path,grp,lvl)
                  VALUES ('$(path)','$(grp)','$(lvl)')""";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }

  gen db_update_path(path:string,grp:string,lvl:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    
    val qry = q"""UPDATE paths SET path='$(path)',grp='$(grp)',lvl='$(lvl)'
                  WHERE path='$(path)' AND grp='$(grp)'""";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }


  gen db_delete_path(path:string,grp:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"DELETE FROM paths WHERE path='$(path)' AND grp='$(grp)'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => return sqlite3_execute(s); 
      | qry_fail (?c,?m) =>return false;
    endmatch;
    return false;
  }

  gen db_has_path(path:string,grp:string):bool = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"SELECT count(*) FROM paths WHERE path='$(path)' AND grp='$(grp)'";
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  =>  var it = sqlite3_row_iterator (s);
                      var row:ret_val[darray[column_value]];
                      if get_next(it,&row) do
                        val ret =  (match row with
                                  |row ?r => get_int_val(get(r,0))>0
                                  |_ => false
                                endmatch);
                        C_hack::ignore(sqlite3_finalize(s));
                        return ret; 
                      else 
                        return false;
                      done
      | _ =>  return false;
     endmatch;
    return None[entry];
  }

  gen db_paths_for_user(user:string):list[string^2] = {
    val db = let Some ?d = db_pool.get_next() in d;
    val qry = q"""SELECT path,lvl FROM paths 
                 INNER JOIN users on users.grp = paths.grp
                 WHERE user = '$(user)'
"""; 
    var result:list[string^2] = Empty[string^2];
    match sqlite3_prepare_stmt(db,qry) with
      | qry_ok ?s  => 
        var it = sqlite3_row_iterator (s);
        var row:ret_val[darray[column_value]];
        while (get_next(it,&row)) do
          result = result+Cons( (let row ?r = row in  
            ((get_text_val(get(r,0))),(get_text_val(get(r,1))))),
            Empty[string^2]);
        done
      |qry_fail (?a,?b) => result = Empty[string^2];
     endmatch;
    return result;
  }

 /* fun path_matches(path:string,list[string^2]) = {
  val txt = load(handle);
  val re = RE2(r"(publish (\"|\"\"\")).*(\"|\"\"\"))");
  var groups : array[Re2::StringPiece,2];
  var nmatch = 2;
  val res = Match(re,Re2::StringPiece(txt),0,ANCHOR_BOTH,carray (&groups),nmatch);
  if res do
    println$ "Matched " + s + ", n="+ str groups.(1);
  else
    println$ "No match " + s;
  done
} */

  gen db_create_db(wiki_db_file_name:string):bool*string = {
    // Autocreate wiki db
    var wiki_db_create_sql = """
BEGIN IMMEDIATE TRANSACTION;
create table fdocs (
  name text primary key,
  content text,
  modified_on timestamp,
  modified_by text );

create table users (
  user text primary key,
  password text,
  grp text,
  name text,  
  email text
);

create table fdocs_archive (
  name text primary key,
  content text,
  modified_on timestamp,
  modified_by text );

create table authorized_paths (
  path text,
  grp text);

create table grp (
  grp text,
  description);
 
create table locks (
path text primary key,
user text,
ts timestamp);

create table paths (
path text ,
grp txt,
lvl text,
primary key(path,grp));
INSERT INTO users (user,password,grp,name,email) VALUES('felix','ZmVsaXg=','admin','Wiki Administrator','');
INSERT INTO grp (grp,description) VALUES('admin','Wiki Administrators');
INSERT INTO grp (grp,description) VALUES('public','Public');
INSERT INTO paths (path,grp,lvl) values ('.*','public','');
INSERT INTO paths (path,grp,lvl) values ('.*','admin','');

COMMIT TRANSACTION;
""";
    var errmsg: +char;
    var db : Sqlite3::sqlite3_db_t;
    var err = Sqlite3::sqlite3_open(wiki_db_file_name, &db);
    if err != 0 do
      return false,("sqlite3 cannot open database file " + wiki_db_file_name + ", aborting");
    done
    
    val ret = if sqlite3_exec(db,wiki_db_create_sql,&errmsg) == 0 then 
                true,("wiki database created successfully") 
              else 
                false,("Sqlite3 return error creating database: "+str(errmsg))
    endif; 
    Sqlite3::sqlite3_close(db);
    return ret;
  }


}
