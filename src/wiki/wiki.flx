include "./wiki_model";
include "./wiki_file_model";
include "web/web_server";
include "./wiki_handler";
include "./util";
include "codec/uri_codec";
include "./document_plugins";

open HTTPRequest;
open HTTPHandler;
open Logger;
open WebServer;
open Csv;
open Assoc_list;
open ServerConfig;	
open Str[server_config];
open SimpleConfig;


var config = basic_server_config( WikiHandler::app_handlers() + default_handlers(),"wiki");

val info_logger = match SimpleConfig::get_param(config.params,"info_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        INFO)
  |_ => Empty[log_handler]
endmatch;
val debug_logger = match SimpleConfig::get_param(config.params,"debug_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        DEBUG)
  |_ => Empty[log_handler]
endmatch;

config.log  = logger(debug_logger +info_logger  );


var wiki_db_file_name = 
  match (get_param_list(config.params,"DB")) with
    | Cons(?s,_) => s
    | _ => "db/wiki.db"
  endmatch
;
println$ "wiki db name = " wiki_db_file_name;
if not wiki_db_file_name.FileStat::fileexists do
  println$ "Wiki db doesn't exist, creating it";
  match (WikiModel::db_create_db(wiki_db_file_name)) with
  | false,?m => fail(m);
  | true,?m => println$ m;
  endmatch;
done
val db_pool: Pool::pool[Sqlite3::sqlite3_db_t] = 
  Sqlite3Pool::sqlite3_pool(wiki_db_file_name)
;

config.log(INFO,"Starting wiki server");
config.log(CUSTOM1,"Starting reop server");

val INSTALL_ROOT = #Config::config.FLX_INSTALL_DIR;
val FLX_PATH = apply_param_vars_to(config.params,
                                   get_param_list(config.params,"FLX_PATH"));
val FDOC_PATH = apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"FDOC_PATH"));
val WIKI_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"WIKI_ROOT")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val GIT_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"GIT_ROOT")) with
                |Cons(?p,_) => p
                |_ => "!"
                endmatch;
val SERVER_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"server_root")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val TEMPLATE_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"TEMPLATE_ROOT")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val C_PATH = apply_param_vars_to(config.params,
                                    get_param_list(config.params,"C_PATH"));
val FLX_PKGCONFIG_PATH = apply_param_vars_to(config.params,
                                             get_param_list(config.params,"FLX_PKGCONFIG"));


config.log(INFO,"Starting wiki server");
config.log(CUSTOM1,"Starting reop server");

load_plugins(config.file_name);
println$  (str(config));
start_webserver(config);
