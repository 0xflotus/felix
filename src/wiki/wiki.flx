include "./wiki_model";
include "./wiki_file_model";
include "web/web_server";
include "./wiki_handler";
include "./util";
include "codec/uri_codec";
include "./document_plugins";

open HTTPRequest;
open HTTPHandler;
open Logger;
open WebServer;
open Csv;
open Assoc_list;
open ServerConfig;	
open SimpleConfig;

var wiki_db_init_sql = """
create table fdocs (
  name text primary key,
  content text,
  modified_on timestamp,
  modified_by text );

create table users (
  user text primary key,
  password text,
  grp text,
  name text,  
  email text
);

create table fdocs_archive (
  name text primary key,
  content text,
  modified_on timestamp,
  modified_by text );

create table authorized_paths (
  path text,
  grp text);

create table grp (
  grp text,
  description);
 
create table locks (
path text primary key,
user text,
ts timestamp);

create table paths (
path text ,
grp txt,
lvl text,
primary key(path,grp));
""";

var config = basic_server_config( WikiHandler::app_handlers() + default_handlers(),"wiki");
val info_logger = match SimpleConfig::get_param(config.params,"info_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        INFO)
  |_ => Empty[log_handler]
endmatch;
val debug_logger = match SimpleConfig::get_param(config.params,"debug_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        DEBUG)
  |_ => Empty[log_handler]
endmatch;

config.log  = logger(debug_logger +info_logger  );


var wiki_db_file_name = 
  match (get_param_list(config.params,"DB")) with
    | Cons(?s,_) => s
    | _ => "db/wiki.db"
  endmatch
;
println$ "wiki db name = " wiki_db_file_name;

// Autocreate wiki db
if not wiki_db_file_name.FileStat::fileexists do
  println$ "Wiki db doesn't exist, creating it";
  var db : Sqlite3::sqlite3_db_t;
  var err = Sqlite3::sqlite3_open(wiki_db_file_name, &db);
  if err != 0 do
    fail ("sqlite3 cannot open database file " + wiki_db_file_name + ", aborting");
  done
  var errmsg : &char;
  err = Sqlite3::sqlite3_exec (db,wiki_db_init_sql, &errmsg);
  if err != 0 do
    println$ "Sqlite3 return error creating database: " + string(errmsg);
  done
  Sqlite3::sqlite3_close(db);
done

val db_pool: Pool::pool[Sqlite3::sqlite3_db_t] = 
  Sqlite3Pool::sqlite3_pool(wiki_db_file_name)
;

config.log(INFO,"Starting wiki server");
config.log(CUSTOM1,"Starting reop server");

val INSTALL_ROOT = #Config::config.FLX_INSTALL_DIR;
val FLX_PATH = apply_param_vars_to(config.params,
                                   get_param_list(config.params,"FLX_PATH"));
val FDOC_PATH = apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"FDOC_PATH"));
val WIKI_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"WIKI_ROOT")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val GIT_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"GIT_ROOT")) with
                |Cons(?p,_) => p
                |_ => "!"
                endmatch;
val SERVER_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"server_root")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val TEMPLATE_ROOT = match apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"TEMPLATE_ROOT")) with
                |Cons(?p,_) => p
                |_ => "."
                endmatch;
val C_PATH = apply_param_vars_to(config.params,
                                    get_param_list(config.params,"C_PATH"));
val FLX_PKGCONFIG_PATH = apply_param_vars_to(config.params,
                                             get_param_list(config.params,"FLX_PKGCONFIG"));
load_plugins(config.file_name);
start_webserver(config);
