class WikiTool {

  proc help() {
    println("WIKI tool help");
    //        --root=PATH          Optional path to flatten to or post from otherwise CWD
    println("Usage: "+(System::argv 0)+""" [OPTION] [fdoc]
        --tool=push|pull     Selects push or pull tool
        --user=user:password Username and password for wiki
        --url=URL            Base URL of wiki to post to or flatten from
        [fdoc]               if --tool=post fdoc document to post
"""); 
  }

  proc which_tool {
    var arg = "";
    var argno = 1;
    var tool:string = "";
    var url:string = "";
    var doc_root:string = "";
    var user:string = "";
    while argno<System::argc do
      arg = System::argv argno;
      println$ "ARG=" + arg;
      if prefix(arg,"--tool=") do
        tool = arg.[7 to];
      elif prefix(arg,"--url=") do
        url =  arg.[6 to];
      elif prefix(arg,"--root=") do
        doc_root =  arg.[7 to];
      elif prefix(arg,"--user=") do
        user =  arg.[7 to];
      done
      ++argno;
    done

    if tool == "help"  do
      help(); 
    done
    if tool == "" do 
      return;   //Not a tool start the server
    elif tool == "pull" do
      pull(url,doc_root,user,System::argv (System::argc - 1)); 
    elif tool == "push" do 
      push(url,doc_root,user,System::argv (System::argc - 1)); 
    else
      println("Invalid tool:"+tool);
      help(); 
    done      
    System::exit(0);
  }

  proc pull(url:string,doc_root:string,user:string,doc:string) {
    println("flatten "+doc+" from "+url);
    open Input_text_file;
    var fn:string = FileSystem::tmp_filename();
    val cmd = "curl  --data @"+fn+" --anyauth --user "+user+" "+
          "-o "+doc+" "+url+"/wiki/pull/"+doc;
    println(cmd);
    if System::system(cmd) == 0 do
      println("Pull successful");
    else
      println("Pull failed");
    done   
  }

  proc push(url:string,doc_root:string,user:string,doc:string) {
    open Output_text_file;
    println("Posting:"+doc+" to "+url);
    var data = load(doc);
    var enc:string = "content="+URICodec::uri_encode(data);
    var fn:string = FileSystem::tmp_filename();
    var post_handle = fopen_output (fn);
    if not valid post_handle do
      eprintln("Unable to open tmpfile:"+fn);
    else
      fprint (post_handle,enc);
      fflush(post_handle);
      fclose(post_handle);
      val cmd = "curl  --data @"+fn+" --anyauth --user "+user+" "+
          url+"/wiki/edit/"+doc;
      println(cmd);
      if System::system(cmd) == 0 do
        println("Post successful");
        val clock = Faio::mk_alarm_clock();
        Faio::sleep(clock,0.1);
      else
        println("Post failed");
        System::exit(-1);
      done
    done
  }
    
}