
open class DocumentPlugins {
  typedef raw_xlat_t = string*string->bool*string;
  var xlat_felix: raw_xlat_t;
  var xlat_fdoc: raw_xlat_t;
  var xlat_fpc: raw_xlat_t;
  var xlat_ocaml: raw_xlat_t;
  var xlat_py:  raw_xlat_t;
  var xlat_cpp: raw_xlat_t;

proc load_plugins(config_file:string)  {
    var PLUGIN_MAP = Empty[string^3];
    var plugin_spec = RE2 " *extension (.*)->(.*)::(.*)";
    var config_txt = load(config_file);
    var config_lines = split(config_txt, "\n");
    config_lines = map (strip of (string)) config_lines; 
    var result = varray[StringPiece] (4.size,StringPiece(""));
    for line in config_lines do
      var match_result = Match(plugin_spec, StringPiece(line),0,ANCHOR_BOTH, result.stl_begin,4);
      if match_result do
        var extn = result.1.str.strip;
        var lib = result.2.str.strip;
        var entry = result.3.str.strip;
        PLUGIN_MAP = Cons ((extn, lib, entry), PLUGIN_MAP);
      done
    done
    // Load Plugins.
    typedef libmap_entry = string * Dynlink::flx_instance;
    var libs = Empty[libmap_entry];
    fun have_lib (k:string) => Assoc_list::mem (== of (string * string)) libs k;
    var dll_extn = #Config::config.EXT_SHLIB;

    for d in PLUGIN_MAP do 
      match d with 
      | ?ext,?lib,?entr =>
        if not (have_lib lib) do
//println$ "Adding lib " + lib;
          var linst = Dynlink::init_lib(lib + dll_extn);
          var sresult = (Dynlink::func1[int,string] (linst, "setup")) (config_txt);
          C_hack::ignore(sresult);
//println$ lib+ " Library set up " + str sresult;
          libs = Cons ((lib, linst),libs); 
          var x:string*string->bool*string = (Dynlink::func2[bool*string, string, string] (linst,entr));
          match lib with
          | "flx2html" =>  xlat_felix = x;
          | "fdoc2html" => xlat_fdoc = x;
          | "fpc2html" =>  xlat_fpc = x;
          | "py2html" =>  xlat_py = x;
          | "ocaml2html" =>  xlat_ocaml = x;
          | "cpp2html" =>  xlat_cpp = x; 
          endmatch;
        done 
      endmatch;
    done
  }

}
