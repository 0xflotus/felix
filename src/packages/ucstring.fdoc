@title Unique C String
@tangler cstring.flx = share/lib/std/strings/cstring.flx
@tangler ustr.flx = share/lib/std/strings/ustr.flx
@h1 Traditional C Strings

Primitive operations on C strings, distinct from 
corresponding byte operations in that they depend on
or involve the null terminator.

@tangle cstring.flx
// Primitives
class CString
{
  //$ C strcpy.
  proc strcpy: +char * +char = "(void)::std::strcpy($1,$2);" 
    requires Cxx_headers::cstring
  ;

  //$ C strncpy.
  proc strncpy: +char * +char * !ints = "(void)::std::strncpy($1,$2,$3);" 
    requires Cxx_headers::cstring
  ;

  //$ C strlen: NTBS length.
  fun strlen: +char -> size = "::std::strlen($1)" 
    requires Cxx_headers::cstring
  ;

  fun len (s:+char) => strlen s;

  //$ Traditional NTBS strdup.
  gen strdup(s:carray[char]) = {
    val n = strlen s;
    var out=array_alloc[char] (n+1uz);
    strcpy(out,s);
    return out;
  }

}

@h1 Unique C Strings 
A safer way to handle NTBS, using uniq typing to transfer
owenership. Doesn't require GC.

@tangle ustr.flx
open class UniqueCStrings
{
  open CString;
  open Memory;

  private var debug = false;

  typedef ustr = uniq (+char);
  // Constructors
  ctor ustr (s:string) = {
     var p =  (s._unsafe_cstr.strdup);
     if debug perform
       println$ "Creating " + p.repr + " @" + p.address.repr;
     return uniq p;
  }

  ctor ustr (s:+char) => uniq (s.strdup);

  // deletes the store
  proc delete (p:ustr) {
    var q = ununiq p;
    if debug perform
      println$ "Deleting " + q.address.repr;
    free q;
  } 

  // length
  fun len(s:&ustr) : size => s.peek.strlen;

  // modify one char
  fun set (s:ustr, i:int, c:char) : ustr =  {
    var cs = ununiq s;
    set (cs, i, c); // Carray::set
    return uniq cs;
  }

  private gen realloc : +char * !ints -> +char = 
    "(char*)::std::realloc($1,$2)"
    requires Cxx_headers::cstdlib
  ; 

  // reserve storage 
  fun reserve (s:ustr, n:size) : ustr =>
    uniq (realloc (ununiq s,n))
  ;

  // append: consumes y
  fun append (x:ustr, y:ustr): ustr = {
    var cx = ununiq x;
    var cy = ununiq y;
    var lx = cx.len;
    var ly = cy.len;
    var r = realloc (cx, lx+ly+1);
    strncpy (r+lx,cy,ly+1);
    if debug do
      println$ "Realloc @" + cx.address.repr + " -> " + r.address.repr;
      println$ "Free @" + cy.address.repr;
    done
    free cy;
    return uniq r;
  } 

  // append: doesnt consume y
  noinline fun append (x:ustr, py:&ustr): ustr = {
    var cx = ununiq x;
    var cy = py.peek;
    var lx = cx.len;
    var ly = cy.len;
    var r = realloc (cx, lx+ly+1);
    if debug perform
      println$ "Realloc @" + cx.address.repr + " -> " + r.address.repr;
    strncpy (r+lx,cy,ly+1);
    return uniq r;
  } 

  // nicer appends
  fun + (x:ustr, y:ustr) => append (x,y);
  fun + (x:ustr, py:&ustr) => append (x,py);

  proc += (lhs: &ustr, rhs: ustr) => 
    *lhs = append (*lhs,rhs)
  ;
  proc += (lhs: &ustr, rhs: &ustr) => 
    *lhs = append (*lhs,rhs)
  ;

  fun strmov (x:ustr) (var f:int, var l:int) : ustr = {
    var p = x.ununiq;
    var n = p.strlen.int;
    if f < 0 perform f = 0; 
    if f > n perform f = n;
    if l < 0 perform l = f;
    if l > n perform l = n;
    if f != l perform strcpy (p+f, p+l); 
    return uniq p;
  }
 
  fun erase (x:ustr) (sl:slice[int]) : ustr =>
    match sl with
    | Slice_all => set (x,0,char "")
    | Slice_from idx => set (x,idx, char "")
    | Slice_from_counted (first,len) => strmov x (first,first+len)
    | Slice_to_incl incl => strmov x (0,incl)
    | Slice_to_excl excl => strmov x (0, excl - 1)
    | Slice_range_incl (first, last) => strmov x (first, last+1)
    | Slice_range_excl (first, last) => strmov x (first, last) 
    | Slice_one pos => strmov x (pos, pos+1)
  ;

  fun insert (x:ustr) (var pos: int, y:ustr) : ustr =
  {
    var px = ununiq x;
    var py = ununiq y;
    var n = px.strlen.int;
    var m = py.strlen.int; 
    if pos < 0 perform pos = pos + n;
    if pos > n perform pos = n;
    if pos < 0 perform pos = 0;
    px = realloc (px, m + n + 1);
    memmove (px.address + pos, px.address + pos + m, m);
    free py;
    return uniq px;
  }
}
