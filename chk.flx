include "std/strings/grammars";
include "std/strings/recognisers";
include "std/strings/parsers";

open Recognisers;
open Grammars;
open Parsers;
/*
begin
  var xprod = Alt([
    Seq ([Nonterminal[prod_t] "term", Strng[prod_t] "+", Nonterminal[prod_t] "expr"]),
    Nonterminal[prod_t] "term"]);
     
  var tprod = Alt ([
    Seq ([Nonterminal[prod_t] "factor", Strng[prod_t] "*", Nonterminal[prod_t] "term"]),
    Nonterminal[prod_t] "factor"]);

  var fprod = Alt ([Seq ([Nonterminal[prod_t] "atom", Strng[prod_t] "^", Nonterminal[prod_t] "factor"]),
    Nonterminal[prod_t] "atom"]);

  var atom = Alt ([
    Seq ([Strng[prod_t] "(", Nonterminal[prod_t] "expr", Strng[prod_t] ")"]),
    Strng[prod_t] "9"]);


  // library
  var xlib = ([
    ("expr",xprod),
    ("term",tprod),
    ("factor",fprod),
    ("atom",atom)
  ]);

  println$ "Nullable expr  " +  (is_nullable_nt xlib "expr").str;
  println$ "Recursive expr " +  (is_recursive_nt xlib "expr").str;
  println$ "Left rec expr  " +  (is_left_recursive_nt xlib "expr").str;

  var silly = Alt ([
    Seq ([Epsilon[prod_t], Nonterminal[prod_t] "bug", Nonterminal[prod_t] "silly"])
    ])
  ;

  var bug = Alt ([
    Strng[prod_t] "bug",
    Epsilon[prod_t]
    ])
  ;

  var ylib = ([
    ("silly",silly),
    ("bug",bug)
  ]);

  println$ "Nullable silly  " +  (is_nullable_nt ylib "silly").str;
  println$ "Recursive silly " +  (is_recursive_nt ylib "silly").str;
  println$ "Left rec silly  " +  (is_left_recursive_nt ylib "silly").str;
end


begin
  open Parser_synlib;

  var xprod = ALT([
    SEQ ([NT "term", STR "+", NT "expr", REDUCE ("PLUS",3) ]),
    NT "term"]);
     
  var tprod = ALT ([
    SEQ ([NT "factor", STR "*", NT "term", REDUCE ("MUL",3) ]),
    NT "factor"]);

  var fprod = ALT ([SEQ ([NT "atom", STR "^", NT "factor", REDUCE ("EXP", 3) ]),
    NT "atom"]);

  var atom = ALT ([
    SEQ ([STR "(", NT "expr", STR ")", REDUCE ("GROUP",3)]),
    SEQ ([STR "9", REDUCE ("DIGIT", 1) ])]);

  var stmt = SEQ ([ NT "expr", STR ";", REDUCE ("STMT",2)]);

  // library
  var xlib : pgramlib_t = ([
    ("expr",xprod),
    ("term",tprod),
    ("factor",fprod),
    ("atom",atom),
    ("stmt",stmt)
  ]);

  println$ "xlib";
  match nt,ex in xlib do
    println$ nt + ":";
    println$ "  " + ex.str;
  done

  var clx = closure ("stmt",xlib);
  println$ "Closure="  + clx.str;


  var parsr = make_parser_from_grammar ("stmt",xlib);
/*
  var gri,gwi = mk_ioschannel_pair[pgrammar_t]();
  var gro,gwo = mk_ioschannel_pair[parser_t]();
  spawn_fthread (make_parser_from_grammar (inp=gri,out=gwo));
  write (gwi, ("stmt",xlib));
  var parsr = read gro;
*/
  println$ "Got parser";

  var test = "9+9+9*9^(9+9);";
  var b = Buffer test;
  var ps : parser_state_t = (pos=b, stack=Empty[stack_node_t]);

  var ri,wi = mk_ioschannel_pair[parser_state_t]();
  var ro,wo = mk_ioschannel_pair[parser_state_t]();
  spawn_fthread (parsr (inp=ri, out=wo));
  write (wi,ps);
  spawn_fthread { 
    while true do
      var result = read ro;
      println$ "Test1: End pos (should be 14)=" + result.str;
    done
  };
end
*/

gen fresh_sym () = {
  var n = 1;
next:>
  yield "_"+n.str;
  ++n;
  goto next;
}

open syntax parser_syn;
/*

begin
  println$ "LEFT RECURSION CHECK";
  open Parser_synlib;

  gramlib xlib {
    expr = expr "+" term {REDUCE ("PLUS",3)} | term;
    term = term "*" factor {REDUCE ("MUL",3)} | factor;
    factor = factor "^" atom {REDUCE ("EXP", 3)} | atom;
    atom = 
       | "(" expr ")" { REDUCE ("GROUP",3) } 
       | "9" { REDUCE ("DIGIT", 1) }
    ;
    stmt = expr ";" { REDUCE ("STMT",2) };
  }


  println$ "xlib";
  match nt,ex in xlib do
    println$ nt + ":";
    println$ "  " + ex.str;
  done

  var fresh = fresh_sym; 
  xlib = left_recursion_elimination fresh xlib;

  println$ "xlib";
  match nt,ex in xlib do
    println$ nt + ":";
    println$ "  " + ex.str;
  done


  var clx = closure ("stmt",xlib);
  println$ "Closure="  + clx.str;


  var parsr = make_parser_from_grammar ("stmt", xlib);

  println$ "Got parser";

  var test = "9+9+9*9^(9+9);";
  var results = run_parser_on_string parsr test;

  match results with 
  | Empty => println$ "Parse Failed";
  | Cons (h,Empty) => println$ "Unique result " + h.str;
  | _ => 
    println$ "Multiple results";
    iter (proc (result:parser_state_t) { 
      println$ "Test1: End pos (should be 14)=" + result.str;
    })
    results;
  endmatch;
end
*/
/*
begin
  println$ "LEFT RECURSION CHECK2";

  fun NT (s:string) => Recog (Nonterminal [pgram_t] s);
  fun STR (s:string) => Recog (Strng [pgram_t] s);
  fun REDUCE (s:string, n:int) => Action[pgram_t] (Reduce (s,n));
  fun ALT (ls: list[pgram_t]) => Recog (Alt[pgram_t] ls);
  fun SEQ (ls: list[pgram_t]) => Recog (Seq[pgram_t] ls);
  fun EPS () => Recog (Epsilon[pgram_t]);
  

  var xstmt=parser(
    expr ";" {REDUCE("STMT",2)}
  );
  var xatom=parser(
    "(" expr ")" {REDUCE("GROUP",3)} | "9" {REDUCE("DIGIT",1)}
  );
  var x_3=parser(
    "^" atom {REDUCE("EXP",3)} x3 | #EPS
  );
  var xfactor=parser(
    atom x3
  );
  var x_2=parser(
    "*" factor {REDUCE("MUL",3)} x2 | #EPS 
  );
  var xterm=parser(
    factor x2
  );
  var x_1=parser(
    "+" term {REDUCE("PLUS",3)} x1 | #EPS
  );
  var xexpr=parser(
    term x1
  );

  // library
  var xlib : pgramlib_t = ([
    ("expr",xexpr),
    ("term",xterm),
    ("factor",xfactor),
    ("atom",xatom),
    ("stmt",xstmt),
    ("x1",x_1),
    ("x2",x_2),
    ("x3",x_3)
  ]);

  println$ "xlib";
  match nt,ex in xlib do
    println$ nt + ":";
    println$ "  " + ex.str;
  done

  var clx = closure ("stmt",xlib);
  println$ "Closure="  + clx.str;


  var gri,gwi = mk_ioschannel_pair[pgrammar_t]();
  var gro,gwo = mk_ioschannel_pair[parser_t]();
  spawn_fthread (make_parser_from_grammar (inp=gri,out=gwo));
  write (gwi, ("stmt",xlib));
  var parsr = read gro;
  println$ "Got parser";

  var test = "9+9+9*9^(9+9);";
  var b = Buffer test;
  var ps : parser_state_t = (pos=b, stack=Empty[stack_node_t]);

  var ri,wi = mk_ioschannel_pair[parser_state_t]();
  var ro,wo = mk_ioschannel_pair[parser_state_t]();
  spawn_fthread (parsr (inp=ri, out=wo));
  write (wi,ps);
  spawn_fthread { 
    while true do
      var result = read ro;
      println$ "Test1: End pos (should be 14)=" + result.str;
    done
  };
end
*/


begin
  println$ "INDIRECT LEFT RECURSION CHECK";
  open Parser_synlib;

  gramlib xlib1 {
    expr = term | expr "+" term {REDUCE ("PLUS",3)};
    term = prefix | term "*" prefix {REDUCE ("MUL",3)};
    prefix = power | "-" power {REDUCE ("NEG",2)};
    power = atom | atom "^" prefix {REDUCE ("EXP", 3)};

    atom = 
       | "(" expr ")" { REDUCE ("GROUP",3) } 
       | "9" { REDUCE ("DIGIT", 1) }
    ;
    stmt = expr ";" { REDUCE ("STMT",2) };
  }

  gramlib xlib2 {
    expr = expr "+" term {REDUCE ("PLUS",3)} | term;
    term = term "*" prefix {REDUCE ("MUL",3)} | prefix;
    prefix = "-" power {REDUCE ("NEG",2)} | power;
    power = atom "^" prefix {REDUCE ("EXP", 3)} | atom;

    atom = 
       | "(" expr ")" { REDUCE ("GROUP",3) } 
       | "9" { REDUCE ("DIGIT", 1) }
    ;
    stmt = expr ";" { REDUCE ("STMT",2) };
  }

  for xlib in xlib1,xlib2 do

    println$ "xlib";
    match nt,ex in xlib do
      println$ nt + ":";
      println$ "  " + ex.str;
    done

    var fresh = fresh_sym; 
    xlib = left_recursion_elimination fresh xlib;

    println$ "xlib";
    match nt,ex in xlib do
      println$ nt + ":";
      println$ "  " + ex.str;
    done


    var clx = closure ("stmt",xlib);
    println$ "Closure="  + clx.str;


    var parsr = make_parser_from_grammar ("stmt", xlib);

    println$ "Got parser";

    var test = "9^9;";
    var results = run_parser_on_string parsr test;

    match results with 
    | Empty => println$ "Parse Failed";
    | Cons (h,Empty) => println$ "Unique result " + h.str;
    | _ => 
      println$ "Multiple results";
      iter (proc (result:parser_state_t) { 
        println$ "Test1: End pos (should be 14)=" + result.str;
      })
      results;
    endmatch;
  done
end

