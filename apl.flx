class Apl[D] {
 virtual type C;
 virtual fun fmap: D -> C;
}

instance Apl[int] {
 instance type C = double;
 fun fmap (var x:int) => x.double + 0.42;
}

instance Apl[double] {
 instance type C = string;
 fun fmap (var x:double) => x.str + "!!";
}

instance Apl[string] {
 instance type C = string;
 fun fmap (var x:string) => "'" + x.str + "'";
}


open[T] Apl[T];
var p1 = (23, 3.413);
var p2 =  fmap p1.0, fmap p1.1;
println$ p1;
println$ p2;
instance[T,U with Apl[T],Apl[U]] Apl[T * U] { // int * double
 instance type C = Apl[T]::C * Apl[U]::C; // double * string
 fun fmap (var x1:T,var y1:U) : C = {
var rx = fmap x1;
var ry = fmap y1;
/*
println$ (x1,y1).str + "-->" + (rx,ry).str;
*/
 return rx, ry;
 }
}
println$ fmap p1;
println$ p2.fmap.fmap.fmap.fmap;
var p3 = fmap p2;
println$ p3;

var pp = (12, (61, 33.7));
var px = fmap pp;
var aa = px.str;
println$ aa;

instance [T,U with Apl[T], Apl[U]] Apl[T ** U] {
 instance type C = Apl[T]::C ** Apl[U]::C;
 fun fmap (a:(T ** U)) : C = {
 match a with
 | (ah ,, at) => 
   var xh = fmap ah;
   var xt = fmap at;
/*
   println$ "(" + ah.str + ",," + at.str + ")" + " --> " + "(" + xh.str + ",," + xt.str +")";
*/
   return  xh ,, xt ;
 endmatch;
 }
}

var p = 23,3.412,"hello";
println$ fmap p;
