//Check axioms
//Check reductions

noinline fun f(x:int):int = { print "Cheat"; endl; return x; }

reduce idem(x:int): f ( f x ) => f x;

var x = f(f(f(f(1))));
print x; endl;

axiom symmetry (x:int,y:int): x + y == y + x;
axiom associativity (x:int, y:int, z:int): (x + y) + z == x + (y + z);
reduce additive_unit(x:int): x + int 0 => x;
reduce multiplicative_unit(x:int): x * int 0 => 0;
reduce additive_unit(x:int): int 0 + x => x;
reduce multiplicative_unit(x:int): int 0 * x=> int 0;

//axiom wrong(x:int,y:int): x == y;
fun hh(x:int)=>x;

reduce silly (x:int): hh x => x;

axiom_check (1,2,3);

var i:int=1;
lab:>
  axiom_check (i,2);
  i=i+1;
  if i <= 5  goto lab;

axiom poly[t] ( sym:t * t -> t, == :t * t-> bool, x:t, y:t):
  sym(x,y) == sym(y,x)
;

axiom_check (( add of (int * int)), == of (int * int), 1, 2);
