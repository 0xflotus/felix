//Check typeclasses

open List;

typeclass XStr[T] {
  virtual fun str2: T->string;
}

module Foo {
  instance XStr[int] {
    fun str2 (x:int):string => str x;
  }

  fun foo[T with XStr[T]] (x:T):string => str2 x;

  fun foo[T with XStr[T]] (x:list[T]):string =>
    match x with
    | Empty[T] => "()"
    | Cons(?h, ?t) => "(" + (str2 h) + ", " + (foo t) + ")"
    endmatch
  ;
}

open Foo;

print$ Foo::foo 5; endl;
print$ Foo::foo$ list(1,2,3,4); endl;

