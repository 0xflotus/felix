// include STL vector template
header """
#include <vector>
""";

// define a generic cast
// here ?2 means the second generic type parameter

fun mycast[t1,t2]:t1->t2 = "(?2)($1)";
print (mycast [int,long] 1); endl;

// declare generic binding for vector
// ?1 is replaced by the first type argument
// when the type vector is instantiated
// the name t is a placeholder used for consistency

type vector[t] = "std::vector<?1>";

// declare print routine for vector
// notice that the type 'vector t'
// describes a vector of objects
// of type t, the type of the generic parameter
//
// in a type expression, the generic type vector
// is used 'as a function' and applied to the
// its argument, the parameter t in this case,
// with the same syntax

proc vprint[t]: vector[t] = """
  {
    std::vector<?1> v = $1;
    for(
      std::vector<?1>::iterator p = v.begin();
      p != v.end();
      ++p
    )
      std::cout << *p << " ";
  }
""";

// a generic procedure for appending to a vector
// this procedure takes a pointer to a vector of t
// and a value of type t and appends the value
// to the vector
proc append[t]:&(vector[t])*t="$1->push_back($2);";

// make an empty vector of int
var v : vector[int];

// put 1,2,3 into the vector
append[int](&v,1);
append[int](&v,2);
append[int](&v,3);

// print the vector
vprint[int] v; endl();
