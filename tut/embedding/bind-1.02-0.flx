struct gauss = {
  x : int;
  y : int;
}

proc _set ( lhs: &gauss, rhs: gauss )
{
  (*lhs).x = rhs.x;
  (*lhs).y = rhs.y;
}

fun add (a:gauss, b:gauss): gauss = {
  return gauss(a.x+b.x, a.y+b.y);
}

fun mul (a:gauss, b:gauss): gauss = {
  return gauss(a.x+b.x - a.y+b.y, a.x*b.y + a.y*b.x);
}

fun mkgauss (a:int,b:int):gauss = { return gauss(a,b); }
fun real (z:gauss):int = { return z.x; }
fun imag (z:gauss):int = { return z.y; }

proc gprint(z:gauss) {
  print "(";
  print (real z);
  print ", ";
  print (imag z);
  print ")";
}

fun sqr(z:gauss):gauss = {
  return z * z;
}

fun norm(z:gauss): int = {
  return
    real z * real z + imag z * imag z
  ;
}

val z1 = mkgauss(1,2);
val z2 = z1 + z1;
val z3 = sqr z2;
val n = norm z3;
gprint z1; endl;
gprint z2; endl;
gprint z3; endl;
print n; endl;
