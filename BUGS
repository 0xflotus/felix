* Operator . doesn't work right applying curried function:
   x.(f 1)

* Operator . doesn't work right for procedures. Eg x.println doesn't work.
  FIXED 11/12/2011

* when x.filename is a &char, x.filename.string doesn't do what I expected,
  it actually does string of the char pointed at, using the rule that
  p.a means (*p).a if p is a pointer. This coupled with the fact 
  r.a means a'th field of record or struct r, not reverse application.

  BOTH these meanings of operator . (not to mention composition!)
  can lead to unexpected results. We need to unify/fix this mess.

  For get method, easy to make x.a mean (a x) as reverse application,
  if the field name 'a' is notionally a projection function.

  For assignment like x.a = v, goes to &(x.a) <- v, we need to make
  &(x.a) equal (&x).a = pointer to a component, NOT value of a.
  This seems to conflict with auto-deref.

  CHANGED: 30/12/2011. Autoderef is gone. So are get_ methods.
  

* I think there is a bug in the compiler where a generator result assigned
  to a variable is ignored if that value of the variable is ignored.
  This has the effect of eliminating the side effect. The case causing
  the problem was posix close(), the result being leaving open a heap
  of files. Try to reproduce this problem, then fix the compiler so it doesn't
  happen! Or, document it and show the proper workaround (eg C_hack::ignore).

* HIJACKING BUG: If an open library module X contains a symbol "len" and another library
  module Y uses the symbol "len" unqualified, a user program also 
  declaring "len" will hijack the meaning of len in all included
  modules except X. This is because symbols in the global scope have precedence
  over those introduced behind the global scope by the open directive.

  This should not affect symbols in the library "std" because that is *bound*
  during the build processes, but it affects other parts of the library such
  as the posix subsystem because they're not.

  Not only is the hijacking a problem, the fact that binding a library changes
  the semantics is very bad.

  A solution is to "wrap" user "program" code in an unopened module secretly,
  to prevent leaking of user program symbols into the library. At present,
  "user program" code is generally **improperly** initialisation code.
  Actually it was intended the user code be written in flx_main() as in C,
  or other functions... but no one does this, not even me .. I've never used
  flx_main().


  NOTE: Another solution, and the right one: in library code, either use
  qualified names OR simply open the required modules inside the library
  module to hide the global level (and the level under the global level).

  This looks a bit more ugly, but it is the correct solution: library
  code shouldn't depend on global scope!

  SOLUTION: probably we should do BOTH these things ...

* NAMING ISSUE

  Well, this isn't a bug. At present, Felix uses the original names in structs,
  but not for functions, variables, etc. The reason it doesn't do this for functions
  is that they're actually classes, and class names can't be overloaded.


* Webserver doesn't display nested C comments correctly
  FIXED: 2/1/2012
 
