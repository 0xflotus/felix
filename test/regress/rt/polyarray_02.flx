fun ==: 3 * 3 -> bool = "$1==$2";
fun ==: 4 * 4 -> bool = "$1==$2";
fun ==: 5 * 5 -> bool = "$1==$2";

var i : 3 = case 1 of 3;
var j : 4 = case 2 of 4;
var k : 5 = case 3 of 5;
var ijk : 3 * 4 * 5 = i,j,k; 

fun str (x:3*4*5) => (x :>> int) . str;
fun str (x:3) => (x :>> int) . str;
fun str (x:4) => (x :>> int) . str;
fun str (x:5) => (x :>> int) . str;

println$ "ijk=" + str ijk;
println$ ijk . 0 .str;
println$ ijk . 1 .str;
println$ ijk . 2 .str;

assert ijk . 0 == i;
assert ijk . 1 == j;
assert ijk . 2 == k;

assert ijk . 0 :>> int == 1;
assert ijk . 1 :>> int == 2;
assert ijk . 2 :>> int == 3;

for var kk in 0 upto 4 do
  k = kk :>> 5;
  for var jj in 0 upto 3 do
    j = jj :>> 4;
    for var ii in 0 upto 2 do
      i = ii :>> 3;
       ijk = i,j,k;
       println$ ijk.0.str + "," + ijk.1.str + "," + ijk.2.str+" encoding=" + (ijk :>>int) .str;
    done
  done
done

println$ str ijk;
ijk.1 = case 2 of 4;
println$ str ijk;

for var v in 0 upto 59 do
  ijk = v :>> (3 * 4 * 5);
  println$ ijk.0.str + "," + ijk.1.str + "," + ijk.2.str+" encoding=" + (ijk :>>int) .str;
done 
