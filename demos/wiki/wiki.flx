include "wiki_model";
include "web/web_server";
include "wiki_handler";
include "util";
include "wiki_tool";
include "codec/uri_codec";

open HTTPRequest;
open HTTPHandler;
open Logger;
open WebServer;
open Csv;
open Assoc_list;
open ServerConfig;	
open SimpleConfig;

WikiTool::which_tool();

var config = basic_server_config( WikiHandler::app_handlers() + default_handlers());
val info_logger = match SimpleConfig::get_param(config.params,"info_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        INFO)
  |_ => Empty[log_handler]
endmatch;
val debug_logger = match SimpleConfig::get_param(config.params,"debug_log") with 
  |Some ?s => simple_logger(Logger::log(config.server_root+"/log",s,size(1000000),2ui),
                                        DEBUG)
  |_ => Empty[log_handler]
endmatch;

config.log  = logger(info_logger+debug_logger);


val db_pool = Sqlite3Pool::create_sqlite3_pool(match (get_param_list(config.params,"DB")) with
                                                 | Cons(?s,_) => s
                                                 | _ => "db/wiki.db"
                                               endmatch,1);

config.log(INFO,"Starting wiki server");

val INSTALL_ROOT = #Config::config.FLX_INSTALL_DIR;
val FLX_PATH = apply_param_vars_to(config.params,
                                   get_param_list(config.params,"FLX_PATH"));
val FDOC_PATH = apply_param_vars_to(config.params, 
                                    get_param_list(config.params,"FDOC_PATH"));
val C_PATH = apply_param_vars_to(config.params,
                                    get_param_list(config.params,"C_PATH"));
val FLX_PKGCONFIG_PATH = apply_param_vars_to(config.params,
                                             get_param_list(config.params,"FLX_PKGCONFIG"));
include "cpp2html";
include "flx2html";
include "fdoc2html";
include "fpc2html";
include "py2html";
include "ocaml2html";
include "charclass";
include "css4html";

start_webserver(config);
