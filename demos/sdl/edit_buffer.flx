include "./edit_buffer_interface";
include "sdl/SDL2";

var null_selection : selection_t = (first_line = -1, first_col = 0, last_line = 0, past_col=0);
fun is_null_selection (x:selection_t) => x.first_line == -1;

fun normalised_selection (selection:selection_t) =>
  if selection.first_line > selection.last_line 
  or 
    selection.first_line == selection.last_line and 
    selection.first_col > selection.past_col
  then (
    first_line=selection.last_line, 
    first_col=selection.past_col, 
    last_line=selection.first_line, 
    past_col=selection.first_col
  )
  else selection
;

object edit_buffer (var lines: darray[string]) implements edit_buffer_interface = 
{
  method proc whoami () { println$ "[Model]"; }
  method fun get_lines () => lines;
  var curline = 0;
  var curcol = 0;
  var selection = null_selection;
  var nlines = 30; // HACK!
  var soffset = nlines / 2;

  method fun get_nlines () => nlines;
  method proc set_nlines (x:int) => nlines = x;
  method fun get_soffset () => soffset;
  method proc set_soffset (x:int) => soffset = x;


  method fun get_selection () => selection;

  fun get_selection_text () : string = 
  {
    var sel = normalised_selection selection;
    val cr = "\n";
    var s = "";
    if sel.first_line == sel.last_line do
      s += lines.(sel.first_line).[sel.first_col to sel.past_col];
    else
      s += lines.(sel.first_line).[sel.first_col to];
      for var i in sel.first_line + 1 upto sel.last_line - 1 do
        s += cr + lines.i;
      done
      s += cr + lines.(sel.last_line).[to sel.past_col];
    done
    return s;
  } 

  proc start_selection () { 
    if is_null_selection selection do
      selection.first_line = curline;
      selection.first_col = curcol;
      selection.last_line = curline;
      selection.past_col = curcol;
    done
  }

  proc extend_selection () {
    selection.last_line = curline;
    selection.past_col = curcol;
  }

  proc erase_selection () 
  {
    var sel = normalised_selection selection;
    set (lines, sel.first_line,
      lines.(sel.first_line).[to sel.first_col] + 
      lines.(sel.last_line).[sel.past_col to]);
    erase (lines, sel.first_line + 1, sel.last_line);
  }

  method fun get_curline () => curline;
  method fun get_curcol () => curcol;
  method proc set_selection (s:selection_t) { selection = s; }
  method proc set_pos (x:int, y:int) {  curline = y; curcol = x; }
  method proc clear_selection => selection = null_selection;

  var changed = true;
  proc draw () { changed = true; }
  method fun get_changed() => changed;
  method proc reset () { changed = false; } 

  var dotext = true;
  method proc set_dotext(b:bool) { dotext = b; }
  method fun get_dotext() => dotext;

  fun next() => if curline < lines.len.int then lines.curline.[curcol] else 0.char;
  fun prev() => if curline < lines.len.int  and curcol > 0 then lines.curline.[curcol - 1] else 0.char;

  proc fwd1()
  {
    if curline < lines.len.int do
      if curcol < lines.curline.len.int do
        curcol = curcol + 1;
      else 
        curline++; 
        curcol = 0;
      done
    done
  }

  proc back1 ()
  {
    if curcol > 0 do
      curcol = curcol - 1;
    elif curline > 0 do
      curline = curline - 1;
      if curline < lines.len.int do
        curcol = lines.curline.len.int;
      else
        curcol = 0;
      done
    done
  }

  method proc insert_char (ch:char)
  {
    while curline >= lines.len.int do push_back (lines, ""); done
     
    var tmp = lines.curline;
    var n = tmp.len.int;
    if curcol > n do
      tmp = tmp + ' ' * (curcol - n) + ch.string;
    else
      insert$ &tmp, curcol, ch.string;
    done
    set (lines,curline,tmp);
    ++curcol;
    draw;
  }

  proc insert_line ()
  {
    if curline < lines.len.int do
      var tmp = lines.curline.[curcol to];
      set(lines,curline,lines.curline.[to curcol]);
      push_back (lines,lines.(lines.len.int - 1)); // last line
      var last = lines.len.int - 2;
      var first = curline + 1;
      if first <= last do
        for var i in last downto first do
          set(lines, i + 1, lines.i);
        done
      done
      set(lines,curline+1,tmp);
      ++curline;
      curcol = 0;
      draw;
    done
  }

  method proc control_keys(var vkey: SDL_Keycode)
  {
    match vkey with
    | $(SDLK_PAGEUP) => curline=0; draw;
    | $(SDLK_PAGEDOWN) => curline=lines.len.int; draw;
    | $(SDLK_LEFT) => 
      if #next in alphanum and not (#prev in alphanum) do back1; done
      while (curline > 0 or curcol > 0) and (#prev in alphanum or not  (#next in alphanum)) do back1; done
      draw;

    | $(SDLK_RIGHT) => 
      while #next in alphanum do fwd1; done
      while curline < lines.len.int and not (#next in alphanum) do fwd1; done
      draw;

    | $(SDLK_y) => // delete line
      if curline < lines.len.int do
        if curline + 1 < lines.len.int do
          for var i in curline + 1 upto lines.len.int - 1 do
            set(lines, i - 1, get(lines, i));
          done
        done
        pop lines;
      done
      curcol = 0;
      clear_selection;
      draw;

    // Cut to clipboard
    | $(SDLK_x) => ;
      C_hack::ignore$ SDL_SetClipboardText #get_selection_text;
      curline = selection.first_line;
      curcol = selection.first_col;
      erase_selection;
      clear_selection;
      
    // Copy to clipboard
    | $(SDLK_c) => 
      C_hack::ignore$ SDL_SetClipboardText #get_selection_text;
     
    // Paste from clipboard
    | $(SDLK_v) => 
      begin
        clear_selection;
        if #SDL_HasClipboardText do
          var s = #SDL_GetClipboardText;
          for ch in s do
            if ch >= ' '.char do insert_char ch;
            elif ch == char "\n" do insert_line;
            else ;
            done
          done // loop over text
        done // has text
      end
    | _ => ;
    endmatch;
  }

  method proc shift_keys(var vkey:SDL_Keycode)
  {
    match vkey with
    | $(SDLK_RETURN) =>
      begin
        if curline < lines.len.int do
          var tmp = lines.curline.[curcol to];
          set(lines,curline,lines.curline.[to curcol]);
          push_back (lines,lines.(lines.len.int - 1)); // last line
          var last = lines.len.int - 2;
          var first = curline + 1;
          if first <= last do
            for var i in last downto first do
              set(lines, i + 1, lines.i);
            done
          done
          set(lines,curline+1,tmp);
          draw;
        done
        clear_selection;
      end

    | $(SDLK_HOME) => start_selection; curline=0; extend_selection; draw;
    | $(SDLK_END) => start_selection; curline=lines.len.int; draw;
    | $(SDLK_PAGEDOWN) => 
      start_selection; curline = min (curline + nlines, lines.len.int);
      extend_selection; 
      draw;

    | $(SDLK_PAGEUP) => 
      start_selection; 
      curline = max (curline - nlines, 0);
      draw;
      extend_selection; 


    | $(SDLK_DOWN) => 
      start_selection; 
      if curline < lines.len.int do
        curline = curline + 1;
        draw;
      done
      extend_selection; 

    | $(SDLK_UP) => 
      start_selection; 
      if curline >0 do
        curline = curline - 1;
        draw;
      done
      extend_selection; 

    | $(SDLK_LEFT) => 
       start_selection; back1; extend_selection; draw;

    | $(SDLK_RIGHT) => 
      start_selection; fwd1; extend_selection; draw;

    | _ => ;
    endmatch;
  }

  method proc modless_keys(var vkey: SDL_Keycode)
  {
    match vkey with
    | $(SDLK_HOME) => curline=0; draw;
    | $(SDLK_END) => curline=lines.len.int; draw;
    | $(SDLK_PAGEDOWN) => 
      curline = min (curline + nlines, lines.len.int);
      draw;

    | $(SDLK_PAGEUP) => 
      curline = max (curline - nlines, 0);
      draw;


    | $(SDLK_DOWN) => 
      if curline < lines.len.int do
        curline = curline + 1;
        draw;
      done

    | $(SDLK_UP) => 
      if curline >0 do
        curline = curline - 1;
        draw;
      done

    | $(SDLK_LEFT) => 
       back1; draw;

    | $(SDLK_RIGHT) => 
      fwd1; draw;

    | $(SDLK_DELETE) =>
      begin
        if curline < lines.len.int do
          var n = lines.curline.len.int;
          var sel = normalised_selection selection;
          if curline == sel.first_line and curcol == sel.first_col do
            erase_selection;
          elif curcol < n do
            var tmp = lines.curline;
            erase$ &tmp,curcol,1;
            set(lines,curline,tmp);
            draw; 
          elif curline < lines.len.int - 1 do
            tmp = lines.curline;
            tmp = tmp + ' ' * (curcol - n) + lines.(curline+1);
            set(lines,curline, tmp);
            var first = curline + 1;
            var last = lines.len.int - 2;
            if first <= last do
              for var i in first upto last do
                set(lines,i,lines.(i+1));
              done
            done
            pop lines;
            draw;
          done
        done
        clear_selection;
      end

    | $(SDLK_BACKSPACE) =>
      begin
        if curline < lines.len.int do
          var n = lines.curline.len.int;
          var sel = normalised_selection selection;
          if curline == sel.last_line and curcol == sel.past_col do
            curline = sel.first_line;
            curcol = sel.first_col;
            erase_selection;
          elif curcol > 0 do
            if curcol <= n do
              var tmp = lines.curline;
              erase$ &tmp,curcol - 1,1;
              set(lines,curline,tmp);
            done
            --curcol;
            draw; 
          elif curline > 0 do
            --curline;
            curcol = lines.curline.len.int;
            set(lines,curline, lines.curline+lines.(curline + 1));
            for var i in curline + 1 upto lines.len.int - 2 do
              set(lines,i,lines.(i+1));
            done
            pop lines;
            draw;
          done
        else 
          back1; 
          draw;
        done
        clear_selection;
      end

    | $(SDLK_RETURN) => clear_selection; insert_line;

    | $(SDLK_HOME) => 
      curcol = 0;
      draw;

    | $(SDLK_END) => 
      curcol = lines.curline.len.int;
      draw;

    | $(SDLK_KP_0) =>
      dotext = false;

    | $(SDLK_KP_1) =>
      dotext = false;
      if curcol > 0 do 
        curcol = 0;
        draw;
      elif curline < lines.len.int do
        ++curline;
        draw;
      done

    | $(SDLK_KP_2) =>
      dotext = false;
      if curline < lines.len.int do
        curline = curline + 1;
        draw;
      done

    | $(SDLK_KP_3) =>
      dotext = false;
      if curcol < lines.curline.len.int do
        curcol = lines.curline.len.int;
        draw;
      elif curline < lines.len.int do
        ++curline;
        curcol = lines.curline.len.int;
        draw;
      done


    | $(SDLK_KP_4) =>
      dotext = false;
      if curcol > 0 do
        curcol = curcol - 1;
        draw;
      elif curline > 0 do
        curline = curline - 1;
        curcol = lines.curline.len.int;
        draw;
      done

    | $(SDLK_KP_5) =>
      dotext = false;

    | $(SDLK_KP_6) =>
      dotext = false;
      if curcol < lines.curline.len.int do
        curcol = curcol + 1;
        draw;
      elif curline < lines.len.int do
        curline = curline + 1;
        curcol = 0;
        draw;
      done

    | $(SDLK_KP_7) =>
      dotext = false;
      if curcol > 0 do 
        curcol = 0;
        draw;
      elif curline > 0 do
        --curline;
        draw;
      done

    | $(SDLK_KP_8) =>
      dotext = false;
      if curline >0 do
        curline = curline - 1;
        draw;
      done

    | $(SDLK_KP_9) =>
      dotext = false;
      if curcol < lines.curline.len.int do
        curcol = lines.curline.len.int;
        draw;
      elif curline > 0 do
        --curline;
        curcol = lines.curline.len.int;
        draw;
      done

    | $(SDLK_KP_PERIOD) =>
      dotext = false;

    | _ => ;
    endmatch; // vkey
  } // keydown

}

fun setup(x:string)= { println$ "edit buffer setup"; C_hack::ignore x; return 0; } 
  // the hack here is a BUG in the compiler, dropping
  // an unused parameter

export fun setup of (string) as "edit_buffer_setup";
export proc edit_buffer of (darray[string]) as "edit_buffer";

