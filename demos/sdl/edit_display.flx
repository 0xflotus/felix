include "sdl/SDL2";
include "sdl/SDL_ttf";
include "sdl/SDL_image";
include "./edit_display_interface";
object edit_display (var init: edit_display_init) 
implements edit_display_interface = 
{

  method proc whoami () { println$ "[Display]"; init.editor.whoami;}

  var nullRect = C_hack::null[SDL_Rect];

  // Colours
  var opaque = 255u8;
  var red = SDL_Color (255u8,0u8, 0u8,opaque);
  var white = SDL_Color (255u8,250u8, 250u8,opaque);
  var black = SDL_Color (0u8,0u8, 0u8,opaque);
  var brown = SDL_Color (200u8, 150u8, 190u8, opaque);
  var blue = SDL_Color (0u8, 0u8, 255u8, opaque);
  var green = SDL_Color (0u8, 255u8, 0u8, opaque);
  var darkgreen = SDL_Color (50u8, 200u8, 50u8, opaque);
  var yellow = SDL_Color (0u8, 255u8, 255u8, opaque);
  var orange = SDL_Color (200u8, 150u8, 150u8, opaque);
  var purple = SDL_Color (255u8, 0u8, 255u8, opaque);
  var keycolour = SDL_Color (150u8, 80u8, 80u8, opaque);

  var lightgrey = SDL_Color (200u8, 200u8, 200u8, opaque);
  var grey = SDL_Color (150u8, 150u8, 150u8, opaque);
  var darkgrey = SDL_Color (100u8, 100u8, 100u8, opaque);
  var soot = SDL_Color (50u8, 50u8, 50u8, opaque);

  var startline = 0;
  var lineskip = TTF_FontHeight(init.font)+1;

  method fun get_display_rect () => init.r;
  method proc set_display_rect (dr: SDL_Rect) => init.r = dr;

  method fun get_lineskip () => lineskip;
  method fun get_startline () => startline;

  fun minx (font:TTF_Font, chrix : int) =
  {
    var minx:int; var maxx:int; var miny:int; var maxy:int; var advance:int;
    var fi : uint16 = chrix.uint16; 
    C_hack::ignore$ TTF_GlyphMetrics(font,fi,&minx, &maxx, &miny, &maxy, &advance);
    return minx;
  }

  var charwidth = #{
    var minx:int; var maxx:int; var miny:int; var maxy:int; var advance:int;

    var result = TTF_GlyphMetrics(init.font,"m".char.ord.uint16,&minx, &maxx, &miny, &maxy, &advance);
    if result < 0 do 
      eprintln$ "Couldn't get size of 'm' in courier font";
      System::exit 1;
    done
    println$ "Metrics m = minx="+minx.str+" maxx="+maxx.str+" adv="+advance.str;
    return advance;
  };

  method fun get_charwidth () => charwidth;

  enum tclass = ordinary, identifier, keyword, coment, strng, error;

  // hack tokeniser
  fun tokenise (var state:int, s:string) = 
  {
    var words = Empty[tclass * string];
    var word = "";
    var kind = ordinary;
    proc setkind() {
      kind = match state with | 0 => ordinary | 1 => identifier | 2 => coment | _ => error;
      if word in 
      (
        "fun", "proc", "var","gen","val",
        "typedef","union","struct",
        "do", "done",
        "if","else","elif","begin","end","while","then",
        "for","upto","downto"
        "match","endmatch",
        "return","yield",
        "method","object","interface","implements",
        "and","or","not"
      ) 
      do 
        kind = keyword; 
      done
    }
    if s.len.int > 0 do 
      for var i in 0 upto s.len.int - 1 do
        var ch = s.[i];
        if state == 0 do // scanning non-ident
          if ch in alphanum do
            if word.len.int > 0 do
              words += (ordinary,word);
              word = "";
            done
            state = 1; // scanning ident
          elif ch == char "/" and s.[i+1] == char "/" do
            state = 2; // scanning comment
          done
        elif state ==  1 do
          if not (ch in alphanum) do
            if word.len.int > 0 do 
              setkind;
              words += (kind,word);
              word = "";
            done
            if ch == char "/" and s.[i+1] == char "/" do
              state = 2; // scanning comment
            else
              state = 0;
            done
          done
        else // state = 3, scanning C++ comment
          // nothing to do 
        done
        word += ch;
      done
    done
    if word.len.int > 0 do
      setkind;
      words += (kind,word);
      word = "";
    done
    state = 0;
    return state,words;
  } 

  method proc draw()
  {
    var window_surface = SDL_GetWindowSurface init.window;
    var curline = #(init.editor.get_curline);
    var curcol= #(init.editor.get_curcol);
    var selection = #(init.editor.get_selection);
    var lines = #(init.editor.get_lines);
 
    startline = curline - #(init.editor.get_soffset);
    if startline < 0 do startline = 0; done
    var bg = white;
    var pixelformat : &SDL_PixelFormat  = window_surface*.format;
    var bgpixels = SDL_MapRGB(pixelformat,bg.r, bg.g, bg.b);
    SDL_ClearClipRect(window_surface);
    C_hack::ignore$ SDL_FillRect(window_surface, &init.r, bgpixels);
    var swrend = SDL_CreateSoftwareRenderer (window_surface); 
    begin
      var x0 = init.r.x;
      var x1 = x0 + init.r.w - 1;
      var y0 = init.r.y;
      var y1 = y0 + init.r.h - 1;
      C_hack::ignore$ SDL_SetRenderDrawColor (swrend, 200u8, 50u8, 50u8, 255u8);
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x1,y0); // top 
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1,x1,y1); // bot
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x0,y1); // left
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x1,y0,x1,y1); // right
      --x0; ++x1; --y0; ++y1;
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x1,y0); // top 
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1,x1,y1); // bot
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x0,y1); // left
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x1,y0,x1,y1); // right
      --x0; ++x1; --y0; ++y1;
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x1,y0); // top 
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1,x1,y1); // bot
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y0,x0,y1); // left
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x1,y0,x1,y1); // right
      C_hack::ignore$ SDL_SetRenderDrawColor (swrend, 0u8, 250u8, 50u8, 255u8);
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1+1,x1,y1+1); // top 
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1+4,x1,y1+4); // bottom
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x0,y1+1,x0,y1+4); // left
      C_hack::ignore$ SDL_RenderDrawLine (swrend, x1,y1+1,x1,y1+4); // tighht

    end
    C_hack::ignore$ SDL_RenderSetClipRect (swrend, &init.r); 
    var lno = 0;
    var sel = 
      if selection.first_line > selection.last_line 
      or 
        selection.first_line == selection.last_line and 
        selection.first_col > selection.past_col
      then (
        first_line=selection.last_line, 
        first_col=selection.past_col, 
        last_line=selection.first_line, 
        past_col=selection.first_col
      )
      else selection
    ;
    var screenlines = init.r.h / lineskip; 
    var lastline = startline + screenlines - 1;
    val unused=0;
    var state = 0;
    for line in lines do
      if lno >= startline and lno <= lastline do
        def state, var words = tokenise (state,line);
        var presel = 
          if lno == sel.first_line then sel.first_col 
          else 0
        ;
        var postsel = 
          if lno == sel.last_line then sel.past_col 
          elif lno >= sel.first_line and lno < sel.last_line then line.len.int
          else 0
        ;
        fun dstview() => SDL_Rect (
          init.r.x+x+xadj,
          init.r.y + (lno - startline) * lineskip,
          unused,unused)
        ;

        var i = 0;
        match ?kind,?word in words do
          for var j in 0 upto word.len.int - 1 do // no null words
            if i >=presel and i < postsel do
              var xadj = 0; // min (0,minx (init.font, line.[i].ord));
              var text_rendered = TTF_RenderGlyph_Shaded(init.font,word.[j].ord.uint16,red,grey);
            else
              var colour = 
                match kind with 
                | ordinary => soot 
                | identifier => soot 
                | keyword => keycolour
                | coment => darkgreen
                | _ => red
              ;
              xadj = min (0,minx (init.font, word.[j].ord));
              text_rendered = TTF_RenderGlyph_Solid(init.font,word.[j].ord.uint16,colour);
            done
            var x = charwidth * i;
            var viewport = #dstview;
            C_hack::ignore$ SDL_BlitSurface (text_rendered, nullRect, window_surface, &viewport); 
            SDL_FreeSurface text_rendered;
            ++i;
          done
        done
      done
      ++lno;
    done

    begin
      var xpos = init.r.x + curcol * charwidth;
      var ypos = init.r.y + (curline - startline) * lineskip;
      if inRect (xpos,ypos,init.r) do
        C_hack::ignore$ SDL_RenderDrawLine (swrend, xpos,ypos,xpos,ypos+lineskip);
      done
    end

    SDL_DestroyRenderer swrend;
  }
}


fun setup(x:string)= { println$ "edit display setup"; C_hack::ignore x; return 0; } 
  // the hack here is a BUG in the compiler, dropping
  // an unused parameter

export fun setup of (string) as "edit_display_setup";
export proc edit_display of (edit_display_init) as "edit_display";

