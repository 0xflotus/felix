include "gui/__init__";
open FlxGui;

var clock = Faio::mk_alarm_clock();

// Initialise the SDL system (SDL + TTF + IMAGE)
FlxGui::init();

// get a font, and the recommended vertical 
// spacing between lines
var font_name = System::argv 1;
if font_name == "" do font_name = OSX_dflt_font(); done

var font : font_t = get_font(font_name, 12);
var lineskip = get_lineskip font;

proc mk_field 
(
  window:window_t, x:int, y:int, 
  font:font_t, colour: colour_t, bgcolour:colour_t, 
  dflt:string,
  o:&oschannel[event_t]
) 
{
  println$ "mk_field ("+x.str +"," + y.str+")="+dflt;
  var editor = line_buffer (dflt.len.int, dflt);
  var dc = line_buffer_display_controller (window,font,colour,bgcolour,x,y,editor);
  dc.display();
  var ich,och = #(mk_ioschannel_pair[event_t]);
  var controller = line_edit editor dc ich;
  spawn_fthread controller; 
  println$ "mkfield: controller spawned";
  o <- och;
}

// Make a window
proc mkwin(x:int, y:int, pw: &window_t, pf: &varray[oschannel[event_t]])
{
  var w = window_t("My Window",x,y,400,400);

  w.clear lightgrey;

  // write some text and some lines
  w.write (100,100,font,red,"HELLO");
  w.write (100,100+lineskip,font,red,"WORLD " + w.SDL_GetWindowID.str);
  w.draw_line (RGB(0,0,255), 100,100,200,200);

  // update the window with the stuff we drew
  w.update;

  var ch1: oschannel[event_t]; mk_field (w, 50, 60, font, black, white, "EDITFIELD ONE", &ch1);
  var ch2: oschannel[event_t]; mk_field (w, 50, 120, font, black, white, "EDITFIELD TWO", &ch2);
  var ch3: oschannel[event_t]; mk_field (w, 50, 180, font, black, white, "EDITFIELD THREE", &ch3);
  w.update;
  var fields = varray[oschannel[event_t]] (ch1, ch2, ch3);
  pw <- w; pf <- fields;
}

var bsup = (label_colour=red, bg_colour=blue,top_colour=lightgrey,
  left_colour=lightgrey, bottom_colour=darkgrey,right_colour=darkgrey);

var bsdown = (label_colour=red, bg_colour=blue,top_colour=darkgrey,
  left_colour=darkgrey, bottom_colour=lightgrey,right_colour=lightgrey);

var bsdis = (label_colour=red, bg_colour=black,top_colour=lightgrey,
  left_colour=lightgrey, bottom_colour=darkgrey,right_colour=darkgrey);


proc mkbutton (w:window_t, x:int, y:int, label:string, font:font_t)
{
  var bm = ButtonModel (Up);
  bar bd = ButtonDisplay (bm) (w, blue, font, bsup, bsdown, bsdis, 
    x,y, x+20,y+100,x+5,y+10);

}

// create a window manager
var wm = window_manager();

begin
  var w1: window_t; var flds1: varray[oschannel[event_t]]; mkwin(150,150, &w1, &flds1);
  var w2: window_t; var flds2: varray[oschannel[event_t]]; mkwin(200,200, &w2, &flds2);
  var w3: window_t; var flds3: varray[oschannel[event_t]]; mkwin(250,250, &w3, &flds3);

  // make an event handler for our window
  proc ehandler (fields: varray[oschannel[event_t]]) (input:ischannel[event_t])  () 
  {
    println$ "Window event handler running";
    var selected_field = 0;
    var run = true;
    while run do
      var ev: event_t = read input;
      //if ev.type.SDL_EventType != SDL_MOUSEMOTION do
      //  println$ "  WINDOW specific EVENT: " + ev.window.event.SDL_WindowEventID.str;
      //done
      if 
        ev.type.SDL_EventType == SDL_KEYDOWN and 
        ev.key.keysym.sym \in (SDLK_TAB, SDLK_RETURN) 
      do
        var sel :SDL_Event;
        &sel.type <- SDL_WINDOWEVENT.uint32;
        sel.window.event = SDL_WINDOWEVENT_FOCUS_LOST.uint8;
        write$ fields.selected_field,sel;
        selected_field = (selected_field + 1) % fields.len.int;
        sel.window.event = SDL_WINDOWEVENT_FOCUS_GAINED.uint8;
        write$ fields.selected_field,sel;
      done
      write$ fields.selected_field, ev;
      run = ev.window.event.SDL_WindowEventID != SDL_WINDOWEVENT_CLOSE ;
    done
    println$ "Terminating window event processing loop";
  }

  // make a controller for the window using our event handler
  var wc1 = window_controller (w1, ehandler flds1);
  var wc2 = window_controller (w2, ehandler flds2);
  var wc3 = window_controller (w3, ehandler flds3);

  // place the controller under the window manager
  var i = wm.add_window wc1;
  i = wm.add_window wc2;
  i = wm.add_window wc3;
  // report the index number of the window
  println$ "Last Window index " + i.str;
end

begin
  // get the channel to read events from
  var input = wm.get_event_source();

  // get a first event from the window manager
  var e: event_t = read input;

  // while the event isn't a quit event ..
  while e.type.SDL_EventType != SDL_QUIT do
    // print a diagnostic
    //if e.type.SDL_EventType == SDL_WINDOWEVENT do
    //  println$ e.type.SDL_EventType.str + ": " + e.window.event.SDL_WindowEventID.str + " wid=" + e.window.windowID.str;
    //elif e.type.SDL_EventType != SDL_MOUSEMOTION do
    //  println$ e.type.SDL_EventType.str;
    //done
    // dispatch the event to the window it is associated with
    wm.dispatch_window_event e;
    // get another event
    e= read input;
  done

  // we must have got a quit ..
  println$ "QUIT EVENT";
  wm.delete_all();
  println$ "Windows deleted, quitting";
end
 
