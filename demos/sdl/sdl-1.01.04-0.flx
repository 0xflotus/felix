// REQUIRES OpenGL and GLU
/*
 * This code was created by Jeff Molofee '99
 * (ported to Linux/SDL by Ti Leggett '01)
 *
 * If you've found this code useful, please let me know.
 *
 * Visit Jeff at http://nehe.gamedev.net/
 *
 * or for port-specific comments, questions, bugreports etc.
 * email to leggett@eecs.tulane.edu
 */

include "SDL/SDL";
include "SDL/SDL_keyboard";
include "SDL/SDL_keysym";
include "SDL/SDL_video";
include "SDL/SDL_events";
include "SDL/SDL_timer";
include "SDL/SDL_mutex";
include "SDL/SDL_opengl";

include "std/io/faio";
include "flx_faio_sdl";

open C_hack;
open Carray;
open MixedInt;
open Uint32;
open Uint8;
open Float;

open SDL_h;
open SDL_video_h;
open SDL_keyboard_h;
open SDL_events_h;
open SDL_keysym_h;
open SDL_timer_h;
open SDL_mutex_h;

// This is the Felix asynchronous event source
open SDL_events;

open SDL_opengl_h;

/* screen width, height, and bit depth */
val SCREEN_WIDTH  = 640;
val SCREEN_HEIGHT = 480;
val SCREEN_BPP = 16;

/* function to reset our viewport after a window resize */
proc resizeWindow( wwidth : int, hheight :int)
{
  var height = hheight;
  var width = wwidth;

  /* Protect against a divide by zero */
  if height == 0 do height = 1; done;
  var ratio = double_of width / double_of height;

  block_sdl_events event_lock;
  /* Setup our viewport. */
  glViewport( 0, 0, width, height );

  /* change to the projection matrix and set our viewing volume. */
  glMatrixMode( GL_PROJECTION );
  glLoadIdentity( );

  /* Set our perspective */
  gluPerspective( 45.0, ratio, 0.1, 100.0 );

  /* Make sure we're chaning the model view and not the projection */
  glMatrixMode( GL_MODELVIEW );

  /* Reset The View */
  glLoadIdentity( );
  unblock_sdl_events event_lock;
}

/* function to load in bitmap as a GL texture */
proc LoadGLTextures( )
{
  /* Create storage space for the texture */
  var TextureImage = SDL_LoadBMP(c"demos/sdl/textures/nehe.bmp");
  if isNULL TextureImage do
    print "Can't load texture file demos/sdl/textures/nehe.bmp";
    Quit 1;
  done;

  /* Create The Texture */
    glGenTextures( 1, texture );

  /* Typical Texture Generation Using Data From The Bitmap */
  glBindTexture( GL_TEXTURE_2D, texture.[0] );

    /* Generate The Texture */
  glTexImage2D( GL_TEXTURE_2D, 0, 3, (*TextureImage).w,
    (*TextureImage).h, 0, GL_RGB,
    GL_UNSIGNED_BYTE, (*TextureImage).pixels
  );

  /* Linear Filtering */
  glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

  /* Free up any memory we may have used */
    SDL_FreeSurface( TextureImage );
}

/* general OpenGL initialization function */
proc initGL()
{
  /* Enable Texture Mapping ( NEW ) */
  glEnable( GL_TEXTURE_2D );

  /* Enable smooth shading */
  glShadeModel( GL_SMOOTH );

  /* Set the background black */
  glClearColor( 0.0f, 0.0f, 0.0f, 0.0f );

  /* Depth buffer setup */
  glClearDepth( 1.0 );

  /* Enables Depth Testing */
  glEnable( GL_DEPTH_TEST );

  /* The Type Of Depth Test To Do */
  glDepthFunc( GL_LEQUAL );

  /* Really Nice Perspective Calculations */
  glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
}

/* These are to calculate our fps */
var T0     = 0u;
var Frames = 0;

var xrot = 0.0f; /* X Rotation ( NEW ) */
var yrot = 0.0f; /* Y Rotation ( NEW ) */
var zrot = 0.0f; /* Z Rotation ( NEW ) */

proc rotate()
{
  xrot += 0.3f; /* X Axis Rotation */
  yrot += 0.2f; /* Y Axis Rotation */
  zrot += 0.4f; /* Z Axis Rotation */
}

var f_texture : uint ^ 2; /* Storage For One Texture ( NEW ) */
var texture : carray[uint] = carray f_texture;


/* Here goes our drawing code */
proc drawGLScene(drawing:1->0)
{
  block_sdl_events event_lock;
  drawing();
  unblock_sdl_events event_lock;

  /* Gather our frames per second */
  Frames++;
  {
    var t = SDL_GetTicks();
    if t - T0 >= 5000 do
      val seconds = double_of (t - T0) / 1000.0;
      val fps = double_of Frames / seconds;
      print Frames; print " frames in "; print seconds;
      print " seconds = "; print fps; print " FPS"; endl;
      T0 = t;
      Frames = 0;
    done;
  };
  rotate();
}

/* whether or not the window is active */
var isActive = true;

if SDL_Init(SDL_INIT_AUDIO \| SDL_INIT_VIDEO) < 0 do
  print "Unable to init SDL"; endl;
  System::exit(1);
done;

var event_lock = SDL_CreateMutex();


proc Quit(n:int)
{
  SDL_Quit;
  System::exit 0;
}

/* Fetch the video info */
var videoInfo = SDL_GetVideoInfo();

if isNULL videoInfo do
  print "Video query failed"; endl;
  Quit 1;
done;

/* the flags to pass to SDL_SetVideoMode */
var
  videoFlags  = SDL_OPENGL;          /* Enable OpenGL in SDL */
  videoFlags |= cast[uint] SDL_GL_DOUBLEBUFFER; /* Enable double buffering */
  videoFlags |= SDL_HWPALETTE;       /* Store the palette in hardware */
  videoFlags |= SDL_RESIZABLE;       /* Enable window resizing */

/* This checks to see if surfaces can be stored in memory */
if (*videoInfo).hw_available != 0 do
    videoFlags |= SDL_HWSURFACE;
else
    videoFlags |= SDL_SWSURFACE;
done;

/* This checks if hardware blits can be done */
if (*videoInfo).blit_hw != 0 do
    videoFlags |= SDL_HWACCEL;
done;

/* Sets up OpenGL double buffering */
ignore$ SDL_GL_SetAttribute( cast[SDL_GLattr] SDL_GL_DOUBLEBUFFER, 1 );

/* get a SDL surface */
var surface = SDL_SetVideoMode
  (SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, videoFlags )
;

/* Verify there is a surface */
if isNULL surface do
  print "Video mode set failed"; endl;
  Quit 1;
done;

/* initialize OpenGL */
initGL();
LoadGLTextures();

/* resize the initial window */
resizeWindow( SCREEN_WIDTH, SCREEN_HEIGHT );

// SDL Event dispatcher
proc handle_active (e:SDL_ActiveEvent)
{
   isActive = e.gain != 0;
}

proc handle_resize(e:SDL_ResizeEvent)
{
  block_sdl_events event_lock;
  surface = SDL_SetVideoMode(
    e.w,
    e.h,
    16, videoFlags
  );
  if isNULL surface do
    print "Could not get a surface after resize"; endl;
  done;
  resizeWindow( e.w, e.h );
  unblock_sdl_events event_lock;
}

/* function to handle key press events */
proc handle_key( keysym : SDL_keysym)
{
  match keysym.sym with
  | ?k when k == SDLK_ESCAPE => { Quit 0; }
  | ?k when k ==  SDLK_F1 =>
        {
        block_sdl_events event_lock;
        ignore$ SDL_WM_ToggleFullScreen( surface );
        unblock_sdl_events event_lock;
      }
  | _ => {}
  endmatch;
}

/* draw the scene */
proc draw(drawing: 1->0) {
  if isActive call drawGLScene( drawing );
}

proc keychan(x:schannel[SDL_keysym])
{
  whilst true do
    handle_key$ read x;
  done;
}

proc activechan(x:schannel[SDL_ActiveEvent])
{
  whilst true do
    handle_active$ read x;
  done;
}

proc resizechan(x:schannel[SDL_ResizeEvent])
{
  whilst true do
    handle_resize$ read x;
  done;
}

proc drawchan(x:schannel[int], drawing:1->0)
{
  whilst true do
    var k = read x;
    draw drawing;
  done;
}

proc execute(x:schannel[int], something:1->0)
{
  whilst true do
    var k = read x;
    something();
  done;
}

val clock = Faio::mk_alarm_clock();
proc poll_event(e:&SDL_Event)
{
tryagain:>
  //print "Polling event"; endl;
  var result = SDL_PollEvent(e);
  if result > 0 do
    //print "Got event"; endl;
    return;
  done;
  Faio::sleep$ clock, 0.1;
  goto tryagain;
}


proc dispatch_event(
  keyboard:schannel[SDL_keysym],
  active:schannel[SDL_ActiveEvent],
  resize:schannel[SDL_ResizeEvent]
)
{
  whilst true do
    //var &e : SDL_Event <- get_sdl_event event_lock;
    var e : SDL_Event;
    poll_event(&e);
    match get_type e with
    | ?et when et == SDL_ACTIVEEVENT =>
      { write (active, e.active); }

    | ?et when et == SDL_VIDEORESIZE =>
      { write (resize, e.resize); }

    | ?et when et == SDL_KEYDOWN =>
      { write (keyboard, e.key.keysym); }

    | ?et when et == SDL_QUIT =>
      { Quit 0; }

    | _ => {}
    endmatch;
  done;
}

/* write ticks at the desired framerate */
proc framerate (x:schannel[int], framerate:double)
{
  whilst true do
    Faio::sleep $ clock,framerate;
    write (x,1);
  done;
}

/* LINEAR CONTROL MODEL: CANNOT DEADLOCK
  ~~> async/sync connection
  --> sync/sync connection

  SDL_event ~~> dispatcher
                --> resize handler
                --> active handler
                --> key handler
  timer ~~> framerate --> draw
*/

/* make our communication channels */
var keyboard = mk_schannel[SDL_keysym] ();
var active = mk_schannel[SDL_ActiveEvent] ();
var resize = mk_schannel[SDL_ResizeEvent] ();
var clicks = mk_schannel[int] ();
var rotation = mk_schannel[int] ();

/* start up the fthreads and plug them together */
spawn_fthread { dispatch_event (keyboard, active, resize); };
spawn_fthread { resizechan resize; };
spawn_fthread { activechan active; };
spawn_fthread { keychan keyboard; };

spawn_fthread { drawchan (clicks, Drawing); };
spawn_fthread { framerate (clicks, 0.1); };
spawn_fthread { execute (rotation, rotate); };
spawn_fthread { framerate (rotation, 0.1); };


// main thread hangs

/* Here goes our drawing code */
proc Drawing()
{
    /* Clear The Screen And The Depth Buffer */
    glClear( GL_COLOR_BUFFER_BIT \| GL_DEPTH_BUFFER_BIT );

    /* Move Into The Screen 5 Units */
    glLoadIdentity( );
    glTranslatef( 0.0f, 0.0f, -5.0f );

    glRotatef( xrot, 1.0f, 0.0f, 0.0f); /* Rotate On The X Axis */
    glRotatef( yrot, 0.0f, 1.0f, 0.0f); /* Rotate On The Y Axis */
    glRotatef( zrot, 0.0f, 0.0f, 1.0f); /* Rotate On The Z Axis */

    /* Select Our Texture */
    glBindTexture( GL_TEXTURE_2D, texture.[0] );

    /* NOTE:
     *   The x coordinates of the glTexCoord2f function need to inverted
     * for SDL because of the way SDL_LoadBmp loads the data. So where
     * in the tutorial it has glTexCoord2f( 1.0f, 0.0f ); it should
     * now read glTexCoord2f( 0.0f, 0.0f );
     */
    glBegin(GL_QUADS);
      /* Front Face */
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f( -1.0f, -1.0f, 1.0f );
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f(  1.0f, -1.0f, 1.0f );
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f(  1.0f,  1.0f, 1.0f );
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f( -1.0f,  1.0f, 1.0f );

      /* Back Face */
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f( -1.0f, -1.0f, -1.0f );
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f( -1.0f,  1.0f, -1.0f );
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f(  1.0f,  1.0f, -1.0f );
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f(  1.0f, -1.0f, -1.0f );

      /* Top Face */
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f( -1.0f,  1.0f, -1.0f );
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f( -1.0f,  1.0f,  1.0f );
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f(  1.0f,  1.0f,  1.0f );
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f(  1.0f,  1.0f, -1.0f );

      /* Bottom Face */
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f( -1.0f, -1.0f, -1.0f );
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f(  1.0f, -1.0f, -1.0f );
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f(  1.0f, -1.0f,  1.0f );
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f( -1.0f, -1.0f,  1.0f );

      /* Right face */
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f( 1.0f, -1.0f, -1.0f );
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f( 1.0f,  1.0f, -1.0f );
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f( 1.0f,  1.0f,  1.0f );
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f( 1.0f, -1.0f,  1.0f );

      /* Left Face */
      /* Bottom Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 0.0f ); glVertex3f( -1.0f, -1.0f, -1.0f );
      /* Bottom Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 0.0f ); glVertex3f( -1.0f, -1.0f,  1.0f );
      /* Top Right Of The Texture and Quad */
      glTexCoord2f( 0.0f, 1.0f ); glVertex3f( -1.0f,  1.0f,  1.0f );
      /* Top Left Of The Texture and Quad */
      glTexCoord2f( 1.0f, 1.0f ); glVertex3f( -1.0f,  1.0f, -1.0f );
    glEnd( );

    /* Draw it to the screen */
    SDL_GL_SwapBuffers( );
}
