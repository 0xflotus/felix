@execfile('config/config.py')
@head(1,'Debian package generator')
Generates debian packaging meta info.
@p()
BUGS, PROBLEMS ..

@head(2,'Package control')
@select(tangler('debian/control','data'))
Source: felix
Section: devel
Priority: optional
Maintainer: John Skaller <skaller@users.sourceforge.net>
Build-Depends: debhelper (>= 4.0.0), python (>=2.0), ocaml-nox (>=3.08), ocaml-best-compilers, gnuplot (>=4.0), man2html (>=1.5), sed (>=4.1)
Standards-Version: 3.6.1

Package: felix
Section: devel
Priority: optional
Architecture: any
Depends: ${shlibs:Depends}, g++
Recommends: g++-4.0
Description: high performance programming language translator and tools
 A new high performance language with 
 support for functional programming, ultra-lightweight
 user space threads, and C/C++ interoperability.

@select(tangler('debian/dirs','data'))
usr/bin
usr/lib
usr/lib/felix
usr/lib/felix/lib
usr/lib/felix/rtl
usr/include
usr/share/doc/felix
usr/share/doc/felix/libdoc
usr/share/doc/felix/examples
usr/share/doc/felix/htmlman
usr/share/doc/felix/doc
usr/share/man/man1

@select(tangler('debian/compat','data'))
4
@select(tangler('debian/copyright','data'))
This package was debianized by John Skaller <skaller@users.sourceforge.net>.
It was downloaded from http://felix.sf.net

Copyright (c) 2001 George C. Necula <necula@cs.berkeley.edu>
Copyright (c) 2001 Scott McPeak <smcpeak@cs.berkeley.edu>
Copyright (c) 2001 Wes Weimer <weimer@cs.berkeley.edu>
Copyright (c) 2002 Regents of the University of California
Copyright (c) 2005 John Skaller <skaller@users.sourceforge.net> 

Executable License: 3 clause BSD, please see 

/usr/share/common-licenses/BSD

for the full text of the licence.

Run time library Licence: Free for any use.

@head(2,'Documentation')
@select(tangler('debian/felix.docs','data'))
VERSION
htmlman/
tut/doc/
libdoc/

@select(tangler('debian/felix.examples','data'))
tut/examples/*.flx
test/*.flx

@select(tangler('debian/changelog','data'))
@tangle('felix ('+flx_version+'-'+debian_revision+') unstable; urgency=low')

  * Initial Release.

 -- John Skaller <skaller@users.sourceforge.net>  Fri, 27 May 2005 11:08:54 +1000

@select(tangler('debian/README.debian','data'))
Felix for Debian
----------------

Felix scripting harness.

 -- John Skaller <skaller@users.sourceforge.net>, Fri, 27 May 2005 11:08:54 +1000

@select(tangler('debian/felix.doc-base.tools','data'))
Document: felix-tools
Title: Debian Felix Tools summary
Author: John Skaller
Abstract: An tutorial on Felix language and toolkit.
Section: main
Format: HTML
Index: /usr/share/doc/felix/htmlman/felix_1.html
Files: /usr/share/doc/felix/htmlman/*.html

@select(tangler('debian/felix.doc-base.tut','data'))
Document: felix-tutorial
Title: Debian Felix Tutorial
Author: John Skaller
Abstract: An tutorial on Felix language and toolkit.
Section: main
Format: HTML
Index: /usr/share/doc/felix/tut/en_tutorial_top.html
Files: /usr/share/doc/felix/tut/*.html

@select(tangler('debian/felix.doc-base.lib','data'))
Document: felix-library
Title: Debian Felix Library Manual
Author: John Skaller
Abstract: Felix Standard Library.
Section: main
Format: HTML
Index: /usr/share/doc/felix/libdoc/index.html
Files: /usr/share/doc/felix/libdoc/*.html

@select(tangler('debian/felix.install','data'))
config/*.py usr/lib/felix/config
bin/flx usr/bin
bin/flxg usr/bin
bin/flxl usr/bin
bin/flxp usr/bin
bin/flxd usr/bin
bin/flxm usr/bin
bin/flxb usr/bin
bin/flx_run usr/bin
bin/flxcc usr/bin
bin/flx_elkhound usr/bin
bin/flx_doc usr/bin
lib/*.flx usr/lib/felix/lib
@tangle('rtl/libflx_dynamic.so.'+flx_version+' usr/lib')
rtl/*.a usr/lib
rtl/*.h usr/include
rtl/*.hpp usr/include
rtl/*.c usr/lib/felix/rtl
rtl/*.cpp usr/lib/felix/rtl
rtl/flx_run_static.o usr/lib/felix/rtl
rtl/flx_run_dynamic.o usr/lib/felix/rtl

@select(tangler('debian/felix.links','data'))
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxg.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxl.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxp.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxd.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxm.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxb.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flxcc.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flx_run.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flx_doc.1.gz
usr/share/man/man1/flx.1.gz usr/share/man/man1/flx_elkhound.1.gz
@# we install libflx_dynamic.so.major.minor.patch
@# and create a link libflx_dynamic.so to link against (compile time)
@# and create a link libflx_dynamic.so.major to load against (run time)
@# the so name embedded in the library is libflx_dynamic.so.major
@#
@tangle('usr/lib/libflx_dynamic.so.'+flx_version+' usr/lib/libflx_dynamic.so')
@tangle('usr/lib/libflx_dynamic.so.'+flx_version+' usr/lib/'+FLX_SONAME)

@head(2,'Build rules')
@select(tangler('debian/rules'))
@tangle('#!/usr/bin/make -f')
@tangle('# -*- makefile -*-')
@tangle('# Sample debian/rules that uses debhelper.')
@tangle('# This file was originally written by Joey Hess and Craig Small.')
@tangle('# As a special exception, when this file is copied by dh-make into a')
@tangle('# dh-make output file, you may use that output file without restriction.')
@tangle('# This special exception was added by Craig Small in version 0.37 of dh-make.')
@tangle('')
@tangle('# Uncomment this to turn on verbose mode.')
@tangle('#export DH_VERBOSE=1')
@tangle('')
@tangle('')
@tangle('# These are used for cross-compiling and for saving the configure script')
@tangle('# from having to guess our platform (since we know it already)')
@tangle('DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)')
@tangle('DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)')
@tangle('')
@tangle('')
@tangle('config-stamp:')
@tangle('\tdh_testdir')
@tangle('\t# Add here commands to configure the package.')
@tangle('\t./configure --prefix=debian/felix/usr')
@tangle('\ttouch config-stamp')
@tangle('')
@tangle('build: build-stamp')
@tangle('')
@tangle('build-stamp:  config-stamp')
@tangle('\tdh_testdir')
@tangle('\techo "************ MAKING FELIX SYSTEM ****************"')
@tangle('\t$(MAKE) all.quiet')
@tangle('\techo "************ MAKING FELIX DOCUMENTATION ****************"')
@tangle('\t$(MAKE) doc.quiet')
@tangle('\ttouch build-stamp')
@tangle('')
@tangle('')
@tangle('clean:')
@tangle('\tdh_testdir')
@tangle('\tdh_testroot')
@tangle('\trm -f build-stamp config-stamp')
@tangle('\t# Add here commands to clean up after the build process.')
@tangle('\t-$(MAKE) distclean')
@tangle('\trm -f interscript/*.pyo')
@tangle('\trm -f interscript/*/*.pyo')
@tangle('\trm -f interscript/*/*/*.pyo')
@tangle('\trm -rf speed')
@tangle('\trm -rf script')
@tangle('\tdh_clean ')
@tangle('')
@tangle('install: build')
@tangle('\tdh_testdir')
@tangle('\tdh_testroot')
@tangle('\tdh_clean -k ')
@tangle('\tdh_installdirs')
@tangle('')
@tangle('# Build architecture-independent files here.')
@tangle('binary-indep: build install')
@tangle('# We have nothing to do by default.')
@tangle('')
@tangle('# Build architecture-dependent files here.')
@tangle('binary-arch: build install')
@tangle('\tdh_testdir')
@tangle('\tdh_testroot')
@tangle('\tdh_installchangelogs ChangeLog')
@tangle('\tdh_installdocs')
@tangle('\tdh_installexamples')
@tangle('\tdh_install')
@tangle('#\tdh_installmenu')
@tangle('#\tdh_installdebconf')
@tangle('#\tdh_installlogrotate')
@tangle('#\tdh_installemacsen')
@tangle('#\tdh_installpam')
@tangle('#\tdh_installmime')
@tangle('#\tdh_installinit')
@tangle('#\tdh_installcron')
@tangle('#\tdh_installinfo')
@tangle('\tdh_installman man/man1/*')
@tangle('\tdh_link')
@tangle('\tdh_strip')
@tangle('\tdh_compress')
@tangle('\tdh_fixperms')
@tangle('#\tdh_perl')
@tangle('#\tdh_python')
@tangle('\tdh_makeshlibs')
@tangle('\tdh_installdeb')
@tangle('\tdh_shlibdeps')
@tangle('\tdh_gencontrol')
@tangle('\tdh_md5sums')
@tangle('\tdh_builddeb')
@tangle('')
@tangle('binary: binary-indep binary-arch')
@tangle('.PHONY: build clean binary-indep binary-arch binary install ')
@tangle('')

@select(tangler('debian/preinst','data'))
#! /bin/sh
# preinst script for flx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    install|upgrade)
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


@select(tangler('debian/postinst','data'))
#! /bin/sh
# postinst script for flx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

case "$1" in
    configure)

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


@select(tangler('debian/prerm','data'))
#! /bin/sh
# prerm script for flx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    remove|upgrade|deconfigure)
#       install-info --quiet --remove /usr/info/flx.info.gz
        ;;
    failed-upgrade)
        ;;
    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


@select(tangler('debian/postrm','data'))
#! /bin/sh
# postrm script for flx
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <r>overwrit>r> <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
       purge|remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)


        ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0

