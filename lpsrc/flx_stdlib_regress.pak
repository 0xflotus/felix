@import glob
@from flxbuild.iscrutil import setup_test
@from flxbuild.flxutil import unix2native

@env = setup_test(get_input_frame(), 'test/stdlib/slrt-')
@def kat(code):
  env.kat(get_tangler(),code)

@select(tangler('spkgs/flx_stdlib_regress.py'))
@tangle('unit_tests = glob.glob('+repr(unix2native(env.root)+"*.flx")+')')
pkg_requires = ['flx_stdlib']
iscr_source = ['lpsrc/flx_stdlib_regress.pak']
weaver_directory = 'doc/test/stdlib'
@doc()

@# ----------------------------------------------------------------------------

@env.head(1, 'Standard library regression tests')

@head(2,"Category Reference",nospawn=1)
Tests by category keyword.
@env.emit_katlist()

@env.head(2, 'Array tests')
@env.head(3, 'Tuple constructors')
@select(env.test('.flx'))
@kat("tuples")
@kat("arrays")
#import <flx.flxh>
val x2 = (3, 4);
print$ x2.[0];
print$ x2.[1];
endl;

val x3 = (5, 6, 7);
print$ x3.[0];
print$ x3.[1];
print$ x3.[2];
endl;

val x4 = (8, 9, 10, 11);
print$ x4.[0];
print$ x4.[1];
print$ x4.[2];
print$ x4.[3];
endl;
@doc()

@select(env.expect())
34
567
891011
@doc()



@env.head(3, 'Array constructors')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val x2 = [|3, 4|];
print$ x2.[0];
print$ x2.[1];
endl;

val x3 = [|5, 6, 7|];
print$ x3.[0];
print$ x3.[1];
print$ x3.[2];
endl;

val x4 = [|8, 9, 10, 11|];
print$ x4.[0];
print$ x4.[1];
print$ x4.[2];
print$ x4.[3];
endl;
@doc()

@select(env.expect())
34
567
891011
@doc()



@env.head(3, 'Array::_ctor_array')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val x2 = array(3, 4);
print$ x2.[0];
print$ x2.[1];
endl;

val x3 = array(5, 6, 7);
print$ x3.[0];
print$ x3.[1];
print$ x3.[2];
endl;

val x4 = array(8, 9, 10, 11);
print$ x4.[0];
print$ x4.[1];
print$ x4.[2];
print$ x4.[3];
endl;
@doc()

@select(env.expect())
34
567
891011
@doc()



@env.head(3, 'Array::len')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
print$ len$ array(5, 6); endl;
print$ len$ array(7, 8, 9); endl;
print$ len$ array(7, 8, 9, 10); endl;
@doc()

@select(env.expect())
2
3
4
@doc()



@env.head(3, 'Array::subscript')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val x2 = array(5, 6);
print$ x2.[0];
print$ x2.[1];
endl;

val x3 = array(7, 8, 9);
print$ x3.[0];
print$ x3.[1];
print$ x3.[2];
endl;

val x4 = array(10, 11, 12, 13);
print$ x4.[0];
print$ x4.[1];
print$ x4.[2];
print$ x4.[3];
endl;
@doc()

@select(env.expect())
56
789
10111213
@doc()



@env.head(3, 'Array::iter')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val f = proc (i:int) { print i; };
iter f$ array(4, 5); endl;
iter f$ array(4, 5, 6); endl;
iter f$ array(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
45
456
4567
@doc()



@env.head(3, 'Array::map')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val f = proc (i:int) { print i; };
val g = fun (i:int) => i - 1;
iter f$ map g$ array(4, 5); endl;
iter f$ map g$ array(4, 5, 6); endl;
iter f$ map g$ array(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
34
345
3456
@doc()



@env.head(3, 'Array::fold_left')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val f = fun (x:int) (y:int) => x - y;
print$ fold_left f 3$ array(4, 5); endl;
print$ fold_left f 3$ array(4, 5, 6); endl;
print$ fold_left f 3$ array(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
-6
-12
-19
@doc()



@env.head(3, 'Array::fold_right')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val f = fun (x:int) (y:int) => x - y;
print$ fold_right f (array(4, 5)) 6; endl;
print$ fold_right f (array(4, 5, 6)) 7; endl;
print$ fold_right f (array(4, 5, 6, 7)) 8; endl;
@doc()

@select(env.expect())
5
-2
6
@doc()



@env.head(3, 'Array::rev')
@select(env.test('.flx'))
@kat("arrays")
#import <flx.flxh>
val f = proc (i:int) { print i; };
iter f$ rev$ array(4, 5); endl;
iter f$ rev$ array(4, 5, 6); endl;
iter f$ rev$ array(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
54
654
7654
@doc()

@# ----------------------------------------------------------------------------

@env.head(2, 'List tests')
@env.head(3, 'List::_ctor_list')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
fun str (x:list[int]) =>
  match x with
  | Empty[int] => "()"
  | Cons (?h, ?t) => "(" + (str h) + ", " + (str t) + ")"
  endmatch
;
print$ str$ list[int](); endl;
print$ str$ list(4); endl;
print$ str$ list(4, 5); endl;
print$ str$ list(4, 5, 6); endl;
print$ str$ list(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
()
(4, ())
(4, (5, ()))
(4, (5, (6, ())))
(4, (5, (6, (7, ()))))
@doc()



@env.head(3, 'List::len')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
print$ len$ list[int](); endl;
print$ len$ list(2); endl;
print$ len$ list(3, 4); endl;
print$ len$ list(5, 6, 7); endl;
print$ len$ list(8, 9, 10, 11); endl;
@doc()

@select(env.expect())
0
1
2
3
4
@doc()



@env.head(3, 'List::iter')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
val f = proc (i:int) { print i; };
iter f$ list[int](); endl;
iter f$ list(4); endl;
iter f$ list(4, 5); endl;
iter f$ list(4, 5, 6); endl;
iter f$ list(4, 5, 6, 7); endl;
@doc()

@select(env.expect())

4
45
456
4567
@doc()



@env.head(3, 'List::map')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
val f = proc (i:int) { print i; };
val g = fun (i:int) => i - 1;
iter f$ map g$ list[int](); endl;
iter f$ map g$ list(4); endl;
iter f$ map g$ list(4, 5); endl;
iter f$ map g$ list(4, 5, 6); endl;
iter f$ map g$ list(4, 5, 6, 7); endl;
@doc()

@select(env.expect())

3
34
345
3456
@doc()



@env.head(3, 'List::fold_left')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
val f = fun (x:int) (y:int) => x - y;
print$ fold_left f 3$ list[int](); endl;
print$ fold_left f 3$ list(4); endl;
print$ fold_left f 3$ list(4, 5); endl;
print$ fold_left f 3$ list(4, 5, 6); endl;
print$ fold_left f 3$ list(4, 5, 6, 7); endl;
@doc()

@select(env.expect())
3
-1
-6
-12
-19
@doc()



@env.head(3, 'List::fold_right')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
val f = fun (x:int) (y:int) => x + y;
print$ fold_right f (list[int]()) 4; endl;
print$ fold_right f (list(4)) 5; endl;
print$ fold_right f (list(4, 5)) 6; endl;
print$ fold_right f (list(4, 5, 6)) 7; endl;
print$ fold_right f (list(4, 5, 6, 7)) 8; endl;
@doc()

@select(env.expect())
4
9
15
22
30
@doc()


@env.head(3, 'List::rev')
@select(env.test('.flx'))
@kat("lists")
#import <flx.flxh>
open List;
val f = proc (i:int) { print i; };
iter f$ rev$ list[int](); endl;
iter f$ rev$ list(4); endl;
iter f$ rev$ list(4, 5); endl;
iter f$ rev$ list(4, 5, 6); endl;
iter f$ rev$ list(4, 5, 6, 7); endl;
@doc()

@select(env.expect())

4
54
654
7654
@doc()

@# ----------------------------------------------------------------------------

@env.head(2, 'String tests')
@env.head(3, 'String::subscript')
@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ "hello how are you".[4]; endl;
print$ "hello how are you".[5 to]; endl;
print$ "hello how are you".[to 7]; endl;
print$ "hello how are you".[3 to 8]; endl;
@doc()

@select(env.expect())
o
 how are you
hello h
lo ho
@doc()



@env.head(3, 'String::trim')
@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ ltrim "hello how are you" "hello"; endl;
print$ ltrim "hello how are you" "goodbye"; endl;
@doc()

@select(env.expect())
 how are you
hello how are you
@doc()



@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ rtrim "hello how are you" "you"; endl;
print$ rtrim "hello how are you" "me"; endl;

@select(env.expect())
hello how are
hello how are you
@doc()



@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ trim "hello how are you" "me"; endl;
print$ trim "hello how are you" "hello"; endl;
print$ trim "hello how are you" "you"; endl;

print$ trim "hello how are hello" "hello"; endl;
print$ trim "hello how are hello" "goodbye"; endl;
@doc()

@select(env.expect())
hello how are you
 how are you
hello how are
 how are
hello how are hello
@doc()



@env.head(3, 'String::strip')
@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ lstrip "  a b c  "; endl;
print$ lstrip "a b c  "; endl;
@doc()

@select(env.expect())
a b c
a b c
@doc()



@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ rstrip "  a b c  "; endl;
print$ rstrip "  a b c"; endl;
@doc()

@select(env.expect())
  a b c
  a b c
@doc()



@select(env.test('.flx'))
@kat("strings")
#import <flx.flxh>
print$ strip "  a b c  "; endl;
print$ strip "a b c"; endl;
@doc()

@select(env.expect())
a b c
a b c
@doc()
@env.write_katfile()

