@h = tangler("src/flx_child.mli")
@select(h)
open Flx_ast
open Flx_types
open Flx_mtypes1
open Flx_mtypes2

type child_map_t = 
  (bid_t, bid_t list) Hashtbl.t

val find_children:
  child_map_t -> bid_t -> bid_t list

val is_child:
  child_map_t -> bid_t -> bid_t -> bool

val add_child: 
  child_map_t -> bid_t -> bid_t -> unit

val remove_child: 
  child_map_t -> bid_t -> bid_t -> unit

val is_ancestor:
  fully_bound_symbol_table_t -> bid_t -> bid_t -> bool

val descendants:
  child_map_t -> bid_t -> IntSet.t

val cal_children:
  sym_state_t ->
  fully_bound_symbol_table_t ->
  child_map_t
 
@h = tangler("src/flx_child.ml")
@select(h)
open Flx_ast
open Flx_types
open Flx_mtypes1
open Flx_mtypes2
open List
open Flx_util

type child_map_t = 
  (bid_t, bid_t list) Hashtbl.t

let find_children childmap parent =
  try Hashtbl.find childmap parent with Not_found -> []

let is_child childmap parent child =
  mem child (find_children childmap parent)

let add_child childmap parent child =
  let kids = find_children childmap parent in
  Hashtbl.replace childmap parent (child::kids)

let rec is_ancestor bbdfns child anc =
  let _,parent,_,_ = Hashtbl.find bbdfns child in
  match parent with
  | None -> false
  | Some x -> 
    if x = anc then true 
    else is_ancestor bbdfns x anc
  
let remove_child childmap parent child =
  let kids = find_children childmap parent in
  let kids = filter (fun i -> i <> child) kids in
  Hashtbl.replace childmap parent kids

(* closure of index with respect to children, EXCLUDES self *)
let rec descendants child_map index =
  let d = ref IntSet.empty in
  let children = find_children child_map index in
  iter
  (fun i -> 
    if not (IntSet.mem i !d) then
    begin
      d := IntSet.add i !d;
      d := IntSet.union !d (descendants child_map i)
    end
  )
  children
  ;
  !d

let cal_children syms bbdfns =
  let child_map = Hashtbl.create 97 in
  Hashtbl.iter
  (fun i (id,parent,sr,entry) ->
    match parent with
    | Some parent ->
      Hashtbl.replace child_map parent
      (i ::
        (
          try Hashtbl.find child_map parent
          with Not_found -> []
        )
      )
    | None -> ()
  )
  bbdfns
  ;
  child_map


