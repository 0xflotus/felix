@import config

@def setup():
  tangle("//")
  tangle("// Contributed by John Skaller")
  tangle("//")
  tangle("n := atoi(System::argv 1);")

@head(1,'Bagley Language Shootout')
Temporary script to check the tests work, and also
to get some times.

@sbags = [
  ('array',' 1000'),
  ('ackermann',' 8'),
  ('except',' 8'),
  ('fibo',' 8'),
  ('heapsort',' 1000'),
  ('hello',' 1'),
  ('lists',' 8'),
  ('moments',' 1 <bagley/data/moments.data'),
  ('matrix',' 8'),
  ('methcall',' 8'),
  ('nestedloop',' 8'),
  ('objinst',' 8'),
  ('procinst',' 10 10'),
  ('prodcons',' 1000'),
  ('random',' 1000'),
  ('regexmatch',' 8 < bagley/data/phone_numbers.data'),
  ('reversefile',' 1 < bagley/data/phone_numbers.data'),
  ('sieve',' 8'),
  ('strcat',' 8'),
  ('takfp',' 10'),
  ('sumcol',' < bagley/data/sumcol.data'),
  ('wc',' < bagley/data/phone_numbers.data'),
 ]

@if not config.CYGWIN and not config.WIN32:
  # hangs for unknown reason on Cygwin
  # HashSet not available on Windows
  sbags.append(('spellcheck',' < bagley/data/spellcheck.data'))

@if not config.WIN32:
  # HashMap not available on Windows
  sbags.append(('wordfreq',' 1 < bagley/data/wordfreq.data'))

@dbags = [
  ('plugin',' 20'),
 ]

@ebags = [
  ('hash',' 20000'),
  ('hash2',' 10'),
 ]

@bags = sbags
@if config.TARGET_CXX.options.HAVE_STL_GNU_CXX:
  bags = bags + ebags

@runbags = bags
@if config.SUPPORT_DYNAMIC_LOADING:
  runbags = runbags + dbags


@def mko(i):
  tangle('echo "Compiling '+i+'"')
  tangle('bin/flx --test --force --echo -c --optimise bagley/felix/'+i)
  tangle('if [ 0 != $? ]; then exit $?; fi')

@def mkr(i,j):
  tangle('rm -f bagley/felix/'+i+'.output')
  tangle('echo "Running '+i+'"')
  tangle('python script/utime.py bagley/felix/'+i+' '+j)
  tangle('if [ 0 != $? ]; then exit $?; fi')

@def mkc(i,j):
  tangle('echo "Checking result for '+i+'"')
  # tangle('diff -a -b bagley/felix/'+i+'.output bagley/felix/'+i+'.expect')
  # solaris fun
  tangle('diff -b bagley/felix/'+i+'.output bagley/felix/'+i+'.expect')
  tangle('if [ 0 != $? ]; then exit $?; fi')

@select(tangler('bagley/compile.sh','data'))
@if config.SUPPORT_DYNAMIC_LOADING:
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_1')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_2')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_3')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin')
  tangle('if [ 0 != $? ]; then exit $?; fi')
@for i,j in bags: mko (i)

@select(tangler('bagley/run.sh','data'))
DICT_DIR=bagley/data/
export DICT_DIR
echo "DICT_DIR=$DICT_DIR"
PLUGIN_DIR=bagley/felix/
export PLUGIN_DIR
echo "PLUGIN_DIR=$PLUGIN_DIR"
@if config.CYGWIN:
  tangle('PATH=`pwd`/bin:$PATH')
  tangle('export PATH')
  tangle('echo "PATH=$PATH"')
 elif config.MACOSX:
  tangle('DYLD_LIBRARY_PATH=`pwd`/rtl:$DYLD_LIBRARY_PATH')
  tangle('export DYLD_LIBRARY_PATH')
  tangle('echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"')
 else:
  tangle('LD_LIBRARY_PATH=`pwd`/rtl:$LD_LIBRARY_PATH')
  tangle('export LD_LIBRARY_PATH')
  tangle('echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"')

@for i,j in runbags: mkr (i,j)

@select(tangler('bagley/check.sh','data'))
@for i,j in runbags: mkc (i,j)

@select(tangler('bagley/felix/plugin.flx','data'))
@setup()
open List;

var prefix = Env::getenv "PLUGIN_DIR";
if prefix == "" do prefix = "./"; done;

//print "Using plugin directory "; print prefix; endl;

// list of the plugin filenames
var plugins = List::Empty[string];
@if config.WIN32:
  tangle("plugins = plugins + (prefix + 'plugin_1.dll');")
  tangle("plugins = plugins + (prefix + 'plugin_2.dll');")
  tangle("plugins = plugins + (prefix + 'plugin_3.dll');")
 else:
  tangle("plugins = plugins + (prefix + 'plugin_1.so');")
  tangle("plugins = plugins + (prefix + 'plugin_2.so');")
  tangle("plugins = plugins + (prefix + 'plugin_3.so');")

// data structure for communication with plugin
struct plugin_com_t
{
  input_line: string;
  string_pos:int;
  decoded_num:int;
  success:bool;
};

var plugin_com : plugin_com_t;
var ptr_plugin_com = C_hack::address_of plugin_com;
plugin_com.input_line = "I 1 i 2 3";

val m = len plugin_com.input_line;
var sum = 0;

// do it n times
var repeat_count = n;
until repeat_count == 0 do

  // starting at start of string
  plugin_com.string_pos = 0;
  until plugin_com.string_pos == m do

    // trying each plugin
    var remaining_plugins = plugins;
    plugin_com.success = false;
    until plugin_com.success do

      match remaining_plugins with
      | Empty =>
        {
          print "Can't find a suitable plugin"; endl;
          print "Position "; print plugin_com.string_pos; endl;
          System::exit 1;
        }

      | Cons (?plugin, ?tail) =>
        {
          var plug_lib = Dynlink::init_lib(plugin);
          Dynlink::run_proc(plug_lib,"plugin",ptr_plugin_com);
          if plugin_com.success do
            sum += plugin_com.decoded_num;
          else
            remaining_plugins = tail;
          done;
          Dynlink::destroy_lib plug_lib;
        }
      endmatch;
    done;
  done;
  --repeat_count;
done;

print sum; endl;
