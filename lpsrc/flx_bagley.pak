@import config

@def setup():
  tangle("//")
  tangle("// Contributed by John Skaller")
  tangle("//")
  tangle("n := atoi(System::argv 1);")

@head(1,'Bagley Language Shootout')
Temporary script to check the tests work, and also
to get some times.

@sbags = [
  ('array',' 1000'),
  ('ackermann',' 8'),
  ('except',' 8'),
  ('fibo',' 8'),
  ('heapsort',' 1000'),
  ('hello',' 1'),
  ('lists',' 8'),
  ('moments',' 1 <bagley/data/moments.data'),
  ('matrix',' 8'),
  ('methcall',' 8'),
  ('nestedloop',' 8'),
  ('objinst',' 8'),
  ('procinst',' 10 10'),
  ('prodcons',' 1000'),
  ('random',' 1000'),
  ('regexmatch',' 8 < bagley/data/phone_numbers.data'),
  ('reversefile',' 1 < bagley/data/phone_numbers.data'),
  ('sieve',' 8'),
  ('strcat',' 8'),
  ('takfp',' 10'),
  ('sumcol',' < bagley/data/sumcol.data'),
  ('wc',' < bagley/data/phone_numbers.data'),
 ]

@if not config.CYGWIN and not config.WIN32:
  # hangs for unknown reason on Cygwin
  # HashSet not available on Windows
  sbags.append(('spellcheck',' < bagley/data/spellcheck.data'))

@if not config.WIN32:
  # HashMap not available on Windows
  sbags.append(('wordfreq',' 1 < bagley/data/wordfreq.data'))

@dbags = [
  ('plugin',' 20'),
 ]

@ebags = [
  ('hash',' 20000'),
  ('hash2',' 10'),
 ]

@bags = sbags
@if config.TARGET_CXX.options.HAVE_STL_GNU_CXX:
  bags = bags + ebags

@runbags = bags
@if config.SUPPORT_DYNAMIC_LOADING:
  runbags = runbags + dbags


@def mko(i):
  tangle('echo "Compiling '+i+'"')
  tangle('bin/flx --test --force --echo -c --optimise bagley/felix/'+i)
  tangle('if [ 0 != $? ]; then exit $?; fi')

@def mkr(i,j):
  tangle('rm -f bagley/felix/'+i+'.output')
  tangle('echo "Running '+i+'"')
  tangle('python script/utime.py bagley/felix/'+i+' '+j)
  tangle('if [ 0 != $? ]; then exit $?; fi')

@def mkc(i,j):
  tangle('echo "Checking result for '+i+'"')
  # tangle('diff -a -b bagley/felix/'+i+'.output bagley/felix/'+i+'.expect')
  # solaris fun
  tangle('diff -b bagley/felix/'+i+'.output bagley/felix/'+i+'.expect')
  tangle('if [ 0 != $? ]; then exit $?; fi')

@select(tangler('script/utime.py'))
import os
import sys
import string

cmd = (
  '/usr/bin/time -p 2>tmp.time bin/flx --test %s %s >%s.output' %
  (sys.argv[1],string.join(sys.argv[2:]),sys.argv[1])
  )

result = os.system(cmd)
if result != 0:
  print "FAILED!"
  sys.exit(result)

f = open("tmp.time");
h = f.readlines()
f.close()
for line in h:
  if line[:4]=='user':
    utime = string.strip(line[4:])
    p = string.split(sys.argv[1],'/')[-1]
    p = string.split(p,'.')[0]
    p = (p + " .......................")[:20]
    print p,utime

@select(tangler('bagley/compile.sh','data'))
@if config.SUPPORT_DYNAMIC_LOADING:
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_1')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_2')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin_3')
  tangle('if [ 0 != $? ]; then exit $?; fi')
  tangle('bin/flx --test --force --optimise --echo -c bagley/felix/plugin')
  tangle('if [ 0 != $? ]; then exit $?; fi')
@for i,j in bags: mko (i)

@select(tangler('bagley/run.sh','data'))
DICT_DIR=bagley/data/
export DICT_DIR
echo "DICT_DIR=$DICT_DIR"
PLUGIN_DIR=bagley/felix/
export PLUGIN_DIR
echo "PLUGIN_DIR=$PLUGIN_DIR"
@if config.CYGWIN:
  tangle('PATH=`pwd`/bin:$PATH')
  tangle('export PATH')
  tangle('echo "PATH=$PATH"')
 elif config.MACOSX:
  tangle('DYLD_LIBRARY_PATH=`pwd`/rtl:$DYLD_LIBRARY_PATH')
  tangle('export DYLD_LIBRARY_PATH')
  tangle('echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH"')
 else:
  tangle('LD_LIBRARY_PATH=`pwd`/rtl:$LD_LIBRARY_PATH')
  tangle('export LD_LIBRARY_PATH')
  tangle('echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"')

@for i,j in runbags: mkr (i,j)

@select(tangler('bagley/check.sh','data'))
@for i,j in runbags: mkc (i,j)

@head(2,'Hello World')
@select(tangler('bagley/felix/hello.flx','data'))
@setup()
print "hello world"; endl;

@head(2,'Ackermans Function')
Two of the three calls are tail recursive.
@select(tangler('bagley/felix/ackermann.flx','data'))
@setup()
fun ack(x:int,y:int):int =>
  if x == 0 then y + 1
  elif y == 0 then ack(x-1, 1)
  else ack(x-1, ack(x, y-1))
  endif
;

v := ack(3,n);
print "Ack(3,"; print n; print "): "; print v; endl;


@head(2,'Fibonacci Function')
@select(tangler('bagley/felix/fibo.flx','data'))
@setup()

fun fib(n:int):int =>
  if n < 2 then 1 else fib (n - 2) + fib (n - 1) endif
;

v := fib(n);
print "Fib("; print n; print "): "; print v; endl;

@head(2,'Array access')
Inspired by the C code.
@select(tangler('bagley/felix/array.flx','data'))
@setup()
//adapted from C solution
open Carray;

x := array_calloc[int] n;
y := array_calloc[int] n;

var i = 0;
whilst i < n do x.[i] = i + 1; ++i; done;

var k = 0;
whilst k<1000 do
  i = n - 1;
  whilst i >= 0 do
    y.[i] = y.[i] + x.[i];
    --i;
  done;
  ++k;
done;

print y.[0]; print " "; print y.[n-1]; endl;
free x;
free y;

@head(2,"Nested Loops")
@select(tangler('bagley/felix/nestedloop.flx','data'))
@setup()
var x = 0;

var a=0;
whilst a<n do
  var b=0;
  whilst b<n do
    var c=0;
    whilst c<n do
      var d=0;
      whilst d<n do
        var e=0;
        whilst e<n do
          var f=0;
          whilst f<n do
            x++;
            ++f;
          done;
          ++e;
        done;
        ++d;
      done;
      ++c;
    done;
    ++b;
  done;
  ++a;
done;

print x; endl;

@head(2,"Regexp matching")
This GREATLY decreases the performance for this
test -- which would otherwise blow PCRE out of the water

Note: the actual result data given on the Alioth
site is WRONG and so are the regexp encodings
given by every language that passes this test.
The following entry:

@begin_displayed_code()
foo (213 222-2222 bar
@end_displayed_code()

actually meets the specified conditions but is listed
as a mismatch. You can see how the other languages
cheated -- for example the gcc encoding goes ..

@begin_displayed_code()
"(?:^|[^\\d\\(])"  	/* must be preceeded by non-digit */
             ^ since when is ( a digit?
@end_displayed_code()


@select(tangler('bagley/felix/regexmatch.flx','data'))
@setup()

open Lexer;

regexp digit = ["0123456789"];
regexp digits3 = digit digit digit;
regexp digits4 =  digits3 digit;

regexp area_code = digits3 | "(" digits3 ")";
regexp exchange = digits3;

regexp phone = area_code " " exchange (" " | "-") digits4;

// Felix, like Python, provides no literals of char type
zero := ord("0".[0]);
nine := ord("9".[0]);

// Felix regular matching currently only supports
// actual regular sets of strings -- it does not support
// lookback or lookahead because they're not regular
//
// So we have to hand code the context check.
//
fun check_context(start: iterator, finish: iterator): string =
{
  prior :=  ord(deref(start-1));
  next := ord(deref(finish));
  return
    if zero <= prior &<= nine
    or zero <= next &<= nine
    then ""
    else string_between(start, finish)
    endif
  ;
}

// this is the actual lexer function
fun lexit (start:iterator, finish:iterator): iterator * string =>
  reglex start to finish with
  | phone => check_context (lexeme_start, lexeme_end)
  | _ => ""
  endmatch
;

// hack so context_check won't crash (pre- and append space)
var data = " " + Text_file::load(Text_file::stdin)+" ";
first := Lexer::start_iterator data;
finish := Lexer::end_iterator data;


var i=n;
var current: iterator;
var s: string;
whilst i>1 do
  current = first;
  until current == finish do
    current, s = lexit(current, finish);
  done;
  --i;
done;

proc print_phone(x:string, j:int) {
  n := len x;
  var s = "";
  var i = 0;
  whilst i<n do
    if zero <= ord(x.[i]) &<= nine do
      s = s + ord(x.[i]);
    done;
    ++i;
  done;
  print j; print ": ";
  print ("("+s.[0 to 3]+") "+s.[3 to 6]+"-"+s.[6 to 10]); endl;
}

current = first;
var j = 0;
until current == finish do
 current, s = lexit(current, finish);
 if s != "" do  ++j; print_phone (s,j); done;
done;

@select(tangler('bagley/data/phone_numbers.data','data'))
datafile for regex matching of phone numbers test

the following numbers should match:

(111) 111 1111
111 222-2222
(111) 333-3333
111 444 4444

foo (111) 555 5555
foo 111 666-6666
foo (111) 777-7777
foo 111 888 8888

foo (111) 999 9999 bar
foo 111 000-0000 bar
foo (111) 232-1111 bar
foo 111 242 1111 bar

The following should fail to match:

2(212) 222 2222
2232 222-2222
(242) 222-22222
2252 222 2222

foo (262) 2222222
foo 272 2222222
foo (282) 222-22227
foo 292 222 22222

foo (202).222 2222 bar
foo 211@22222222 bar
foo (213 222-2222 bar
foo 214) 222 2222 bar
@doc() #end of file
@head(2,'Statistical moments')
@select(tangler('bagley/felix/moments.flx','data'))
@setup()
include "stl";
// adapted from C solution

/* kmedian permutes elements of a to get
   a[i]<=a[k] for i<k
   a[i]>=a[k] for i>k
        See. N. Wirth, Algorithms+data structures = Programs
*/

open Stl;
open Stl::Vector;

proc printf: double = 'printf("%f",$1);';

proc kmedian(v: stl_vector[double], mid:int)
{
  var a = begin v;
  var k = mid;
  var n = len v;
  whilst true do
    var j = Cstdlib::rand() % n;
    b := a.[j];
    var i = 0;
    j = n-1;
    var flag = true;
    whilst flag do
      whilst  a.[i] < b do i++; done;
      whilst  a.[j] > b do j--; done;
      if i<j do
        a.[i] <-> a.[j];
        i++;
        j--;
      else
        if a.[j] < b do j++; done;
        if a.[i] > b do i--; done;
        flag = false;
      done;
    done;

    if i<k do
      k -= i+1;
      n -= i+1;
      a += i+1;
    elif j>k do
      n=j;
    else return;
    done;
  done;
}

fun max(a:stl_vector[double], n:int):double =
{
  var temp=a.[0];
  var j = n-1;
  until j == 0 do
    if a.[j]>temp do temp=a.[j]; done;
    --j;
  done;
  return temp;
}


var sum = 0.0;
var average_deviation = 0.0;
var standard_deviation = 0.0;
var variance = 0.0;
var skew = 0.0;
var kurtosis = 0.0;
var median = 0.0;
var deviation = 0.0;

var nums:stl_vector[double];

var line = Text_file::readln Text_file::stdin;
until line == "" do
  v := String::atof line;
  sum += v;
  push_back (nums,v);
  line = Text_file::readln Text_file::stdin;
done;

m := len nums;
mean := sum/double_of m;
var i = 0; until i == m do
  dev := nums.[i] - mean;
  dev2 := dev*dev;
  dev3 := dev2*dev;
  dev4 := dev3*dev;
  average_deviation += fabs dev;
  variance += dev2 /*pow(deviation,2)*/;
  skew += dev3 /* pow(deviation,3) */;
  kurtosis += dev4 /* pow(deviation,4) */;
  ++i;
done;

average_deviation /= double_of m;
variance /= double_of (m - 1);
standard_deviation = sqrt variance;
if variance != 0.0 do
  skew /= double_of m * variance * standard_deviation;
  kurtosis = kurtosis/(double_of m * variance * variance) - 3.0;
done;

mid := m / 2;
kmedian(nums, mid);
median =
  if m % 2 == 1 then nums.[mid]          // odd
  else (nums.[mid] + max (nums,mid))/2.0 // even
  endif
;

print "n:                  "; print m; endl;
print "median:             "; printf median; endl;
print "mean:               "; printf mean; endl;
print "average_deviation:  "; printf average_deviation; endl;
print "standard_deviation: "; printf standard_deviation; endl;
print "variance:           "; printf variance; endl;
print "skew:               "; printf skew; endl;
print "kurtosis:           "; printf kurtosis; endl;

@select(tangler('bagley/data/moments.data','data'))
@for i in range(1,501):
  tangle(str(i))
@doc()

@head(2,'Random Numbers')
Copied from the Ocaml code.
@select(tangler('bagley/felix/random.flx','data'))
@setup()
//adapted from Ocaml solution
im := 139968;
ia := 3877;
ic := 29573;
first_last := 42;


fun gen_random (max:double, last:int, i:int):double =>
  let ?new_last = (last * ia + ic) % im in
  if i > 1 then gen_random (max, new_last, (i - 1))
  else max * double_of new_last / double_of im
  endif
;

print (gen_random (100.0, first_last, n)); endl;

@head(2,'Reverse a File')
@select(tangler('bagley/felix/reversefile.flx','data'))
@setup()

open List;
open Text_file;

var x = Empty[string];
var s = readln stdin;
until s == "" do
  x = Cons (s,x);
  s = readln stdin;
done;

proc plist(x:list[string]){
  match x with
  | Cons (?s,?t) => { print s; plist t; }
  |  _ => {}
  endmatch;
};

plist x;

@head(2,'Matrix multiplication')
@select(tangler('bagley/felix/matrix.flx','data'))
@setup()
//Adapted from C++ solution.

body """
int **mkmatrix(int rows, int cols) {
  int i, j, count = 1;
  int **m = (int **) malloc(rows * sizeof(int *));
  for (i=0; i<rows; i++) {
    m[i] = (int *) malloc(cols * sizeof(int));
    for (j=0; j<cols; j++) m[i][j] = count++;
  }
  return(m);
}

void zeromatrix(int rows, int cols, int **m) {
  int i, j;
  for (i=0; i<rows; i++)
  for (j=0; j<cols; j++)
    m[i][j] = 0;
}

void freematrix(int rows, int **m) {
  while (--rows > -1) free(m[rows]);
  free(m);
}

void mmult(int rows, int cols, int **m1, int **m2, int **m3) {
  int i, j, k, val;
  for (i=0; i<rows; i++)
  for (j=0; j<cols; j++) {
    val = 0;
    for (k=0; k<cols; k++) val += m1[i][k] * m2[k][j];
    m3[i][j] = val;
  }
}

int get(int **mm, int x, int y) { return mm[x][y];}
""";

type matrix = "int**";
fun mkmatrix: int * int -> matrix;
fun get: matrix * int * int -> int;
proc zeromatrix: matrix;
proc mmult: int * int * matrix * matrix * matrix;
proc freematrix: int * matrix;

SIZE := 30;
m1 := mkmatrix(SIZE,SIZE);
m2 := mkmatrix(SIZE,SIZE);
mm := mkmatrix(SIZE,SIZE);

var i = n;
until i == 0 do
  mmult(SIZE, SIZE, m1, m2, mm);
  --i;
done;

print (get(mm,0,0)); print " ";
print (get(mm,2,3)); print " ";
print (get(mm,3,2)); print " ";
print (get(mm,4,4)); endl;

freematrix(SIZE, m1);
freematrix(SIZE, m2);
freematrix(SIZE, mm);

@head(2,'Sum column of integers')
@select(tangler('bagley/felix/sumcol.flx','data'))
@setup()

open Text_file;
var sum = 0;
var line = readln stdin;

until line == "" do
  sum += atoi(line);
  line = readln stdin;
done;

print sum; endl;


@select(tangler('bagley/data/sumcol.data','data'))
@for i in range(1,1001): tangle(str(i))


@select(tangler('bagley/felix/sieve.flx','data'))
@setup()
type barry = "char*";
fun mk_barry : unit -> barry = "(char*)calloc(8193,1)";
proc free : barry = "free($1);";
fun subscript: barry * int -> lvalue[bool] = "$1[$2]";

var prime = mk_barry();
var i:int;
var k: int;
var count = 0;
var m = n;

until m == 0 do
  m--;
  count = 0;
  for_each {i=2;} { i <= 8192 } { i++; } { prime.[i] = true; };
  i=2;
  whilst i <= 8192 do
    if prime.[i] do
      k=i+i;
      whilst k <= 8192 do
        prime.[k] = false;
        k+=i;
      done;
      count++;
    done;
    i++;
  done;
done;

free prime;

print "Count: "; print count; endl;

@select(tangler('bagley/felix/lists.flx','data'))
@setup()
// Adapted from C solution

header """
// a simple Double Linked List
// the head node is special, it's val is length of list
struct DLL {
    int val;
    struct DLL *next;        /* points to next or head (if at tail) */
    struct DLL *prev;        /* points to prev or tail (if at head) */
};
""";

body """
inline int len(DLL *head) { return(head->val); }
inline int empty(DLL *head) { return(len(head) == 0); }
inline DLL *first(DLL *head) { return(head->next); }
inline DLL *last(DLL *head) { return(head->prev); }

void push_tail(DLL *head, DLL *item) {
    DLL *tail = head->prev;
    tail->next = item;
    item->next = head;
    head->prev = item;
    item->prev = tail;
    head->val++;
}

DLL *pop_tail(DLL *head) {
    DLL *prev, *tail;
    if (empty(head)) return(NULL);
    tail = head->prev;
    prev = tail->prev;
    prev->next = head;
    head->prev = prev;
    head->val--;
    return(tail);
}

void push_head(DLL *head, DLL *item) {
    DLL *next = head->next;
    head->next = item;
    next->prev = item;
    item->next = next;
    item->prev = head;
    head->val++;
}

DLL *pop_head(DLL *head) {
    DLL *next;
    if (empty(head)) return(NULL);
    next = head->next;
    head->next = next->next;
    next->next->prev = head;
    head->val--;
    return(next);
}

int list_equal(DLL *x, DLL *y) {
    DLL *xp, *yp;
    // first val's checked will be list lengths
    for (xp=x, yp=y; xp->next != x; xp=xp->next, yp=yp->next) {
        if (xp->val != yp->val) return(0);
    }
    if (xp->val != yp->val) return(0);
    return(yp->next == y);
}

DLL *list_new() {
    DLL *l = (DLL *)malloc(sizeof(DLL));
    l->next = l;
    l->prev = l;
    l->val = 0;
    return(l);
}

/* inclusive sequence 'from' <-> 'to' */
DLL *list_sequence(int from, int to) {
    int size, tmp, i, j;
    DLL *l;
    if (from > to) {
        tmp = from; from = to; to = tmp;
    }
    size = to - from + 1;
    l = (DLL *)malloc((size+1) * sizeof(DLL));
    from--;
    for (i=0, j=1; i<size; ++i, ++j) {
        l[i].next = &l[i+1];
        l[j].prev = &l[j-1];
        l[i].val = from++;
    }
    l[0].prev = &l[size];
    l[size].next = &l[0];
    l[size].prev = &l[size-1];
    l[size].val = from;
    l[0].val = size;
    return(l);
}

DLL *copy(DLL *x) {
    int i, j, size = len(x);
    DLL *xp, *l = (DLL *)malloc((size+1) * sizeof(DLL));
    for (i=0, j=1, xp=x; i<size; i++, j++, xp=xp->next) {
        l[i].next = &l[j];
        l[j].prev = &l[i];
        l[i].val = xp->val;
    }
    l[0].prev = &l[size];
    l[size].next = &l[0];
    l[size].val = last(x)->val;
    return(l);
}

void rev (DLL *head) {
    DLL *tmp, *p = head;
    do {
        tmp = p->next;
        p->next = p->prev;
        p->prev = tmp;
        p = tmp;
    } while (p != head);
}
""";

type DLL_head = "DLL*";
type DLL_item = "DLL*";

fun get: DLL_item -> int = "$1->val";

fun len: DLL_head -> int;
fun empty: DLL_head -> bool;

fun non_empty(x:DLL_head)=> not (empty x);

fun first: DLL_head -> DLL_item;
fun last: DLL_head -> DLL_item;

proc push_tail: DLL_head * DLL_item;
fun pop_tail: DLL_head -> DLL_item;
proc push_head: DLL_head * DLL_item;

fun pop_head: DLL_head -> DLL_item;
fun eq: DLL_head * DLL_head -> bool = "list_equal($1,$2)";
fun ne (x:DLL_head,y:DLL_head) => not (x == y);

fun list_new: unit -> DLL_head;

/* inclusive sequence 'from' <-> 'to' */
fun list_sequence: int * int -> DLL_head;
fun copy: DLL_head -> DLL_head;

proc rev: DLL_head;
proc free: DLL_head = "std::free($1);";

proc check(cond:bool) (msg:string) {
  open System;
  open Text_file;
  if cond goto endoff;
  writeln (stderr,msg);
  exit 1;
endoff:>
}

SIZE:=10000;


var result: int;
proc test_lists() {
    var li1 = list_sequence(1, SIZE);
    var li2 = copy(li1);
    var x : DLL_item;
    check (li2 == li1) "li2 and li1 are not equal";

    // remove each individual item from left side of li2 and
    // append to right side of li3 (preserving order)
    var li3 = list_new();
    whilst non_empty li2 do
        x = pop_head li2;
        push_tail(li3, x);
    done;

    check (empty li2) "li2 should be empty now";

    // remove each individual item from right side of li3 and
    // append to right side of li2 (reversing list)
    whilst non_empty li3 do
        x = pop_tail li3;
        push_tail(li2, x);
    done;

    check (empty li3) "li3 should be empty now";

    // reverse li1 in place
    rev li1;

    check (get (first li1) == SIZE) "li1 first value wrong";
    check (get (last li1) == 1) "last value wrong";

    check (get (first li2) == SIZE) "li2 first value wrong";
    check (get (last li2) == 1) "li2 last value wrong";
    check (len li1 == SIZE) "li1 size wrong";

    // compare li1 and li2 for equality
    check (li1 == li2) "li1 and li2 are not equal";

    result = len li1;
    free li1;
    free li2;
    free li3;
}

var i = n;
until i == 0 do test_lists; --i; done;
print result; endl;

@select(tangler('bagley/felix/objinst.flx','data'))
@setup()
// Adapted from C++ solution

body """
class Toggle {
public:
    Toggle(bool start_state) : state(start_state) { }
    virtual ~Toggle() {  }
    bool value() { return(state); }
    virtual Toggle* activate() {
        state = !state;
        return this;
    }
protected:
    bool state;
};

class NthToggle : public Toggle {
public:
    NthToggle(bool start_state, int max_counter) :
        Toggle(start_state), count_max(max_counter), counter(0) {
    }
    Toggle *activate() {
        if (++this->counter >= this->count_max) {
            state = !state;
            counter = 0;
        }
        return this;
    }
private:
    int count_max;
    int counter;
};
""";

header "class Toggle;";
pod type toggle =  "class Toggle*";

fun new_toggle: bool -> toggle = "new Toggle($1)";
fun new_ntoggle: bool * int -> toggle = "new NthToggle($1,$2)";
proc del: toggle = "delete $1;";
fun value: toggle -> bool = "$1->value()";
proc activate: toggle = "$1->activate();";
proc tprint (t: toggle) { print (value t); }

proc check(t: toggle, k:int) {
  var tt = t;
  var i=k;
  until i == 0 do
    activate tt;
    tprint tt; endl;
    --i;
  done;
  del t;
}

check(new_toggle true,5);

{
  var i = n;
  until i == 0 do
    del (new_toggle true);
    --i;
  done;
  endl;
};

check (new_ntoggle(true, 3), 8);

{
  var i = n;
  until i == 0 do
    del (new_ntoggle (true, 3));
    --i;
  done;
};

@select(tangler('bagley/felix/methcall.flx','data'))
@setup()
// Adapted from C++ solution

body """
class Toggle {
public:
    Toggle(bool start_state) : state(start_state) { }
    virtual ~Toggle() {  }
    bool value() { return(state); }
    virtual Toggle* activate() {
        state = !state;
        return this;
    }
protected:
    bool state;
};

class NthToggle : public Toggle {
public:
    NthToggle(bool start_state, int max_counter) :
        Toggle(start_state), count_max(max_counter), counter(0) {
    }
    Toggle *activate() {
        if (++this->counter >= this->count_max) {
            state = !state;
            counter = 0;
        }
        return this;
    }
private:
    int count_max;
    int counter;
};
""";
header "class Toggle;";
pod type toggle =  "Toggle*";
fun new_toggle: bool -> toggle = "new Toggle($1)";
fun new_ntoggle: bool * int -> toggle = "new NthToggle($1,$2)";
proc del: toggle = "delete $1;";
fun value: toggle -> bool = "$1->value()";
proc activate: toggle = "$1->activate();";

proc check (t:toggle) {
  var tt = t;
  var v = true;
  var i = n;
  until i == 0 do
    activate tt;
    v = value tt;
    --i;
  done;
  print v; endl;
  del t;
}

check (new_toggle true);
check (new_ntoggle (true, 3));


@select(tangler('bagley/felix/strcat.flx','data'))
@setup()
// Adapted from C++ solution

var str = "";
var capacity = 31;
reserve(str,capacity); // as per C-string
var newLength = 6;
var i = n;
until i == 0 do
  if newLength > capacity do
    capacity *= 2;
    reserve(str,capacity);
  done;
  str += c"hello\n";
  newLength += 6;
  --i;
done;

print (len str); endl;

@select(tangler('bagley/felix/except.flx','data'))
@setup()
// Felix uses explicitly passed closures to handle errors
// and therefore guarrantees exceptions get caught statically

typedef err = int -> void;

var hi = 0;
var lo = 0;

proc blowup (n:int, hie:err, loe:err) {
  if n % 2 == 0 do loe n; else hie n; done;
}

proc lo_fun (n:int, hie:err) {
  blowup (n,hie,loe of (int));
  proc loe(n:int) { ++lo; goto fin; }
fin:>
}

proc hi_fun (n:int) {
  lo_fun (n,hie of (int));
  proc hie(n:int) { ++hi; goto fin; }
fin:>
}

proc some_fun (n:int) { hi_fun n; }

var i = n - 1;
until i < 0 do some_fun i; --i; done;
print "Exceptions: HI="; print hi; print " / LO="; print lo; endl;


@select(tangler('bagley/felix/wc.flx','data'))
@setup()
open Ulong;

body '''
#include <limits.h>
#include <stdio.h>
#include <string.h>

#define BSIZE 4096
unsigned long wds[UCHAR_MAX + 1];
unsigned long nwds[UCHAR_MAX + 1];
char sp=' ';
char tab = '\\t';
char lf='\\n';
unsigned char buff[BSIZE];
''';

const UCHAR_MAX:int;
const BSIZE:int;
const sp:int;
const lf:int;
const tab:int;

proc setws: int * ulong = "wds[$1]=$2;";
proc setnws: int * ulong = "nwds[$1]=$2;";
fun getws: ulong -> ulong = "wds[$1]";
fun getnws: ulong -> ulong = "nwds[$1]";

fun readbuf: unit -> int = "fread(buff,1,BSIZE,stdin)";

var prev_nws = 0x1_0000uL;
var w_cnt = 0uL;
var l_cnt = 0uL;
var b_cnt = 0uL;

type iterator = "unsigned char *";
fun eq: iterator * iterator -> bool = "$1 == $2";
fun deref: iterator -> ulong = "*$1";
fun add: iterator * ulong -> iterator = "$1 + $2";
proc post_incr: iterator = "$1++;";

fun band: ulong * ulong -> ulong = "$1 & $2";
fun hi: ulong -> ulong = "$1 >> 16";
fun lo: ulong -> ulong = "$1 & 0xFFFFuL";
fun parity : ulong -> ulong = "$1 & 1uL";
fun neg: ulong -> ulong = "-$1";

const buff: iterator = "buff";

fun iswhite(ch:int) =>
  ch == sp or ch == tab or ch == lf;

fun islf(ch:int)=> ch == lf;

fun ul(x:bool)=> C_hack::cast[ulong]x;

/* Fill tables */
{
  var ch = UCHAR_MAX; until ch < 0 do
    setws(ch, ul (iswhite ch) + band (0x10000uL,  -(ul (islf ch))));
    setnws(ch, ul (not (iswhite ch)) +  0x10000uL);
    --ch;
  done;
};

/* Main loop */
{
  var cnt: ulong;
  proc uread() {
    var n = readbuf();
    if n < 0 do System::exit 1; done;
    cnt = C_hack::cast[ulong]n;
  }

  uread;
  whilst cnt > 0uL do
    var vect_count = 0uL;
    var pp:iterator;
    pe := buff + cnt;

    b_cnt += cnt;
    pp = buff;

    until pp == pe do
      vect_count += band (getws(deref pp), prev_nws);
      prev_nws    = getnws(deref pp);
      pp++;
    done;
    w_cnt += lo vect_count;
    l_cnt += hi vect_count;
    uread;
  done;

  w_cnt += parity prev_nws;
};

print l_cnt; print " "; print w_cnt; print " "; print b_cnt; endl;

@head(2,'Heapsort')
@select(tangler('bagley/felix/heapsort.flx','data'))
@setup()
// stolen from C implementation

fun gen_random: double -> double
  requires body """
    #define IM 139968
    #define IA   3877
    #define IC  29573
    static long last;
    double
    gen_random(double max) {
        static long last = 42;
        return( max * (last = (last * IA + IC) % IM) / IM );
    }
""";
typedef darray = C_hack::ptr[double];

fun subscript: darray * int -> lvalue[double] = "$1[$2]";

val cows_jump_over_moon = false;

proc heapsort(n:int, ra: darray) {
    var i:int;
    var j:int;
    var ir = n;
    var l = (n / 2) + 1;
    var rra:double;

    until cows_jump_over_moon do
        if l > 1 do
            --l;
            rra = ra.[l];
        else
            rra = ra.[ir];
            ra.[ir] = ra.[1];
            --ir;
            if ir == 1 do
                ra.[1] = rra;
                return;
            done;
        done;
        i = l;
        j = l * 2;
        whilst j <= ir do
            if j < ir and ra.[j] < ra.[j+1] do ++j; done;
            if rra < ra.[j] do
                ra.[i] = ra.[j];
                i = j;
                j *= 2;
            else
                j = ir + 1;
            done;
        done;
        ra.[i] = rra;
    done;
}

var ary = Carray::array_alloc[double] (n+1);
var i = n; until i == 0 do
    ary.[i] = gen_random(1.0);
    --i;
done;

heapsort(n, ary);

proc print_10f: double = 'printf("%.10f\\n", $1);';
print_10f ary.[n];

Carray::free ary;

@select(tangler('bagley/felix/plugin.flx','data'))
@setup()
open List;

var prefix = Env::getenv "PLUGIN_DIR";
if prefix == "" do prefix = "./"; done;

//print "Using plugin directory "; print prefix; endl;

// list of the plugin filenames
var plugins = List::Empty[string];
@if config.WIN32:
  tangle("plugins = plugins + (prefix + 'plugin_1.dll');")
  tangle("plugins = plugins + (prefix + 'plugin_2.dll');")
  tangle("plugins = plugins + (prefix + 'plugin_3.dll');")
 else:
  tangle("plugins = plugins + (prefix + 'plugin_1.so');")
  tangle("plugins = plugins + (prefix + 'plugin_2.so');")
  tangle("plugins = plugins + (prefix + 'plugin_3.so');")

// data structure for communication with plugin
struct plugin_com_t
{
  input_line: string;
  string_pos:int;
  decoded_num:int;
  success:bool;
};

var plugin_com : plugin_com_t;
var ptr_plugin_com = C_hack::address_of plugin_com;
plugin_com.input_line = "I 1 i 2 3";

val m = len plugin_com.input_line;
var sum = 0;

// do it n times
var repeat_count = n;
until repeat_count == 0 do

  // starting at start of string
  plugin_com.string_pos = 0;
  until plugin_com.string_pos == m do

    // trying each plugin
    var remaining_plugins = plugins;
    plugin_com.success = false;
    until plugin_com.success do

      match remaining_plugins with
      | Empty =>
        {
          print "Can't find a suitable plugin"; endl;
          print "Position "; print plugin_com.string_pos; endl;
          System::exit 1;
        }

      | Cons (?plugin, ?tail) =>
        {
          var plug_lib = Dynlink::init_lib(plugin);
          Dynlink::run_proc(plug_lib,"plugin",ptr_plugin_com);
          if plugin_com.success do
            sum += plugin_com.decoded_num;
          else
            remaining_plugins = tail;
          done;
          Dynlink::destroy_lib plug_lib;
        }
      endmatch;
    done;
  done;
  --repeat_count;
done;

print sum; endl;

@select(tangler('bagley/felix/plugin_1.flx','data'))
@setup()
// data structure for communication with plugin
struct plugin_com_t
{
  input_line: string;
  string_pos:int;
  decoded_num:int;
  success:bool;
};

val zero = '0'.[0];
val nine = '9'.[0];
val space = ' '.[0];

proc plugin (p:address) {
  var q = C_hack::cast[C_hack::ptr[plugin_com_t]] p;
  val r = C_hack::deref q;
  var k = r.string_pos;
  var acc = 0;
  whilst r.input_line.[k] == space do ++k; done;
  if ord zero <= ord r.input_line.[k] &<= ord nine do
    whilst ord zero <= ord r.input_line.[k] &<= ord nine do
      acc += acc * 10 + (ord r.input_line.[k] - ord zero);
      ++k;
    done;
    r.success = true;
    r.decoded_num = acc;
    r.string_pos = k;
  else
    r.success = false;
  done;
  C_hack::deref q = r;
}

export fun plugin of (address) as "plugin";

@select(tangler('bagley/felix/plugin_2.flx','data'))
@setup()
// data structure for communication with plugin
struct plugin_com_t
{
  input_line: string;
  string_pos:int;
  decoded_num:int;
  success:bool;
};


val zero = '0'.[0];
val nine = '9'.[0];
val space = ' '.[0];
val leadin = 'i'.[0];

proc plugin (p:address) {
  var q = C_hack::cast[C_hack::ptr[plugin_com_t]] p;
  val r = C_hack::deref q;
  var k = r.string_pos;
  var acc = 0;
  whilst r.input_line.[k] == space do ++k; done;
  if r.input_line.[k] == leadin do
    ++k;
    whilst r.input_line.[k] == space do ++k; done;
    if ord zero <= ord r.input_line.[k] &<= ord nine do
      whilst ord zero <= ord r.input_line.[k] &<= ord nine do
        acc += acc * 10 + (ord r.input_line.[k] - ord zero);
        ++k;
      done;
      r.success = true;
      r.decoded_num = acc;
      r.string_pos = k;
    else
      r.success = false;
    done;
  else
    r.success = false;
  done;
  C_hack::deref q = r;
}

export fun plugin of (address) as "plugin";


@select(tangler('bagley/felix/plugin_3.flx','data'))
@setup()
// data structure for communication with plugin
struct plugin_com_t
{
  input_line: string;
  string_pos:int;
  decoded_num:int;
  success:bool;
};

val zero = '0'.[0];
val nine = '9'.[0];
val space = ' '.[0];
val leadin = 'I'.[0];

proc plugin (p:address) {
  var q = C_hack::cast[C_hack::ptr[plugin_com_t]] p;
  val r = C_hack::deref q;
  var k = r.string_pos;
  var acc = 0;
  whilst r.input_line.[k] == space do ++k; done;
  if r.input_line.[k] == leadin do
    ++k;
    whilst r.input_line.[k] == space do ++k; done;
    if ord zero <= ord r.input_line.[k] &<= ord nine do
      whilst ord zero <= ord r.input_line.[k] &<= ord nine do
        acc += acc * 10 + (ord r.input_line.[k] - ord zero);
        ++k;
      done;
      r.success = true;
      r.decoded_num = acc;
      r.string_pos = k;
    else
      r.success = false;
    done;
  else
    r.success = false;
  done;
  C_hack::deref q = r;
}

export fun plugin of (address) as "plugin";


@select(tangler('bagley/felix/hash.flx','data'))
@setup()
include "stl";
open Stl;
open Stl::HashMap;

requires ext_string_hash;

body hexer = """
string hex(int x) { char buf[20]; snprintf(buf,20,"%x",x); return buf; }
""";

fun hex: int -> string requires hexer;

var hm = HashMap::create[string,int]();

var i = n; until i == 0 do
  insert(hm,hex i,i);
  --i;
done;

var c = 0;
i = n; until i == 0 do
  if mem (hm,str i) do c++; done;
  --i;
done;

print c; endl;


@select(tangler('bagley/felix/hash2.flx','data'))
@setup()
include "stl";
open Stl;
open Stl::HashMap;

requires ext_string_hash;

var h1 = HashMap::create[string,int]();

var i = 1; until i == 10000 do
  s := "foo_" + str i;
  insert (h1, s, i);
  ++i;
done;

var h2 = HashMap::create[string,int]();

i=n; until i == 0 do
  var j = begin h1; until j == end h1 do
    k, v := deref j;
    //h2.[k] = h2.[k] + v;
    h2.[k] += v;
    ++j;
  done;
  --i;
done;

print h1.["foo_1"]; print " "; print h1.["foo_9999"]; print " " ;
print h2.["foo_1"]; print " "; print h2.["foo_9999"]; endl;

@select(tangler('bagley/felix/spellcheck.flx','data'))
@setup()
include "stl";
open Stl;
open Stl::HashSet;
open Text_file;

requires ext_string_hash;

var prefix = Env::getenv "DICT_DIR";
if prefix == "" do prefix = "./"; done;


var dict = HashSet::create[string]();
val dfile = prefix + "Usr.Dict.Words";
var f = fopen_input dfile;
if not (valid f) do
  print ("Cannot Open Dictionary file '" + dfile +"'"); endl;
  System::exit 1;
done;

var word = readln f;
until word == "" do insert (dict,word); word = readln f; done;
fclose f;

word = readln stdin;
until word == "" do
  if not (mem (dict,word)) do print word; done;
  word = readln stdin;
done;

@select(tangler('bagley/felix/wordfreq.flx','data'))
@setup()
include "stl";
open Stl;
open Stl::HashMap;
open Stl::Set;
open Text_file;
open Lexer;

body lt_cmp[t] = """
  namespace std {
    template<>
    bool less<?1> :: operator()(?1 const &a, ?1 const &b)const {
     return a.mem_0 == b.mem_0 ?? a.mem_1 < b.mem_1 : a.mem_0 > b.mem_0;
    }
  }
""";

proc tolower : lvalue[string] = "tol($1);" requires
  body """
    void tol(std::string &x) {
      std::string::iterator e = x.end();
      for(std::string::iterator i = x.begin(); i != e; ++i)
        *i = tolower (*i);
    }
  """,
  cctype_hxx
;

requires ext_string_hash;
requires lt_cmp[int * string];

regexp upper = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
regexp lower = ["abcdefghijklmnopqrstuvwxyz"];
regexp wrd = ( upper | lower) +;

fun lexit (start:iterator, finish:iterator): iterator * bool =>
  reglex start to finish with
  | wrd => true
  | _ => false
  endmatch
;

var dict = HashMap::create[string,int]();
proc add_word(s:iterator, e:iterator)
{
  var word = string_between(s,e);
  tolower word;
  p := find (dict,word);
  if p == end dict do
    insert (dict,word,1);
  else
    k,j := deref p;
    (deref p).(1) ++;
  done;
};

{
  var data = readln stdin;
  until data == "" do
    first := start_iterator data;
    last := end_iterator data;

    var current = first;
    var next = first;
    var isword : bool;
    until current == last do
      next, isword = lexit(current, last);
      if isword do
        add_word(current,next);
        current = next;
      else
        ++current;
      done;
    done;
    data = readln stdin;
  done;
};

var wmap = Set::create[int * string] ();
{
  var cur = begin dict;
  dlast := end dict;
  until cur == dlast do
    word, count := deref cur;
    insert (wmap,(count,word));
    ++cur;
  done;
};

{
  var cur = begin wmap;
  last := end wmap;
  until cur == last do
    count, word := deref cur;
    print ("       " + str count).[-7 to]; print " "; print word; endl;
    ++cur;
  done;
};

@head(2,"bagley/felix/prodcons")
@select(tangler('bagley/felix/prodcons.flx','data'))
@setup()
var produced = 0;
var consumed = 0;

proc consumer() {
  until consumed == n do
    var x:int; &x <- read;
    ++consumed;
  done;
}

proc producer() {
  var i = 1;
  until produced == n do
    ++produced;
    send[int] (&con) i;
    ++i;
  done;
}

var con = start the consumer;
var prod= start the producer;
run prod;

print produced; print " "; print consumed; endl;
@doc()

@select(tangler("bagley/felix/prodcons.expect","data"))
1000 1000
@doc()

@head(2,"bagley/felix/takfp")
@select(tangler('bagley/felix/takfp.flx','data'))
@setup()
open Float;

proc print1: float = 'printf("%.1f\\n",$1);';

fun Tak (x:float, y:float, z:float): float =>
  if (y >= x) then z
  else Tak(Tak(x-1.0f,y,z), Tak(y-1.0f,z,x), Tak(z-1.0f,x,y))
  endif
;

w := float_of n;
print1 (Tak(w*3.0f, w*2.0f, w*1.0f));
@doc()

@select(tangler("bagley/felix/takfp.expect","data"))
11.0
@doc()

@head(2,"bagley/felix/procinst")
@select(tangler('bagley/felix/procinst.flx','data'))
@setup()
thread_max := n;
message_max := atoi(System::argv 2);

var thread_count = thread_max;
var message_count = message_max;

proc final() {
  var msg:int;
  var total = 0;
  whilst true do
    &msg <-read;
    total += msg;

    if message_count == 0 do
      print total; endl;
    done;
  done;
}

proc agent() {
  us := thread_count;
  --thread_count;
  var next =
    if us > 1 then start the agent
    else start the final endif
  ;
  var msg:int;
  whilst true do
    &msg <- read;
    send[int] (&next) (msg+1);
  done;
}

var first = start the agent;

whilst message_count >0 do
  --message_count;
  send[int] (&first) 0;
  //collect();
done;
@doc()

@select(tangler("bagley/felix/procinst.expect","data"))
100
@doc()

@select(tangler('bagley/data/Usr.Dict.Words','data'))
aback
abaft
abandon
abandoned
abandoning
abandonment
abandons
abase
abased
abasement
abasements
abases
abash
abashed
abashes
abashing
abasing
abate
abated
abatement
abatements
abater
abates
abating
abbe
abbey
abbeys
abbot
abbots
abbreviate
abbreviated
abbreviates
abbreviating
@select(tangler('bagley/data/spellcheck.data','data'))
aback
abaft
abandon
abandoned
abandoning
abandonment
abandons
abase
abased
abasement
abases
abash
abashed
abashes
abashing
abasing
abate
abated
abatement
abatements
abater
abates
abating
abbe
abbey
abbeys
abbot
abbots
abbreviate
abbreviated
abbreviates
abbreviating
zuul
abasements
@select(tangler('bagley/data/wordfreq.data','data'))
                                      1515
                                   THE PRINCE
                             by Nicolo Machiavelli
                          translated by W. K. Marriott
                              CHAPTER I
             HOW MANY KINDS OF PRINCIPALITIES THERE ARE,
                 AND BY WHAT MEANS THEY ARE ACQUIRED

  ALL STATES, all powers, that have held and hold rule over men have
been and are either republics or principalities.
  Principalities are either hereditary, in which the family has been
long established; or they are new.
  The new are either entirely new, as was Milan to Francesco Sforza,
or they are, as it were, members annexed to the hereditary state of
the prince who has acquired them, as was the kingdom of Naples to that
of the King of Spain.
  Such dominions thus acquired are either accustomed to live under a
prince, or to live in freedom; and are acquired either by the arms
of the prince himself, or of others, or else by fortune or by ability.
                              CHAPTER II
                 CONCERNING HEREDITARY PRINCIPALITIES

  I WILL leave out all discussion on republics, inasmuch as in another
place I have written of them at length, and will address myself only
to principalities. In doing so I will keep to the order indicated
above, and discuss how such principalities are to be ruled and
preserved.
  I say at once there are fewer difficulties in holding hereditary
states, and those long accustomed to the family of their prince,
than new ones; for it is sufficient only not to transgress the customs
of his ancestors, and to deal prudently with circumstances as they
arise, for a prince of average powers to maintain himself in his
state, unless he be deprived of it by some extraordinary and excessive
force; and if he should be so deprived of it, whenever anything
sinister happens to the usurper, he will regain it.
  We have in Italy, for example, the Duke of Ferrara, who could not
have withstood the attacks of the Venetians in '84, nor those of
Pope Julius in '10, unless he had been long established in his
dominions. For the hereditary prince has less cause and less necessity
to offend; hence it happens that he will be more loved; and unless
extraordinary vices cause him to be hated, it is reasonable to
expect that his subjects will be naturally well disposed towards
him; and in the antiquity and duration of his rule the memories and
motives that make for change are lost, for one change always leaves
the toothing for another.


@head(1,"Expected outputs for bagley/felix")
@head(2,"bagley/felix/array.expect")
@select(tangler("bagley/felix/array.expect","data"))
1000 1000000
@head(2,"bagley/felix/ackermann.expect")
@select(tangler("bagley/felix/ackermann.expect","data"))
Ack(3,8): 2045
@head(2,"bagley/felix/except.expect")
@select(tangler("bagley/felix/except.expect","data"))
Exceptions: HI=4 / LO=4
@head(2,"bagley/felix/fibo.expect")
@select(tangler("bagley/felix/fibo.expect","data"))
Fib(8): 34
@head(2,"bagley/felix/heapsort.expect")
@select(tangler("bagley/felix/heapsort.expect","data"))
0.9990640718
@head(2,"bagley/felix/hello.expect")
@select(tangler("bagley/felix/hello.expect","data"))
hello world
@head(2,"bagley/felix/lists.expect")
@select(tangler("bagley/felix/lists.expect","data"))
10000
@head(2,"bagley/felix/matrix.expect")
@select(tangler("bagley/felix/matrix.expect","data"))
270165 1061760 1453695 1856025
@head(2,"bagley/felix/methcall.expect")
@select(tangler("bagley/felix/methcall.expect","data"))
true
true
@head(2,"bagley/felix/nestedloop.expect")
@select(tangler("bagley/felix/nestedloop.expect","data"))
262144
@head(2,"bagley/felix/objinst.expect")
@select(tangler("bagley/felix/objinst.expect","data"))
false
true
false
true
false

true
true
false
false
false
true
true
true
@head(2,"bagley/felix/random.expect")
@select(tangler("bagley/felix/random.expect","data"))
8.16329
@head(2,"bagley/felix/regexmatch.expect")
@select(tangler("bagley/felix/regexmatch.expect","data"))
1: (111) 111-1111
2: (111) 222-2222
3: (111) 333-3333
4: (111) 444-4444
5: (111) 555-5555
6: (111) 666-6666
7: (111) 777-7777
8: (111) 888-8888
9: (111) 999-9999
10: (111) 000-0000
11: (111) 232-1111
12: (111) 242-1111
13: (213) 222-2222
@head(2,"bagley/felix/reversefile.expect")
@select(tangler("bagley/felix/reversefile.expect","data"))
foo 214) 222 2222 bar
foo (213 222-2222 bar
foo 211@22222222 bar
foo (202).222 2222 bar

foo 292 222 22222
foo (282) 222-22227
foo 272 2222222
foo (262) 2222222

2252 222 2222
(242) 222-22222
2232 222-2222
2(212) 222 2222

The following should fail to match:

foo 111 242 1111 bar
foo (111) 232-1111 bar
foo 111 000-0000 bar
foo (111) 999 9999 bar

foo 111 888 8888
foo (111) 777-7777
foo 111 666-6666
foo (111) 555 5555

111 444 4444
(111) 333-3333
111 222-2222
(111) 111 1111

the following numbers should match:

datafile for regex matching of phone numbers test
@head(2,"bagley/felix/sieve.expect")
@select(tangler("bagley/felix/sieve.expect","data"))
Count: 1028
@head(2,"bagley/felix/strcat.expect")
@select(tangler("bagley/felix/strcat.expect","data"))
48
@head(2,"bagley/felix/sumcol.expect")
@select(tangler("bagley/felix/sumcol.expect","data"))
500500
@head(2,"bagley/felix/wc.expect")
@select(tangler("bagley/felix/wc.expect","data"))
35 100 566
@head(2,"bagley/felix/plugin.expect")
@select(tangler("bagley/felix/plugin.expect","data"))
120
@head(2,"bagley/felix/hash.expect")
@select(tangler("bagley/felix/hash.expect","data"))
4999
@head(2,"bagley/felix/hash2.expect")
@select(tangler("bagley/felix/hash2.expect","data"))
1 9999 10 99990
@head(2,"bagley/felix/moments.expect")
@select(tangler("bagley/felix/moments.expect","data"))
n:                  500
median:             250.500000
mean:               250.500000
average_deviation:  125.000000
standard_deviation: 144.481833
variance:           20875.000000
skew:               0.000000
kurtosis:           -1.207202
@head(2,"bagley/felix/spellcheck.expect")
@select(tangler("bagley/felix/spellcheck.expect","data"))
zuul
@head(2,"bagley/felix/wordfreq.expect")
@select(tangler("bagley/felix/wordfreq.expect","data"))
     20 the
     17 of
     16 and
     16 to
     12 are
     11 in
      7 by
      7 for
      7 it
      7 or
      7 prince
      6 be
      6 principalities
      6 will
      5 as
      5 either
      5 have
      5 he
      5 hereditary
      5 his
      5 i
      5 that
      4 acquired
      4 new
      4 they
      3 all
      3 been
      3 has
      3 long
      3 unless
      2 a
      2 accustomed
      2 another
      2 at
      2 cause
      2 change
      2 chapter
      2 deprived
      2 dominions
      2 established
      2 extraordinary
      2 family
      2 happens
      2 him
      2 himself
      2 how
      2 is
      2 less
      2 live
      2 not
      2 only
      2 powers
      2 republics
      2 rule
      2 so
      2 state
      2 states
      2 such
      2 them
      2 there
      2 those
      2 was
      2 who
      1 ability
      1 above
      1 address
      1 always
      1 ancestors
      1 annexed
      1 antiquity
      1 anything
      1 arise
      1 arms
      1 attacks
      1 average
      1 circumstances
      1 concerning
      1 could
      1 customs
      1 deal
      1 difficulties
      1 discuss
      1 discussion
      1 disposed
      1 doing
      1 duke
      1 duration
      1 else
      1 entirely
      1 example
      1 excessive
      1 expect
      1 ferrara
      1 fewer
      1 force
      1 fortune
      1 francesco
      1 freedom
      1 had
      1 hated
      1 held
      1 hence
      1 hold
      1 holding
      1 if
      1 ii
      1 inasmuch
      1 indicated
      1 italy
      1 julius
      1 k
      1 keep
      1 kinds
      1 king
      1 kingdom
      1 leave
      1 leaves
      1 length
      1 lost
      1 loved
      1 machiavelli
      1 maintain
      1 make
      1 many
      1 marriott
      1 means
      1 members
      1 memories
      1 men
      1 milan
      1 more
      1 motives
      1 myself
      1 naples
      1 naturally
      1 necessity
      1 nicolo
      1 nor
      1 offend
      1 on
      1 once
      1 one
      1 ones
      1 order
      1 others
      1 out
      1 over
      1 place
      1 pope
      1 preserved
      1 prudently
      1 reasonable
      1 regain
      1 ruled
      1 say
      1 sforza
      1 should
      1 sinister
      1 some
      1 spain
      1 subjects
      1 sufficient
      1 than
      1 their
      1 thus
      1 toothing
      1 towards
      1 transgress
      1 translated
      1 under
      1 usurper
      1 venetians
      1 vices
      1 w
      1 we
      1 well
      1 were
      1 what
      1 whenever
      1 which
      1 with
      1 withstood
      1 written
@doc()
