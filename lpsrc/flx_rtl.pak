@import config

@head(1,"Run time driver support library")

This package contains core types and routines
to facilitate construction of drivers for
felix shared libraries. A felix driver is the top
level interface between the embedding application
and the felix generated shared libraries.
@p()
The code we give is platform independent, except as noted.
@p()
The code all lives in directory rtl, the run time
library support directory. The symbols are defined
in namespace flx::rtl, except as noted.

@select(tangler('config/flx_exceptions.fpc', 'data'))
Name: flx
Description: Felix exceptions
@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:flx_exceptions_dynamic")
   tangle("provides_slib: /DEFAULTLIB:flx_exceptions_static")
 else:
   tangle("provides_dlib: -lflx_exceptions_dynamic")
   tangle("provides_slib: -lflx_exceptions_static")
@doc()
includes: '"flx_exceptions.hpp"'

@select(tangler('config/flx.fpc', 'data'))
Name: flx
Description: Felix core runtime support
Version: $Id$
@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:flx_dynamic")
   tangle("provides_slib: /DEFAULTLIB:flx_static")
 else:
   tangle("provides_dlib: -lflx_dynamic")
   tangle("provides_slib: -lflx_static")
Requires: flx_gc flx_exceptions
includes: '"flx_rtl.hpp"' '"flx_strutil.hpp"' '"flx_i18n.hpp"'  <iostream> <cstdio> <cstddef> <cassert> <climits> <string>
@doc()

@select(tangler('config/flx_arun.fpc', 'data'))
Name: flx_arun
Description: Felix standard driver, async support
Version: $Id$
Requires: flx_async faio demux flx_pthread flx flx_gc
@doc()

@select(tangler('config/flx_run.fpc', 'data'))
Name: flx_run
Description: Felix standard driver, no async support
Version: $Id$
Requires: flx_pthread flx flx_gc
@doc()

@select(tangler('config/flx_async.fpc', 'data'))
Name: flx_async
Description: Async hook
Version: $Id$
@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:flx_async_dynamic")
   tangle("provides_slib: /DEFAULTLIB:flx_async_static")
 else:
   tangle("provides_dlib: -lflx_async_dynamic")
   tangle("provides_slib: -lflx_async_static")

Requires: faio demux flx_pthread flx flx_gc
@doc()

@head(2,"Procedure Continuation Abstraction")
The heart of the driver/library interface
is the continuation class. Note the message pointer
is an abstract address and must be cast to the
right type by client drivers.

@h=tangler('config/target/flx_exceptions_config.hpp')
@select(h)
#ifndef __FLX_EXCEPTIONS_CONFIG_H__
#define __FLX_EXCEPTIONS_CONFIG_H__
#include "flx_rtl_config.hpp"
#ifdef BUILD_FLX_EXCEPTIONS
#define FLX_EXCEPTIONS_EXTERN FLX_EXPORT
#else
#define FLX_EXCEPTIONS_EXTERN FLX_IMPORT
#endif
#endif
