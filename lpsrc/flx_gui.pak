@head(1,"A GUI interface for Felix using Pything and Tkinter")
@def make_executable(path):
   import stat
   try:
     mode = os.stat(path).st_mode
     os.chmod(path, mode | stat.S_IXUSR)
   except OSError, e:
     print e

@select(tangler("bin/gflx.py"))
#!/usr/bin/env python
from Tkinter import *
import os
import sys
import glob

def get_stdout(x):
  """We're screwed if popen doesn't work .."""

  if os.name == "nt": # popen doesn't work on Windows
    result = os.system(x + " >tmp.out")
    fout = open("tmp.out")
    output = fout.readlines()
    fout.close()
  else:
    fout = os.popen(x+" 2>&1 ","r")
    output = fout.readlines()
    result = fout.close()
  return result,output

def refine(all,prefix):
  res = []
  l = len(prefix)
  for line in all:
    if line[:l]==prefix: res.append(line)
  res.sort()
  return res

def find_next(all,x):
  n = len(all)
  if n == 0: return x
  for i in range(0,n-1):
    if all[i] > x: return all[i]
  return all[0]

class App:

    def __init__(self, master,initfile):
        self.history = []
        self.history_pos = -1
        self.frame = Frame(master,bd=20,bg="blue",height=900)
        self.frame.pack(fill=BOTH,expand=1)
        
        self.menu1 = Menu()
        master.config(menu=self.menu1)
        filemenu = Menu(self.menu1)
        self.menu1.add_cascade(label="File", menu=filemenu)
        filemenu.add_command(label="New", command=self.todo)
        filemenu.add_command(label="Open...", command=self.todo)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.frame.quit)

        helpmenu = Menu(self.menu1)
        self.menu1.add_cascade(label="Help", menu=helpmenu)
        helpmenu.add_command(label="About...", command=self.todo)


        self.frame_top = Frame(self.frame)
        self.frame_left = Frame(self.frame,bg="red",bd=10)
        self.frame_right = Frame(self.frame,bg="cyan",bd=10)

        self.frame_top.pack(side=TOP, fill=X)
        self.frame_left.pack(side=LEFT, expand=1,fill=BOTH)
        self.frame_right.pack(side=RIGHT, expand=1,fill=BOTH)

        self.filename_tag = Label(self.frame_top,text="Filename")
        self.filename = Entry(self.frame_top)
        self.filename.bind("<Up>",self.filename_up)
        self.filename.bind("<Down>",self.filename_down)
        self.filename.bind("<Tab>",self.filename_tab)

        self.runme = Button(self.frame_top, text="run",command=self.run)
        self.loadme = Button(self.frame_top,text="load", command=self.load)
        self.saveme = Button(self.frame_top,text="save", command=self.save)
        self.quit = Button(self.frame_top,text="quit",fg="red", command=self.frame.quit)

        self.filename_tag.pack(side=LEFT)
        self.filename.pack(side=LEFT)
        self.runme.pack(side=LEFT)
        self.loadme.pack(side=LEFT)
        self.saveme.pack(side=LEFT)
        self.quit.pack(side=LEFT)

        self.filename.insert(END,initfile)
        self.flxin = Text(self.frame_left,bg="yellow",bd=5)
        self.flxin.pack(expand=1,fill=BOTH)
        self.flxin.insert(END, "println 'Hello World';")

        self.flxout = Text(self.frame_right)
        self.flxout.pack(expand=1,fill=BOTH)
        self.load()

    def load(self):
      filename = self.filename.get()
      print "Loading file="+filename
      try:
        f = open(filename)
        text = f.read()
        f.close()
        self.flxin.delete("0.0",END)
        self.flxin.insert(END,text)
        self.add_history(filename)
        return 1
      except:
        print "FILE "+filename+"NOT FOUND"
        return 0

    def save(self,filename=None):
      if filename==None:
        filename = self.filename.get()
      print "Saving file="+filename
      text = self.flxin.get("0.0",END)
      try:
        f = open(filename,"w")
        f.write(text)
        f.close()
      except:
        print "CANT WRITE FILE "+filename

    def run(self):
      self.save("tmp.flx")
      print "Running tmp.flx"
      cmd = "bin/flx --test tmp.flx"
      result,text = get_stdout(cmd)
      self.flxout.delete("0.0",END)
      for line in text:
        self.flxout.insert(END,line)

    def add_history(self,filename):
      if len(self.history)==0 or self.history[-1] != filename:
        self.history.append(filename)
        self.history_pos = len(self.history) - 1

    def filename_up(self,e):
      if self.history_pos > 0:
        self.history_pos = self.history_pos - 1
        filename = self.history[self.history_pos]
        self.filename.delete("0",END)
        self.filename.insert(END,filename)


    def filename_down(self,e):
      if self.history_pos < len(self.history) - 1:
        self.history_pos = self.history_pos + 1
        filename = self.history[self.history_pos]
        self.filename.delete("0",END)
        self.filename.insert(END,filename)

    def filename_tab(self,e):
      pos = self.filename.index(INSERT)
      print "Tab at x=" + str(pos)
      filename = self.filename.get()
      prefix = filename[:pos]
      suffix = filename[pos:]
      all = glob.glob(prefix+"*")
      all = refine(all,prefix)
      next = find_next(all,filename)
      if next!=filename:
        self.filename.delete(INSERT,END)
        self.filename.insert(INSERT,next[pos:])
        self.filename.icursor(pos)
      return "break"

    def todo(self):
      print "to do .. :"

root = Tk()
argc=len(sys.argv)
initfile="hello.flx"
if argc>1:
  initfile=sys.argv[1]
app = App(root,initfile)

root.mainloop()

@make_executable("bin/gflx.py")

