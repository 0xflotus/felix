@execfile('config'+os.sep+'flx_data.py')
@def make_executable(path):
   import stat
   try:
     mode = os.stat(path).st_mode
     os.chmod(path, mode | stat.S_IXUSR)
   except OSError, e:
     print e

@head(1,"A GUI interface for Felix using Pything and Tkinter")
@select(tangler("bin/gflx.py"))
#!/usr/bin/env python
from Tkinter import *
import os
import os.path
import sys
import glob
import string
import stat
import popen2

@keywords = map ((lambda (a,b):a),flx_keywords)
@tangle('keywords='+repr(keywords))

def get_stdout(x,outit=None):
  """We're screwed if popen doesn't work .."""

  if os.name == "nt": # popen doesn't work on Windows
    result = os.system(x + " >tmp.out")
    fout = open("tmp.out")
    output = fout.readlines()
    if outit:
      for line in output: outit(line)
    fout.close()
  else:
    handle = popen2.Popen4(x,80)
    output = []
    try:
      for line in handle.fromchild:
        output.append(line)
        if outit: outit(line)
    finally:
      result=handle.wait()
      handle.fromchild.close()
      handle.tochild.close()
  return result,output

def refine(all,prefix):
  res = []
  l = len(prefix)
  for line in all:
    if line[:l]==prefix: res.append(line)
  res.sort()
  return res

def dirfilt(all):
  res = []
  for line in all:
    st = os.stat(line)
    dir = stat.S_ISDIR(st.st_mode)
    if dir: res.append(line+"/")
  res.sort()
  return res
  
def find_next(all,x):
  n = len(all)
  if n == 0: return x
  for i in range(0,n):
    if all[i] > x: return all[i]
  return all[0]

def set_ext(p,ext):
  h,t = os.path.split(p)
  bs = string.split(t,'.')
  t = string.join(bs[:-1],'.')+ext
  return os.path.join(h,t)

def get_ext(p):
  h,t = os.path.split(p)
  bs = string.split(t,'.')
  if len (bs) > 0:
    return bs[-1]
  else:
    return None

def write_val(f,v,level):
  spaces = " " * (level * 2)
  if type(v) == type({}):
    write_dict(f,d,level+1)
  elif type(v) == type([]):
    write_list(f,v,level)
  else:
    f.write(spaces+repr(v))

def write_list(f,d,level):
  spaces = " " * (level * 2)
  f.write(spaces+"[\n")
  for v in d: 
    write_val(f,v,level+1)
    f.write(",\n")
  f.write(spaces+"]")

def write_dict(f,d,level):
  spaces = " " * (level * 2)
  f.write(spaces+"{\n")
  for k in d:
    v = d[k]
    f.write(spaces+"  "+repr(k)+":")
    write_val(f,v,level+1)
    f.write(spaces+",\n")
  f.write(spaces+"}\n")

class ConfigDialog:
  def __init__(self,parent,app):
    self.recurse = 1
    top = self.top = Toplevel(parent)
    self.echo=StringVar()
    self.debug=StringVar()
    self.static=StringVar()
    self.felix=StringVar()
    self.optimise=StringVar()
    self.force=StringVar()
    self.runit=StringVar()

    top.grid_columnconfigure(1,weight=1)
    Label(top, text="Run command").grid(row=0,column=0)
    self.runcmdentry = Entry(top,
      width=40,
      textvariable=app.runcmd)
    self.runcmdentry.grid(row=0,column=1)
    app.runcmd.trace("w",self.setbuttons)

    row=0

    row=row + 1 # echo
    Label(top,text="Echo").grid(row=row,column=0)
    self.echobox=Checkbutton(top,variable=self.echo,onvalue="--echo ",offvalue="",command=self.setcmd)
    self.echobox.grid(row=row,column=1)

    row=row + 1 # debug
    Label(top,text="Debug").grid(row=row,column=0)
    self.debugbox=Checkbutton(top,variable=self.debug,onvalue="--debug ",offvalue="",command=self.setcmd)
    self.debugbox.grid(row=row,column=1)
    self.debug.trace("w",self.optfromdebug)

    row = row + 1 # optimise
    Label(top,text="optimise").grid(row=row,column=0)
    self.optimisebox=Checkbutton(top,variable=self.optimise,onvalue="",offvalue="--nooptimise ",command=self.setcmd)
    self.optimisebox.grid(row=row,column=1)
    self.optimise.trace("w",self.debugfromopt)

    row = row + 1 # static
    Label(top,text="Static").grid(row=row,column=0)
    self.staticbox=Checkbutton(top,variable=self.debug,onvalue="--static ",offvalue="",command=self.setcmd)
    self.staticbox.grid(row=row,column=1)

    row = row + 1 # nofelix
    Label(top,text="Felix").grid(row=row,column=0)
    self.felixbox=Checkbutton(top,variable=self.felix,onvalue="",offvalue="--nofelix ",command=self.setcmd)
    self.felixbox.grid(row=row,column=1)

    row=row + 1 # force
    Label(top,text="Force").grid(row=row,column=0)
    self.forcebox=Checkbutton(top,variable=self.force,onvalue="--force ",offvalue="",command=self.setcmd)
    self.forcebox.grid(row=row,column=1)

    row = row + 1 # execute
    Label(top,text="Execute").grid(row=row,column=0)
    self.runitbox=Checkbutton(top,variable=self.runit,onvalue="",offvalue="-c ",command=self.setcmd)
    self.runitbox.grid(row=row,column=1)

    self.recurse = 0
    self.buttonsfromcmd()

  def optfromdebug(self,x,y,z):
    if self.debug.get() == "--debug ":
      self.optimise.set("--nooptimise ")

  def debugfromopt(self,x,y,z):
    if self.optimise.get() == "":
      self.debug.set("")

  def setcmd(self):
    if self.recurse==1: return
    self.recurse=1
    self.cmdfrombuttons()
    self.recurse=0

  def setbuttons(self,x,y,z):
    if self.recurse==1: return
    self.recurse=1
    self.buttonsfromcmd()
    self.recurse=0
    return 1

  def buttonsfromcmd(self):
    cmd = app.runcmd.get()
    cmdw = string.split(cmd)

    if "--force" in cmdw: 
      self.force.set("--force ")
    else:
      self.force.set("")

    if "--nofelix" in cmdw: 
      self.felix.set("--nofelix ")
    else:
      self.felix.set("")

    if "-c" in cmdw: 
      self.runit.set("-c ")
    else:
      self.runit.set("")

    if "--static" in cmdw: 
      self.static.set("--static ")
    else:
      self.static.set("")

    if "--echo" in cmdw: 
      self.echo.set("--echo ")
    else:
      self.echo.set("")

    if "--debug" in cmdw: 
      self.debug.set("--debug ")
    else:
      self.debug.set("")

    if "--nooptimise" in cmdw or "--debug" in cmdw: 
      self.debug.set("--nooptimise ")
    else:
      self.debug.set("")

  def cmdfrombuttons(self):
    cmd = app.runcmd.get()
    cmdw = string.split(cmd)
    cmdx = cmdw[0]
    cmdw = cmdw[1:]
    cmdw2 = []
    for option in cmdw:
      if option not in [
        "--nofelix",
        "-c",
        "--static",
        "--debug",
        "--force",
        "--echo",
        "--nooptimise",
      ]:
        cmdw2.append(option)
    opts = ( 
      self.echo.get() + 
      self.debug.get() + 
      self.felix.get() +
      self.optimise.get() +
      self.static.get() + 
      self.runit.get() + 
      self.force.get())
    cmd = cmdx+' '+opts+string.join(cmdw2," ")
    app.runcmd.set(cmd)

#--------------------------
class closure:
  def __init__(self,fn,*args,**kwds):
    self.fn = fn
    self.args = args
    self.kwds = kwds

  def __call__(self):
    return apply(self.fn,self.args,self.kwds)

#--------------------------
class Appstate:
  def __init__(self):
    self.__dict__["mydict"] = {}
    self.history = []
    self.history_pos = -1
    self.command_history = []
    self.command_history_pos = -1
    self.curfile = None
    self.runstring = "bin/flx.py --test %s"
    self.execlist = [
      # filetype, button, command
       ("flx","run","bin/flx.py --test %s %s"),
       ("cpp","run","bin/flx.py --test --nofelix --force %s %s"),
       ("py","run","python %s.py"),
       ("pak","run","python interscript/bin/iscr.py %s.pak %s")
      ]
    self.load()

  def __getattr__(self,a):
    return self.mydict[a]

  def __setattr__(self,a,v):
    self.__dict__["mydict"][a]=v

  def save(self):
    f = open(".gflx.profile","w")
    d = self.__dict__["mydict"]
    write_dict(f,d,0)
    f.write("\n")
    f.close()
    print "Save profile"
    #print self.__dict__["mydict"]


  def load(self):
    try:
      f = open(".gflx.profile","r")
      data = f.read()
      f.close()
      d = eval(data)
      self.__dict__["mydict"].update(d)
      print "Load profile"
    except:
      pass
    #print self.__dict__["mydict"]

#--------------------------
class App:
  def __init__(self, master,initfile):
    self.master=master

    # try to load last used file
    self.appstate = Appstate()

    # if command line arg given, override it
    if initfile:
      self.appstate.curfile = initfile

    # if still no file, start with hello.flx
    if not self.appstate.curfile:
      self.appstate.curfile = "hello.flx"

    self.runcmd = StringVar(master)
    self.runcmd.set(self.appstate.runstring)
    self.frame = Frame(master,bd=2)
    self.frame.pack(fill=BOTH,expand=1)
    
    self.menu1 = Menu()
    master.config(menu=self.menu1)
    filemenu = Menu(self.menu1)
    self.menu1.add_cascade(label="File", menu=filemenu)
    filemenu.add_command(label="New", command=self.todo)
    filemenu.add_command(label="Open...", command=self.todo)
    filemenu.add_command(label="Config", command=self.config)
    filemenu.add_command(label="Colour", command=self.colour)
    filemenu.add_separator()
    filemenu.add_command(label="Exit", command=self.doquit)

    helpmenu = Menu(self.menu1)
    self.menu1.add_cascade(label="Help", menu=helpmenu)
    helpmenu.add_command(label="About...", command=self.todo)


    self.frame_top = Frame(self.frame,bd=4,background="gray80")
    self.frame_top2 = Frame(self.frame,bd=4,background="gray80")
    self.panes = PanedWindow(self.frame,orient=HORIZONTAL,bd=4,background="gray80")

    self.frame_left = Frame(self.panes,bd=4)
    self.frame_right = Frame(self.panes,bd=4)
    self.scroll_left = Scrollbar(self.frame_left)
    self.scroll_right = Scrollbar(self.frame_right)

    self.frame_top.pack(side=TOP, fill=X,expand=0)
    self.frame_top2.pack(side=TOP, fill=X,expand=0)
    self.panes.pack(side=BOTTOM, expand=1,fill=BOTH)
    self.panes.add(self.frame_left)
    self.panes.add(self.frame_right)
    #self.frame_left.pack(side=LEFT, expand=1,fill=BOTH)
    #self.frame_right.pack(side=RIGHT, expand=1,fill=BOTH)

    self.filename_tag = Label(self.frame_top,text="Filename")
    self.filename = Entry(self.frame_top,width=20)

    self.filename.bind("<Up>",self.filename_up)
    self.filename.bind("<Down>",self.filename_down)
    self.filename.bind("<Tab>",self.filename_tab)
    self.filename.bind("<Return>",self.load)
    self.filename.bind("/",self.dirname_tab)

    self.command_tag = Label(self.frame_top2,text="Shell")
    self.command = Entry(self.frame_top2,width=20)
    self.command.bind("<Up>",self.command_up)
    self.command.bind("<Down>",self.command_down)
    self.command.bind("<Return>",self.command_run)

    self.loadme = Button(self.frame_top,text="load", command=self.load)
    self.saveme = Button(self.frame_top,text="save", command=self.save)
    self.saveas = Button(self.frame_top,text="save-as", command=self.saveas)
    self.profile = Button(self.frame_top2,text="profile", command=self.doprofile)
    self.quit = Button(self.frame_top,text="quit",fg="red", command=self.doquit)

    self.colourize= Button(self.frame_top2,text="colour",command=self.colour)
    self.cppme= Button(self.frame_top2,text="C++",command=self.cpp)

    self.filename_tag.pack(side=LEFT)
    self.filename.pack(side=LEFT,fill=X,expand=1)
    self.quit.pack(side=RIGHT)
    self.saveas.pack(side=RIGHT)
    self.saveme.pack(side=RIGHT)
    self.loadme.pack(side=RIGHT)
    self.profile.pack(side=RIGHT)
    self.colourize.pack(side=RIGHT)
    self.cppme.pack(side=RIGHT)

    self.command_tag.pack(side=LEFT)
    self.command.pack(side=LEFT,fill=X,expand=1)

    buttons = []
    for ft,but,cmd in self.appstate.execlist:
      if but not in buttons: buttons.append(but)
    for but in buttons:
      Button(self.frame_top2,text=but,command=closure(self.doexec,but)).pack(side=RIGHT)

    self.filename.insert(END,self.appstate.curfile)
    self.flxin = Text(self.frame_left,
      bd=5,width=60,spacing1=1,spacing2=1,
      padx=4,pady=2,
      yscrollcommand=self.scroll_left.set
      )
    self.flxin.pack(side=LEFT,expand=1,fill=BOTH)
    self.flxin.insert(END, "println 'Hello World';")
    self.scroll_left.pack(side=RIGHT,fill=Y)
    self.scroll_left.config(command=self.flxin.yview)

    self.flxout = Text(self.frame_right,
      width=10,spacing1=1,spacing2=1,
      yscrollcommand=self.scroll_right.set
      )
    self.flxout.pack(side=LEFT,expand=1,fill=BOTH)
    self.scroll_right.pack(side=RIGHT,fill=Y)
    self.scroll_right.config(command=self.flxout.yview)

    self.load()

  def load(self,event=None):
    filename = self.filename.get()
    print "Loading file="+filename
    self.flxin.delete("0.0",END)
    try:
      f = open(filename)
      text = f.read()
      f.close()
      self.flxin.insert(END,text)
      result = 1
    except IOError:
      print "FILE '"+filename+"' NOT FOUND"
      result = 0

    self.add_history(filename)
    self.master.title(filename)
    self.appstate.curfile = filename
    self.colour()
    self.flxout.delete("0.0",END)
    return result

  def saveas(self):
    filename = self.filename.get()
    self.save(filename)
    self.appstate.curfile=filename

  def save(self,filename=None):
    if filename==None:
      filename = self.appstate.curfile
    print "Saving file="+filename
    text = self.flxin.get("0.0",END)
    try:
      f = open(filename,"w")
      f.write(text)
      f.close()
    except:
      print "CANT WRITE FILE "+filename
    self.append_history(filename)
    if filename==".gflx.profile":
      self.appstate.load()

  def append_flxout(self,line):
    self.flxout.insert(END,line)
    self.flxout.see(END)
    self.master.update_idletasks()
    self.master.update()

  def doprofile(self):
    self.appstate.save()
    self.filename.delete("0",END)
    self.filename.insert(END,".gflx.profile")
    self.load()

  def doexec(self,but):
    print "exec something for " + but
    s = self.filename.get()
    ss = string.split(s)
    filename = ss[0]
    args = string.join(ss[1:])
    ext = get_ext(filename)
    action = None
    for f,b,a in self.appstate.execlist:
      if b == but and f == ext: action = a
    if type(action)==type(""):
      self.save()
      cmd = action % (set_ext(filename,""),args)
      self.flxout.delete("0.0",END)
      print "cmd="+cmd
      self.command.delete("0",END)
      self.command.insert(END,cmd)
      self.command.update_idletasks()
      result,text = get_stdout(cmd,self.append_flxout)
      self.say_result(result)
    else:
      action()

  def say_result(self,result):
    print "result=",result
    if result ==0:
      self.frame_right.configure(background="green")
    else:
      self.frame_right.configure(background="red")

  def cpp(self):
    self.save()
    cmd = self.runcmd.get() % "-c " + self.appstate.curfile
    print "cmd="+cmd
    result,text = get_stdout(cmd,self.append_flxout)
    filename=set_ext(self.filename.get(),".cpp")
    self.filename.delete("0",END)
    self.filename.insert(END,filename)
    self.load()

  def add_history(self,filename):
    if filename not in self.appstate.history:
      self.appstate.history.append(filename)
      self.appstate.history_pos = len(self.appstate.history) - 1

  def append_history(self,filename):
    if filename in self.appstate.history:
      del self.appstate.history[self.appstate.history.index(filename)]
    self.appstate.history.append(filename)
    self.appstate.history_pos = len(self.appstate.history) - 1

  def filename_up(self,e):
    if self.appstate.history_pos > 0:
      self.appstate.history_pos = self.appstate.history_pos - 1
      filename = self.appstate.history[self.appstate.history_pos]
      self.filename.delete("0",END)
      self.filename.insert(END,filename)
      self.load()

  def filename_down(self,e):
    if self.appstate.history_pos < len(self.appstate.history) - 1:
      self.appstate.history_pos = self.appstate.history_pos + 1
      filename = self.appstate.history[self.appstate.history_pos]
      self.filename.delete("0",END)
      self.filename.insert(END,filename)
      self.load()

  def command_up(self,e):
    if self.appstate.command_history_pos > 0:
      self.appstate.command_history_pos = self.appstate.command_history_pos - 1
      command = self.appstate.command_history[self.appstate.command_history_pos]
      self.command.delete("0",END)
      self.command.insert(END,command)

  def command_down(self,e):
    if self.appstate.command_history_pos < len(self.appstate.command_history) - 1:
      self.appstate.command_history_pos = self.appstate.command_history_pos + 1
      command = self.appstate.command_history[self.appstate.command_history_pos]
      self.command.delete("0",END)
      self.command.insert(END,command)

  def command_run(self,e):
    cmd = self.command.get()
    if cmd in self.appstate.command_history:
      del self.appstate.command_history[self.appstate.command_history.index(cmd)]
    self.appstate.command_history.append(cmd)
    self.appstate.command_history_pos = len(self.appstate.command_history) - 1

    try:
      cmd = cmd % set_ext(self.appstate.curfile,"")
    except:
      pass
    self.flxout.delete("0.0",END)
    print "cmd="+cmd
    result,text = get_stdout(cmd,self.append_flxout)
    self.say_result(result)


  def filename_tab(self,e):
    pos = self.filename.index(INSERT)
    filename = self.filename.get()
    prefix = filename[:pos]
    suffix = filename[pos:]
    ext = get_ext(filename)
    all = glob.glob(prefix+"*."+ext)
    all = refine(all,prefix)
    next = find_next(all,filename)
    if next!=filename:
      self.filename.delete(INSERT,END)
      self.filename.insert(INSERT,next[pos:])
      self.filename.icursor(pos)
      self.load()
    return "break"

  def dirname_tab(self,e):
    pos = self.filename.index(INSERT)
    filename = self.filename.get()
    prefix = filename[:pos]
    suffix = filename[pos:]
    all = glob.glob(prefix+"*")
    all = dirfilt(all)
    all = refine(all,prefix)
    next = find_next(all,filename)
    if next!=filename:
      self.filename.delete(INSERT,END)
      self.filename.insert(INSERT,next[pos:])
      self.filename.icursor(pos)
    return "break"

  def todo(self):
    print "to do .. :"

  def config(self):
    try:
      state = self.configdialog.top.state()
    except:
      self.configdialog = ConfigDialog(self.master,self)
      state = self.configdialog.top.state()
    #print "State=" + state
    if state in ["withdrawn","iconic"]:
      self.configdialog.top.deiconify()
    self.configdialog.top.lift()
      
  def colour(self):
    font1 = ("Helvetica",10,"bold")
    font2 = ("Helvetica",10,"italic")
    strregexp="'.*'|\".*\"|'''.*'''"+'|""".*"""'
    numregexp="[0-9]+|[0-9]*\.0-9"
    cppcomregexp="//.*$" +'|/\\*.*\\*/'

    self.flxin.tag_config("num",foreground="#007700")
    self.flxin.tag_config("ident",foreground="blue")
    self.flxin.tag_config("keyword",foreground="#336699",font=font1)
    self.flxin.tag_config("string",foreground="#007777")
    self.flxin.tag_config("cppcom",foreground="#aa1122",font=font2)

    self.flxin.tag_remove("keyword","0.0",END)
    self.flxin.tag_remove("string","0.0",END)
    self.flxin.tag_remove("num","0.0",END)
    self.flxin.tag_remove("ident","0.0",END)
    self.flxin.tag_remove("cppcom","0.0",END)
    self.scan(numregexp,"num")
    self.scan(strregexp,"string")
    self.idents()
    self.scan(cppcomregexp,"cppcom")

  def idents(self):
    idregexp="[a-zA-Z_][a-zA-Z0-9_]*"
    loc="0.0"
    lvar = IntVar()
    loc=self.flxin.search(idregexp,loc,stopindex=END,regexp=1,count=lvar)
    while loc != "":
      eloc=loc+"+"+str(lvar.get())+" chars"
      lex = self.flxin.get(loc,eloc)
      tag = "ident"
      if lex in keywords: tag = "keyword"
      self.flxin.tag_add(tag,loc,eloc)
      loc=self.flxin.search(idregexp,eloc,stopindex=END,regexp=1,count=lvar)


  def scan(self,regexp,tag):
    loc="0.0"
    lvar = IntVar()
    loc=self.flxin.search(regexp,loc,stopindex=END,regexp=1,count=lvar)
    while loc != "":
      eloc=loc+"+"+str(lvar.get())+" chars"
      self.flxin.tag_add(tag,loc,eloc)
      loc=self.flxin.search(regexp,eloc,stopindex=END,regexp=1,count=lvar)

  def doquit(self):
    self.appstate.runstring = self.runcmd.get()
    self.appstate.save()
    self.frame.quit()

root = Tk()
root.option_add("*Label*font","Helvetica 10 bold")
root.option_add("*Button*font","Helvetica 10 bold")
root.option_add("*Text*font","Courier 10")
root.geometry("800x700+0+0")
argc=len(sys.argv)
initfile=None
if argc>1:
  initfile=sys.argv[1]
app = App(root,initfile)

root.protocol("WM_DELETE_WINDOW",app.doquit)
root.mainloop()

@make_executable("bin/gflx.py")

