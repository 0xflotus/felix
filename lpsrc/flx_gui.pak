@head(1,"A GUI interface for Felix using Pything and Tkinter")
@def make_executable(path):
   import stat
   try:
     mode = os.stat(path).st_mode
     os.chmod(path, mode | stat.S_IXUSR)
   except OSError, e:
     print e

@select(tangler("bin/gflx.py"))
#!/usr/bin/env python
from Tkinter import *
import os
import sys
import glob

def get_stdout(x,outit=None):
  """We're screwed if popen doesn't work .."""

  if os.name == "nt": # popen doesn't work on Windows
    result = os.system(x + " >tmp.out")
    fout = open("tmp.out")
    output = fout.readlines()
    if outit:
      for line in output: outit(line)
    fout.close()
  else:
    fout = os.popen(x+" 2>&1 ","r")
    output = []
    try:
      for line in fout:
        output.append(line)
        if outit: outit(line)
    finally:
      result = fout.close()
  return result,output

def refine(all,prefix):
  res = []
  l = len(prefix)
  for line in all:
    if line[:l]==prefix: res.append(line)
  res.sort()
  return res

def find_next(all,x):
  n = len(all)
  if n == 0: return x
  for i in range(0,n-1):
    if all[i] > x: return all[i]
  return all[0]

class ConfigDialog:
  def __init__(self,parent,app):
    top = self.top = Toplevel(parent)
    Label(top, text="Run command").grid(row=0,column=0)
    self.runcmdentry = Entry(top,text="run command", textvariable=app.runcmd)
    self.runcmdentry.grid(row=0,column=1)

    Label(top,text="Debug").grid(row=1,column=0)
    self.debug=StringVar()
    self.debugbox=Checkbutton(top,variable=self.debug,onvalue="--debug ",offvalue="")
    self.debugbox.grid(row=1,column=1)

    Label(top,text="Static").grid(row=1,column=0)
    self.static=StringVar()
    self.staticbox=Checkbutton(top,variable=self.debug,onvalue="--static ",offvalue="")
    self.staticbox.grid(row=1,column=1)

    Label(top,text="Felix").grid(row=2,column=0)
    self.felix=StringVar()
    self.felixbox=Checkbutton(top,variable=self.felix,onvalue="",offvalue="--nofelix ")
    self.felixbox.grid(row=2,column=1)

    Label(top,text="C++").grid(row=3,column=0)
    self.cpp=StringVar()
    self.cppbox=Checkbutton(top,variable=self.cpp,onvalue="",offvalue="--nocpp ")
    self.cppbox.grid(row=3,column=1)

    Label(top,text="Execute").grid(row=4,column=0)
    self.runit=StringVar()
    self.runitbox=Checkbutton(top,variable=self.runit,onvalue="",offvalue="-c ")
    self.runitbox.grid(row=4,column=1)


class App:
  def __init__(self, master,initfile):
    self.master=master
    self.history = []
    self.history_pos = -1

    self.runcmd = StringVar(master,name="runcmd", value="bin/flx --test %s")
    self.frame = Frame(master,bd=20,bg="blue",height=900)
    self.frame.pack(fill=BOTH,expand=1)
    
    self.menu1 = Menu()
    master.config(menu=self.menu1)
    filemenu = Menu(self.menu1)
    self.menu1.add_cascade(label="File", menu=filemenu)
    filemenu.add_command(label="New", command=self.todo)
    filemenu.add_command(label="Open...", command=self.todo)
    filemenu.add_command(label="Config", command=self.config)
    filemenu.add_separator()
    filemenu.add_command(label="Exit", command=self.frame.quit)

    helpmenu = Menu(self.menu1)
    self.menu1.add_cascade(label="Help", menu=helpmenu)
    helpmenu.add_command(label="About...", command=self.todo)


    self.frame_top = Frame(self.frame)
    self.frame_left = Frame(self.frame,bg="red",bd=10)
    self.frame_right = Frame(self.frame,bg="cyan",bd=10)

    self.frame_top.pack(side=TOP, fill=X)
    self.frame_left.pack(side=LEFT, expand=1,fill=BOTH)
    self.frame_right.pack(side=RIGHT, expand=1,fill=BOTH)

    self.filename_tag = Label(self.frame_top,text="Filename")
    self.filename = Entry(self.frame_top)
    self.filename.bind("<Up>",self.filename_up)
    self.filename.bind("<Down>",self.filename_down)
    self.filename.bind("<Tab>",self.filename_tab)

    self.runme = Button(self.frame_top, text="run",command=self.run)
    self.loadme = Button(self.frame_top,text="load", command=self.load)
    self.saveme = Button(self.frame_top,text="save", command=self.save)
    self.quit = Button(self.frame_top,text="quit",fg="red", command=self.frame.quit)

    self.filename_tag.pack(side=LEFT)
    self.filename.pack(side=LEFT)
    self.runme.pack(side=LEFT)
    self.loadme.pack(side=LEFT)
    self.saveme.pack(side=LEFT)
    self.quit.pack(side=LEFT)

    self.filename.insert(END,initfile)
    self.flxin = Text(self.frame_left,bg="yellow",bd=5)
    self.flxin.pack(expand=1,fill=BOTH)
    self.flxin.insert(END, "println 'Hello World';")

    self.flxout = Text(self.frame_right)
    self.flxout.pack(expand=1,fill=BOTH)
    self.load()

  def load(self):
    filename = self.filename.get()
    print "Loading file="+filename
    try:
      f = open(filename)
      text = f.read()
      f.close()
      self.flxin.delete("0.0",END)
      self.flxin.insert(END,text)
      self.add_history(filename)
      self.master.title(filename)
      return 1
    except:
      print "FILE "+filename+"NOT FOUND"
      return 0

  def save(self,filename=None):
    if filename==None:
      filename = self.filename.get()
    print "Saving file="+filename
    text = self.flxin.get("0.0",END)
    try:
      f = open(filename,"w")
      f.write(text)
      f.close()
    except:
      print "CANT WRITE FILE "+filename

  def append_flxout(self,line):
    self.flxout.insert(END,line)


  def run(self):
    self.save("tmp.flx")
    print "Running tmp.flx"
    cmd = self.runcmd.get() % "tmp.flx"
    self.flxout.delete("0.0",END)
    print "cmd="+cmd
    result,text = get_stdout(cmd,self.append_flxout)

  def add_history(self,filename):
    if len(self.history)==0 or self.history[-1] != filename:
      self.history.append(filename)
      self.history_pos = len(self.history) - 1

  def filename_up(self,e):
    if self.history_pos > 0:
      self.history_pos = self.history_pos - 1
      filename = self.history[self.history_pos]
      self.filename.delete("0",END)
      self.filename.insert(END,filename)


  def filename_down(self,e):
    if self.history_pos < len(self.history) - 1:
      self.history_pos = self.history_pos + 1
      filename = self.history[self.history_pos]
      self.filename.delete("0",END)
      self.filename.insert(END,filename)

  def filename_tab(self,e):
    pos = self.filename.index(INSERT)
    filename = self.filename.get()
    prefix = filename[:pos]
    suffix = filename[pos:]
    all = glob.glob(prefix+"*")
    all = refine(all,prefix)
    next = find_next(all,filename)
    if next!=filename:
      self.filename.delete(INSERT,END)
      self.filename.insert(INSERT,next[pos:])
      self.filename.icursor(pos)
    return "break"

  def todo(self):
    print "to do .. :"

  def config(self):
    try:
      state = self.configdialog.top.state()
    except:
      self.configdialog = ConfigDialog(self.master,self)
      state = self.configdialog.top.state()
    #print "State=" + state
    if state in ["withdrawn","iconic"]:
      self.configdialog.top.deiconify()
    #self.configdialog.top.grab_set()
      

root = Tk()
argc=len(sys.argv)
initfile="hello.flx"
if argc>1:
  initfile=sys.argv[1]
app = App(root,initfile)

root.mainloop()

@make_executable("bin/gflx.py")

