@head(1,"System dependent path handling")
@select(tangler('src/compiler/misclib/flx_filesys.mli'))
val filetime : string -> float
val find_file_in_path: 
  string list -> string -> string
val find_file:
  bool -> string list -> string -> string

@select(tangler('src/compiler/misclib/flx_filesys.ml'))
exception Found_file of string

let fcat fs = match fs with 
| [] -> Filename.current_dir_name
| _ -> List.fold_left Filename.concat (List.hd fs) (List.tl fs)

let split_unix f = Str.split (Str.regexp "/") f

let unix2native f = fcat (split_unix f)

let find_file_in_path incdirs f =
  try
    List.iter
    (fun d -> 
      let f =  unix2native (d ^ "/" ^ f) in 
      if Sys.file_exists f 
      then raise (Found_file f)
    )
    incdirs
    ;
    ""
  with Found_file s -> s 

let find_file lookup incdirs f =
  if String.length f = 0
  then failwith "Empty include file name"
  ;
  if f.[0] = '/' || not lookup then unix2native f 
  else find_file_in_path incdirs f

let filetime f =
  if f = "" then 0.0 
  else 
    try (Unix.stat f).Unix.st_mtime 
    with | _ -> 0.0
@doc()

@h = tangler('spkgs/misc.py')
@select(h)
# files containing ocamllex sources
MISC_LEXS = []

# files containing ocamlyacc sources
MISC_PARSES = [ ]

# ocaml modules = interfaces + implementation files
MISC_MODULES = [
  'src/compiler/misclib/flx_filesys',
]

MISC_INTERFACES = MISC_MODULES

MISC_IMPLEMENTATIONS = MISC_INTERFACES

caml_require_libs = ["str"]
caml_provide_lib = 'src/compiler/misclib/misclib'
caml_interfaces = MISC_INTERFACES
caml_implementations = MISC_IMPLEMENTATIONS

