@import config
@python("//")
rmap = {}

tmap = {
  # addressing
  "byte"      : "unsigned char",
  "size"      : "size_t",
  "cvaddress" : "void const volatile*",
  "vaddress"  : "void volatile*",
  "caddress"  : "void const*",
  "address"   : "void *",
  "offset"    : "ptrdiff_t",
  "ptrdiff"   : "ptrdiff_t",

  #characters
  "char"    : "char",
  "wchar"   : "wchar_t",

  #signed integers
  "tiny"    : "signed char",
  "short"   : "short",
  "int"     : "int",
  "long"    : "long",

  #unsigned integers
  "utiny"   : "unsigned char",
  "ushort"  : "unsigned short",
  "uint"    : "unsigned int",
  "ulong"   : "unsigned long",

  #floating
  "float"   : "float",
  "double"  : "double",
  "ldouble"  : "long double"
 }

#if config.TARGET_CXX.options.HAVE_COMPLEX:
if False:
  tmap["imaginary"]="float _Imaginary"
  tmap["dimaginary"]="double _Imaginary"
  tmap["limaginary"]="long double _Imaginary"
  tmap["fcomplex" ]="float _Complex"
  tmap["dcomplex"]="double _Complex"
  tmap["lcomplex"]="long double _Complex"

  rmap["imaginary" ]="c99_complex_h"
  rmap["dimaginary" ]="c99_complex_h"
  rmap["limaginary" ]="c99_complex_h"
  rmap["fcomplex" ]="c99_complex_h"
  rmap["dcomplex"]="c99_complex_h"
  rmap["lcomplex"]="c99_complex_h"
else:
  tmap["imaginary"]="float"
  tmap["dimaginary"]="double"
  tmap["limaginary"]="long double"
  tmap["fcomplex" ]="std::complex<float>"
  tmap["dcomplex"]="std::complex<double>"

  rmap["fcomplex" ]="complex_hxx"
  rmap["dcomplex"]="complex_hxx"
  rmap["lcomplex"]="complex_hxx"

if config.TARGET_CXX.options.HAVE_LONGDOUBLE:
  tmap["ldouble"]="long double"
  tmap["lcomplex"]="std::complex<long double>"
else:
  tmap["ldouble"]="double"
  tmap["lcomplex"]="std::complex<double>"

if config.TARGET_CXX.options.HAVE_LONGLONG:
  tmap["vlong"]="long long"
  tmap["uvlong"]="unsigned long long"
else:
  tmap["vlong"]="long"
  tmap["uvlong"]="unsigned long"

if config.TARGET_CXX.options.HAVE_STDINT:
  tmap["int8"]="int8_t"
  tmap["uint8"]="uint8_t"
  tmap["int16"]="int16_t"
  tmap["uint16"]="uint16_t"
  tmap["int32"]="int32_t"
  tmap["uint32"]="uint32_t"
  tmap["int64"]="int64_t"
  tmap["uint64"]="uint64_t"
  tmap["intptr"]="intptr_t"
  tmap["uintptr"]="uintptr_t"
  tmap["intmax"]="intmax_t"
  tmap["uintmax"]="uintmax_t"

  # requirements
  rmap["int8"]="c99_stdint_h"
  rmap["uint8"]="c99_stdint_h"
  rmap["int16"]="c99_stdint_h"
  rmap["uint16"]="c99_stdint_h"
  rmap["int32"]="c99_stdint_h"
  rmap["uint32"]="c99_stdint_h"
  rmap["int64"]="c99_stdint_h"
  rmap["uint64"]="c99_stdint_h"
  rmap["intptr"]="c99_stdint_h"
  rmap["uintptr"]="c99_stdint_h"
  rmap["intmax"]="c99_stdint_h"
  rmap["uintmax"]="c99_stdint_h"
else:
  tmap["int8"]="signed char"
  tmap["uint8"]="unsigned char"
  sizes = {
    config.TARGET_CXX.options.SIZEOF_SHORT*8 : "short",
    config.TARGET_CXX.options.SIZEOF_INT*8: "int",
    config.TARGET_CXX.options.SIZEOF_LONG*8 : "long",
  }
  tmap["intmax"]="long"
  tmap["uintmax"]="unsigned long"
  if config.TARGET_CXX.options.HAVE_LONGLONG:
    sizes[config.TARGET_CXX.options.SIZEOF_LONGLONG*8]="long long"
    tmap["intmax"]="long long"
    tmap["uintmax"]="unsigned long long"
  for size in [16,32,64]:
    try:
      t = sizes[size]
    except KeyError:
      tmap["int"+str(size)]="emul_int"+str(size)
      tmap["uint"+str(size)]="emul_uint"+str(size)
    else:
      tmap["int"+str(size)]=t
      tmap["uint"+str(size)]="unsigned " + t
  try:
    tmap["intptr"]=sizes[config.TARGET_CXX.options.SIZEOF_VOIDP*8]
    tmap["uintptr"]="unsigned "+sizes[config.TARGET_CXX.options.SIZEOF_VOIDP*8]
  except:
    print("NO INTEGER THE SIZE OF A VOID*!")
    sys.exit(1)

tmap["uchar"]=tmap["int32"] # Unicode/ISO10646, note: SIGNED!
//

@head(1,'Felix Standard Library')

@head(2,"Code")
@fc = {'float':'f', 'double':'','ldouble':'l'}

@def gen_nan(t):
  if config.TARGET_CXX.options.HAVE_CXX_ISNAN_IN_CMATH:
    tangle('  fun isnan: '+t+' -> bool = "::std::isnan($1)" is postfix requires cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan'+fc[t]+'($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_IEEEFP:
    tangle('  fun isnan: '+t+' -> bool = "isnanf'+fc[t]+'($1)" is postfix requires ieeefp_h;')
  else:
    tangle('  fun isnan: '+t+' -> bool = "!($1==$1)" is unary;')

  if config.TARGET_CXX.options.HAVE_CXX_ISINF_IN_CMATH:
    tangle('  fun isinf: '+t+' -> bool = "::std::isinf($1)" is postfix requires cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISINF_IN_IEEEFP:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires ieeefp_h;')
  else:
    tangle('  fun isinf: '+t+' -> bool = "($1==$1 && $1+$1+1.0==$1)" is unary;')

  if config.TARGET_CXX.options.HAVE_CXX_ISFINITE_IN_CMATH:
    tangle('  fun isfinite: '+t+' -> bool = "::std::isfinite($1)" is postfix requires cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISFINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "isfinite($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_FINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_FINITE_IN_IEEEFP:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires ieeefp_h')
  else:
    tangle('  fun isfinite: '+t+' -> bool = "($1==$1 && $1!==0.0 && $1+$1!=$1)" is unary;')



@h=tangler('lib/plat/flx.flxh','data')
@select(h)
// GENERATED DURING CONFIGURATION
open syntax felix;

@plats = ["WIN32","POSIX","LINUX","MACOSX","CYGWIN","SOLARIS","BSD"]

@for i in plats:
  if getattr(config, i):
    tangle("macro val " + i + " = true;")
  else:
    tangle("macro val " + i + " = false;")

@ctypes=tangler('lib/plat/flx_ctypes.flx','data')
@select(ctypes)
// GENERATED DURING CONFIGURATION
header cctype_hxx = '#include <cctype>';
header string_hxx = '#include <string>';
header complex_hxx = '#include <complex>';
header c99_complex_h = '#include <complex.h>';

@if config.TARGET_CXX.options.HAVE_STDINT:
  tangle('header c99_stdint_h = "#include <stdint.h>";')
 else:
  tangle('header c99_stdint_h = "";')

header cstdlib = "#include <cstdlib>";
header cstring = "#include <cstring>";

@chars = ["char", "wchar", "uchar"]
@fast_sints = [
  "tiny", "short", "int", "long", "vlong"
  ]
@fast_uints = [
  "utiny", "ushort", "uint", "ulong", "uvlong"
  ]
@exact_sints = [
  "int8","int16","int32","int64"
  ]
@exact_uints = [
  "uint8","uint16","uint32","uint64"
  ]
@sints = fast_sints + exact_sints
@uints = fast_uints + exact_uints
@fast_ints = fast_sints + fast_uints
@exact_ints = exact_sints + exact_uints
@ints = uints + sints

@floats = ["float", "double", "ldouble"]

@complex = ["fcomplex","dcomplex","lcomplex"]
@imaginary= ["imaginary", "dimaginary", "limaginary"]
@all = [
  "byte", "address","caddress","vaddress","cvaddress",
  "offset",
  ] + chars + fast_ints + floats + complex + imaginary

@def gen_type(t):
  d = rmap.get(t,None)
  if d:
    tangle('pod type '+t+' = "'+tmap[t]+'" requires '+d+';')
  else:
    tangle('pod type '+t+' = "'+tmap[t]+'";')

@fint2cint={
  'tiny':'signed char',
  'short':'short',
  'int':'int',
  'long':'long',
  'vlong':'long long',
  'utiny':'unsigned char',
  'ushort':'unsigned short',
  'uint':'unsigned int',
  'ulong':'unsigned long',
  'uvlong':'unsigned long long',
  }

@cint2fint = {}
@for f in fint2cint.keys(): cint2fint[fint2cint[f]]=f

@def alias_sint(t):
  if t == 'int8': size = 1
  elif t == 'int16': size = 2
  elif t == 'int32': size = 4
  elif t == 'int64': size = 8
  if SIZEOF_CHAR == size: return 'tiny'
  if SIZEOF_SHORT == size: return 'short'
  if SIZEOF_INT == size: return 'int'
  if SIZEOF_LONG == size: return 'long'
  if SIZEOF_LONGLONG == size: return 'vlong'

@def alias_uint(t):
  if t == 'uint8': size = 1
  elif t == 'uint16': size = 2
  elif t == 'uint32': size = 4
  elif t == 'uint64': size = 8
  if SIZEOF_CHAR == size: return 'utiny'
  if SIZEOF_SHORT == size: return 'ushort'
  if SIZEOF_INT == size: return 'uint'
  if SIZEOF_LONG == size: return 'ulong'
  if SIZEOF_LONGLONG == size: return 'uvlong'

@select(tangler("lib/plat/ctypedefs.flx",'data'))
// GENERATED DURING CONFIGURATION
@for t in all:
  gen_type(t)

_gc_pointer type gcaddress = "void*";
_gc_pointer type gcptr[t]= "?1*";

@# mandatory in C
@for t in ['ptrdiff','size','intmax','uintmax','intptr','uintptr']:
  equiv = cint2fint[getattr(config.TARGET_CXX.options, 'ALIAS_'+t+'_t')]
  tangle('typedef ' + t + ' = ' + equiv + ';')

@# optional in C
@for t in exact_ints:
  equiv = cint2fint[getattr(config.TARGET_CXX.options, 'ALIAS_'+t+'_t')]
  tangle('typedef ' + t + ' = ' + equiv + ';')

@select(tangler('lib/plat/arithmax.flx','data'))
// GENERATED DURING CONFIGURATION
// arithmetic conversion rule
typedef fun arithmax(l: TYPE, r: TYPE): TYPE =>
  typematch integral_promotion l, integral_promotion r with
@for f1 in fint2cint.keys():
  if f1 not in ['tiny','short','utiny','ushort']:
    for f2 in fint2cint.keys():
      if f2 not in ['tiny','short','utiny','ushort']:
        f3 = cint2fint[config.TARGET_CXX.options.arith_conv[(fint2cint[f1],fint2cint[f2])]]
        comment = ""
        if f1 == f2:
          if f2 != f1: comment = "// ERROR"
        if (f1 == 'uvlong' or f2 == 'uvlong') and f3 != 'uvlong':
          comment = "// ERROR, uvlong expected"
        elif f3 != f1 and f3 != f2:
          comment = "// SPECIAL PROMOTION"
        elif f1 == 'uint' and f2=='long' or f1=='long' and f2=='uint':
          comment = '// Representation Dependent (long or ulong)'
        if f1 == 'uvlong' or f2 == 'uvlong' or f3 == 'int':
          pass
        else:
          tangle('  | '+f1+','+f2+' => '+f3+' '+comment)
@#
  | uvlong,_ => uvlong
  | _,uvlong => uvlong
  | _,_ => int
  endmatch
;


@select(tangler('lib/plat/float.flx','data'))
// GENERATED DURING CONFIGURATION
@for t in floats:
  tangle("open module " + t.capitalize())
  tangle("{")
  tangle('  fun _ctor_'+t+': string -> '+t+' = "static_cast<'+tmap[t]+'>(::std::atof($1.data()))" requires cstdlib;')
  tangle('  fun _ctor_'+t+'[T:reals]: T -> '+t+' = "static_cast<'+tmap[t]+'>($1)";')
  gen_nan(t)
  tangle('  proc fprint: ostream * '+t+' = "*$1<<$2;" requires iostream;')
  tangle("}")
  tangle("")


@select(ctypes)
include "plat/ctypedefs";
include "std/ctypesets";
include "plat/arithmax";
include "plat/float";


fun _ctor_int: size -> int = "$1";
fun _ctor_size: int -> size = "$1";


instance [t in basic_types] Eq[t] {
  fun eq: t * t -> bool = "$1==$2";
}
open[T in basic_types] Show[T];
open Show[bool];
@doc()

@h = tangler("lib/std/version.flx")
@select(h)
// GENERATED DURING BUILD (for version number)
publish "System Interface"
module Version
{
@tangle('  const felix_version : string = \'::std::string("'+config.flx_version+'")\';')
}


@h = tangler("lib/plat/filename.flx")
@select(h)
// GENERATED DURING CONFIGURATION
module Plat_Filename
{
@if os.sep == '\\':
   # FFS!!! we put \\\\\\\\ here:
   # Python reduces it to \\\\             !!!
   # Felix then reduces it to \\           !!!
   # and finally C reduces it to plain \   !!!
   # don't remove the !!! because \ at eol is continuation .. argg
   tangle('  val sep  = "\\\\\\\\"')
 else:
   tangle('  val sep = "'+os.sep+'";')
@#
 
}

