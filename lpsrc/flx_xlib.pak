@set_title("Xlib binding for Felix")
@head(1,"Xlib binding")
We make a minimal binding library
for Xlib.
@h = tangler('lib/xlib.flx')
@select(h)
header """
extern "C" {
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/Xatom.h>
}
""";

module Xlib {
  type Display = "Display*";

  fun XOpenDisplay: string -> Display = 
    code "XOpenDisplay($1.data())";

  fun XOpenDefaultDisplay: unit -> Display = 
    code "XOpenDisplay(NULL)";
  
  fun isXOpenDisplay: Display -> bool = 
    code "$1 != NULL";

  type ScreenKey = "int";
  
  fun DefaultScreen: Display -> ScreenKey = 
    code "DefaultScreen($1)";

  type Screen = "Screen*";
  
  fun DefaultScreenOfDisplay: Display -> Screen = 
    code "DefaultScreenOfDisplay($1)";

  fun ScreenCountdisplay : Display -> int =
    code "ScreenCountdisplay($1)";

  fun DisplayWidth : Display * ScreenKey -> int = 
    code "DisplayWidth($1, $2)";

  fun DisplayHeight: Display * ScreenKey -> int = 
    code "DisplayHeight($1, $2)";

  fun RootWindow: Display * ScreenKey -> Window =
    code "RootWindow($1,$2)";

  type Color = "int";

  fun BlackPixel: Display * ScreenKey -> Color =
    code "BlackPixel($1,$2)";

  fun WhitePixel: Display * ScreenKey -> Color =
    code "WhitePixel($1,$2)";

  type Window = "Window";

  fun XCreateSimpleWindow: 
    Display * Window *
    int * int * int * int * int *
    Color * Color -> Window
  =
    code "XCreateSimpleWindow($a)";
}

@head(1,"X Driver")
We make a minimal driver for X windows.
@h = tangler('test/xdrv.cpp')
@select(h)
/* yet to be written */

@head(1,"Sample Application")
Here is a sample application.
It consists of a single routine for managing
a top level X window.
@h = tangler('test/xdemo.flx')
@select(h)
#include <std.flx>
#include <xlib.flx>
open Xlib;

val display_name = ":0";
val display = XOpenDisplay(display_name);

proc openwin() {}

if not (isXOpenDisplay display) 
then 
{ 
  print "Cant connect to display ";
  print display_name;
  endl;
}
else 
{ 
  val scrno = DefaultScreen(display);
  print "Screen is "; 
  print (DisplayWidth (display,scrno));
  print " x ";
  print (DisplayHeight (display,scrno));
  endl;

  val black = BlackPixel(display,scrno);
  val white = WhitePixel(display,scrno);
  val rootw = RootWindow(display,scrno);
  val w = XCreateSimpleWindow
    (
      display,rootw,
      100,100,150,150,10,
      black,white
    );
}
endif;


