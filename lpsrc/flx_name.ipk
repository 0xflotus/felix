@h = tangler('src/flx_name.mli')
@select(h)
open Flx_types

val cpp_name :
  symbol_table_t ->
  fully_bound_symbol_table_t ->
  int ->
  string

@h = tangler('src/flx_name.ml')
@select(h)
open Flx_types
let cvt s = 
  let n = String.length s in
  let id = Buffer.create (n+10) in
  for i=0 to n - 1 do
    match s.[i] with
    | '\'' -> Buffer.add_string id "__p"
    | '\\' -> Buffer.add_string id "__"
    | x -> Buffer.add_char id x
  done;
  Buffer.contents id

let cpp_name dfns bbdfns index =
  let id,parent,entry = 
    try Hashtbl.find bbdfns index 
    with Not_found -> 
      let id,_,_,_ = 
        try Hashtbl.find dfns index 
        with Not_found -> failwith ("[cpp_name] Can't find index " ^ string_of_int index)
      in
        failwith ("[cpp_name] Can't find "^id^"<" ^ string_of_int index ^"> in bound table")
  in
  (match entry with
  | `BBDCL_function _ -> "_function_"   
  | `BBDCL_procedure _  -> "_procedure_"
  | `BBDCL_var _ -> "_var_"
  | `BBDCL_val _ -> "_val_"
  | _ -> failwith "cpp_name expected func,proc,var or val"
  ) ^ string_of_int index ^ "_" ^ cvt id


