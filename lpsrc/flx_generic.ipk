@head(1,'Generic support')
@h = tangler('src/flx_generic.mli')
@select(h)
open Flx_types
open Flx_mtypes2
open Flx_ast

val find_split_vs:
  sym_state_t ->
  int -> 
  ivs_list_t * ivs_list_t

val find_vs:
  sym_state_t ->
  int ->
  ivs_list_t

val adjust_ts:
  sym_state_t ->
  range_srcref ->
  int ->
  btypecode_t list ->
  btypecode_t list

val make_params:
  sym_state_t ->
  range_srcref ->
  int ->
  btypecode_t list ->
  (string * btypecode_t) list

val make_varmap:
  sym_state_t ->
  range_srcref ->
  int ->
  btypecode_t list ->
  (int, btypecode_t) Hashtbl.t

@h = tangler('src/flx_generic.ml')
@select(h)
open Flx_types
open Flx_mtypes1
open Flx_mtypes2
open Flx_util
open List
open Flx_exceptions

(* Adjustment of type argument lists works much
like the activation record display, so well call
it the type display: it is just a list of all
the type variables bound by upscope quantifiers
(which should be all of them :-)

For a name without any subscripts, a sibling call, 
or upscope call is possible, and just takes the head of the
type display corresponding to the call depth.

For a downscope call (eg referencing an element of
a contained module ..) additional type must be given.

However, sibling and upscope calls can also be made
with subscripts, replacing the trailing default
values of the current display.

So: the given subscripts can vary from 0 to the number
of variables at the call level, with the remaining head
variables defaulted from the calling environment, unless
the call depth is deeper in which case the trailing
values must be given

Actually the algorithm is simpler: just get
the default display for the target, and splice
its head with the given subscript list to get a 
list the same length, if the target is longer
than the list, otherwise just take the head of the
subscript list -- this can happen when an instantiated
call calls upscope using an unindexed name.
*)

let rec find_vs syms i =
  match Hashtbl.find syms.dfns i with
  {parent=parent;vs=vs} ->
  match parent with
  | Some i -> find_vs syms i @ vs
  | None -> vs

let rec find_func_vs syms vs j =
  match Hashtbl.find syms.dfns j with
  | {parent=parent; vs=vs'; symdef=`SYMDEF_module } ->
    begin match parent with 
    | None -> [],vs' @ vs
    | Some j -> find_func_vs syms (vs' @ vs) j
    end

  | _ ->
    find_vs syms j,vs

  (*
  | {parent=parent; id=name; vs=vs'; symdef = symdef}-> 
    begin match parent with 
    | None -> [],vs' @ vs
    | Some j -> find_func_vs syms (vs' @ vs) j
    end
  *)
    (*
    failwith 
    (
      "find_func_vs: parent must be module or function, got:" ^
      Flx_print.string_of_symdef symdef name vs'
    )
    *)

let find_split_vs syms i =
  match Hashtbl.find syms.dfns i with
  {symdef=`SYMDEF_typevar _} -> [],[]
  
  | {parent=parent; vs=vs} ->
  match parent with 
  | None -> [],vs
  | Some j -> find_func_vs syms vs j

let print_ivs vs = catmap ", " (fun (s,i,_) -> s ^ "<" ^ si i ^ ">") vs

let adjust_ts syms sr index ts =
  let pvs,vs = find_split_vs syms index in
  let k = length pvs in
  let m = length vs in 
  let n = length ts in
  if n>m then begin
    match Hashtbl.find syms.dfns index with {id=id} ->
    clierr sr 
    (
      "For "^ id^ "<" ^ si index ^ 
      "> Too many type subscripts, expected " ^ 
      si m ^ " got " ^ si n ^ 
      "\nparent vs="^print_ivs pvs ^ 
      "\nvs="^print_ivs vs
    )
  end;
  if n<m then begin
    match Hashtbl.find syms.dfns index with {id=id} ->
    clierr sr 
    (
      "For "^id^"<" ^ si index ^ 
      "> Not enough type subscripts, expected " ^ 
      si m ^ " got " ^ si n ^ 
      "\nparent vs="^print_ivs pvs ^ 
      "\nvs=" ^ print_ivs vs
    )
  end;
  
  map (fun (_,i,_) -> `BTYP_var i) pvs @ ts
  

let make_params syms sr i ts =
  let vs = find_vs syms i in
  let ts = adjust_ts syms sr i ts in
  map2 (fun (s,i,_) t -> s,t) vs ts

(* full ts required *)
let make_varmap syms sr i ts = 
  let vs = find_vs syms i in
  assert (length ts = length vs);
  let vars = map2 (fun (s,i,_) t -> i,t) vs ts in
  hashtable_of_list vars

