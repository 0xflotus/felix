@head(1,'Felix Library: Linux support')

@execfile('config'+os.sep+'flx_data.py')

@select(tangler('spkgs/plat_linux.py'))
if LINUX:
  pkg_provides = ['plat_linux']
  cpp_cpps = ['rtl/plat_linux']
  provides_lib = "libplat_linux"

iscr_source = ['lpsrc/flx_linux.pak']
build_macro = "LINUX"
@doc()

@select(tangler('config/plat_linux.fpc', 'data'))
Description: Linux specific
@if LINUX:
   tangle("provides_dlib: -lplat_linux_dynamic")
   tangle("provides_slib: -lplat_linux_static")

@head(2,"Linux specific code")
@h = tangler("rtl/plat_linux.hpp")
@select(h)
#ifndef __PLAT_LINUX_H__
#define __PLAT_LINUX_H__
int get_cpu_nr();
#endif

@h = tangler("rtl/plat_linux.cpp")
@select(h)
#define STAT "/proc/stat"
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>

#include "plat_linux.hpp"

// return number of cpus
int get_cpu_nr()
{
   FILE *fp;
   char line[16];
   int proc_nb, cpu_nr = -1;
   
   if ((fp = fopen(STAT, "r")) == NULL) {
      fprintf(stderr, ("Cannot open %s: %s\n"), STAT, strerror(errno));
      exit(1);
   }
   
   while (fgets(line, 16, fp) != NULL) {

      if (strncmp(line, "cpu ", 4) && !strncmp(line, "cpu", 3)) {
         sscanf(line + 3, "%d", &proc_nb);
         if (proc_nb > cpu_nr)
            cpu_nr = proc_nb;
      }
   }
   
   fclose(fp);

   return (cpu_nr + 1);
}

@h = tangler("lib/plat_linux.flx")
@select(h)
#import <flx.flxh>
module Linux {
  header '#include "plat_linux.hpp"';
  requires package "plat_linux";
  fun get_cpu_nr: 1 -> int;
}

