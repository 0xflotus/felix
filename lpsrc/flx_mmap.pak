@import config

@head(1,"Address space management")

@select(tangler('spkgs/mmap.py'))
import config

if config.TARGET_CXX.options.HAVE_MMAP:
  root = config.FLX_DIR
  unit_tests = [('test', 'mmap', 'mmap-*.flx')]

iscr_source = ['lpsrc/flx_mmap.pak']
weaver_directory = 'doc/mmap/'

@select(tangler('config/mmap.fpc', 'data'))
Name: mmap

@select(tangler('lib/mmap.flx'))
module Mmap
{
  header """
    #include <sys/mman.h>
    #include <unistd.h>

    // MAP_ANON is an older form of MAP_ANONYMOUS, and should be compatible
    #if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
    #  define MAP_ANONYMOUS MAP_ANON
    #endif
  """;

  typedef off_t = unsigned long;
  // protection options
@if config.TARGET_CXX.options.HAVE_MMAP:
  if config.TARGET_CXX.options.HAVE_MMAP_PROT_EXEC:  tangle('  const PROT_EXEC : int;')
  if config.TARGET_CXX.options.HAVE_MMAP_PROT_READ:  tangle('  const PROT_READ : int;')
  if config.TARGET_CXX.options.HAVE_MMAP_PROT_WRITE: tangle('  const PROT_WRITE : int;')

  if config.TARGET_CXX.options.HAVE_MMAP_DENYWRITE:    tangle('  const MAP_DENYWRITE: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_ANONYMOUS:    tangle('  const MAP_ANONYMOUS: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_FILE:         tangle('  const MAP_FILE: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_FIXED:        tangle('  const MAP_FIXED: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_HASSEMAPHORE: tangle('  const MAP_HASSEMAPHORE: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_SHARED:       tangle('  const MAP_SHARED : int;')
  if config.TARGET_CXX.options.HAVE_MMAP_PRIVATE:      tangle('  const MAP_PRIVATE : int;')
  if config.TARGET_CXX.options.HAVE_MMAP_NORESERVE:    tangle('  const MAP_NORESERVE: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_LOCKED:       tangle('  const MAP_LOCKED: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_GROWSDOWN:    tangle('  const MAP_GROWSDOWN: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_32BIT:        tangle('  const MAP_32BIT: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_POPULATE:     tangle('  const MAP_POPULATE: int;')
  if config.TARGET_CXX.options.HAVE_MMAP_NONBLOCK:     tangle('  const MAP_NONBLOCK: int;')
@#

  const MAP_FAILED : address;

  // size of a page
  const _SC_PAGESIZE : long = "sysconf(_SC_PAGESIZE)";

  fun mmap:
    address * //< start address
    size *    //< bytes to map
    int *     //< protection
    int *     //< flags
    int *     //< file descriptor
    off_t     //< offset into file, multiple of _SC_PAGESIZE
    -> address; //< start of reserved address space

  fun munmap: address * size -> int;
}
