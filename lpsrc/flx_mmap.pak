@import config

@head(1,"Address space management")

NOTES. At present we're using configuration checks to decide
which options mmap supports (if it is available at all).

Probably this is not the "Felix way". Rather we should just define
everything and then either let the program fail at C++ compile time,
or, provide some way in Felix to filter the available options,
rather than doing it here as part of the configuration process.

@select(tangler('config/mmap.fpc', 'data'))
Name: mmap

@select(tangler('lib/mmap.flx'))
module Mmap
{
  header """
    #include <sys/mman.h>
    #include <unistd.h>

    // MAP_ANON is an older form of MAP_ANONYMOUS, and should be compatible
    #if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
    #  define MAP_ANONYMOUS MAP_ANON
    #endif
  """;

  typedef off_t = ulong;
  // protection options
@if config.TARGET_CXX.options.HAVE_MMAP:
  if config.TARGET_CXX.options.HAVE_PROT_EXEC:  tangle('  const PROT_EXEC : int;')
  if config.TARGET_CXX.options.HAVE_PROT_READ:  tangle('  const PROT_READ : int;')
  if config.TARGET_CXX.options.HAVE_PROT_WRITE: tangle('  const PROT_WRITE : int;')

  if config.TARGET_CXX.options.HAVE_MAP_DENYWRITE:    tangle('  const MAP_DENYWRITE: int;')
  if config.TARGET_CXX.options.HAVE_MAP_ANON:         tangle('  const MAP_ANON: int;')

  # RF: MAP_ANON/MAP_ANONYMOUS must mirror the macro example above, so the two can be synonyms
  if config.TARGET_CXX.options.HAVE_MAP_ANONYMOUS or config.TARGET_CXX.options.HAVE_MAP_ANON:
    tangle('  const MAP_ANONYMOUS: int;')

  if config.TARGET_CXX.options.HAVE_MAP_FILE:         tangle('  const MAP_FILE: int;')
  if config.TARGET_CXX.options.HAVE_MAP_FIXED:        tangle('  const MAP_FIXED: int;')
  if config.TARGET_CXX.options.HAVE_MAP_HASSEMAPHORE: tangle('  const MAP_HASSEMAPHORE: int;')
  if config.TARGET_CXX.options.HAVE_MAP_SHARED:       tangle('  const MAP_SHARED : int;')
  if config.TARGET_CXX.options.HAVE_MAP_PRIVATE:      tangle('  const MAP_PRIVATE : int;')
  if config.TARGET_CXX.options.HAVE_MAP_NORESERVE:    tangle('  const MAP_NORESERVE: int;')
  if config.TARGET_CXX.options.HAVE_MAP_LOCKED:       tangle('  const MAP_LOCKED: int;')
  if config.TARGET_CXX.options.HAVE_MAP_GROWSDOWN:    tangle('  const MAP_GROWSDOWN: int;')
  if config.TARGET_CXX.options.HAVE_MAP_32BIT:        tangle('  const MAP_32BIT: int;')
  if config.TARGET_CXX.options.HAVE_MAP_POPULATE:     tangle('  const MAP_POPULATE: int;')
  if config.TARGET_CXX.options.HAVE_MAP_NONBLOCK:     tangle('  const MAP_NONBLOCK: int;')
@#

  const MAP_FAILED : address;

  // size of a page
  const _SC_PAGESIZE : long = "sysconf(_SC_PAGESIZE)";

  fun mmap:
    address * //< start address
    size *    //< bytes to map
    int *     //< protection
    int *     //< flags
    int *     //< file descriptor
    off_t     //< offset into file, multiple of _SC_PAGESIZE
    -> address; //< start of reserved address space

  fun munmap: address * size -> int;
}
