@head(1,"Expected outputs for tut/examples")
@head(2,"tut/examples/mac101.expect")
@select(tangler("tut/examples/mac101.expect","data"))
This is mac101
@head(2,"tut/examples/mac102.expect")
@select(tangler("tut/examples/mac102.expect","data"))
This is mac101
This is mac102
it should have printed the 101 message too
@head(2,"tut/examples/mac103.expect")
@select(tangler("tut/examples/mac103.expect","data"))
Defining FIRST
detected FIRST
@head(2,"tut/examples/mac104.expect")
@select(tangler("tut/examples/mac104.expect","data"))
BAD
@head(2,"tut/examples/mac105.expect")
@select(tangler("tut/examples/mac105.expect","data"))
OK
@head(2,"tut/examples/mac105a.expect")
@select(tangler("tut/examples/mac105a.expect","data"))
@head(2,"tut/examples/mac105b.expect")
@select(tangler("tut/examples/mac105b.expect","data"))
OK
@head(2,"tut/examples/mac106.expect")
@select(tangler("tut/examples/mac106.expect","data"))
Yes
@head(2,"tut/examples/mac122.expect")
@select(tangler("tut/examples/mac122.expect","data"))
101
102
103
101
102
1
@head(2,"tut/examples/mac123.expect")
@select(tangler("tut/examples/mac123.expect","data"))
101
103
103
@head(2,"tut/examples/mac124.expect")
@select(tangler("tut/examples/mac124.expect","data"))
1
2
1
2
1
15
1
@head(2,"tut/examples/mac125.expect")
@select(tangler("tut/examples/mac125.expect","data"))
LoadTheLibrary(MyLibrary.lib_ext)
@head(2,"tut/examples/mac126.expect")
@select(tangler("tut/examples/mac126.expect","data"))
1 -> 1
2 -> 4
30
Start dump_s
1
2
End dump_s
Start dump_e
1
2
End dump_e
Start dump_s
Dumped
End dump_s
Start dump_e
Dumped
End dump_e
Start dump_s
66
End dump_s
Start dump_e
66
End dump_e
@head(2,"tut/examples/mac126a.expect")
@select(tangler("tut/examples/mac126a.expect","data"))
10          
@head(2,"tut/examples/mac127.expect")
@select(tangler("tut/examples/mac127.expect","data"))
2+2 -> 4
@head(2,"tut/examples/mac128.expect")
@select(tangler("tut/examples/mac128.expect","data"))
1
4
@head(2,"tut/examples/mac129.expect")
@select(tangler("tut/examples/mac129.expect","data"))
Hi there locality!
Hello locality!
Hello world!
Hello world!
@head(2,"tut/examples/mig01.expect")
@select(tangler("tut/examples/mig01.expect","data"))
1
2
@head(2,"tut/examples/mig02.expect")
@select(tangler("tut/examples/mig02.expect","data"))
1
2
@head(2,"tut/examples/mig03.expect")
@select(tangler("tut/examples/mig03.expect","data"))
0
@head(2,"tut/examples/mig04.expect")
@select(tangler("tut/examples/mig04.expect","data"))
2 1 
@head(2,"tut/examples/tut101.expect")
@select(tangler("tut/examples/tut101.expect","data"))
Hello World
@head(2,"tut/examples/tut102.expect")
@select(tangler("tut/examples/tut102.expect","data"))
Hello World 42
@head(2,"tut/examples/tut102a.expect")
@select(tangler("tut/examples/tut102a.expect","data"))
2
3
0
-1
1
2
1
0
1.24456
1.24456
true
true
false
false
true
true
false
false
true
true
true
true
false
false
true
true
false
false
@head(2,"tut/examples/tut103.expect")
@select(tangler("tut/examples/tut103.expect","data"))
42
@head(2,"tut/examples/tut104.expect")
@select(tangler("tut/examples/tut104.expect","data"))
42
@head(2,"tut/examples/tut104a.expect")
@select(tangler("tut/examples/tut104a.expect","data"))
1 2 3 4 5 
@head(2,"tut/examples/tut105.expect")
@select(tangler("tut/examples/tut105.expect","data"))
2
4
6
8
10
12
14
16
18
@head(2,"tut/examples/tut105a.expect")
@select(tangler("tut/examples/tut105a.expect","data"))
1 2 3 
9 8 7 
@head(2,"tut/examples/tut105b.expect")
@select(tangler("tut/examples/tut105b.expect","data"))
@head(2,"tut/examples/tut106.expect")
@select(tangler("tut/examples/tut106.expect","data"))
3
@head(2,"tut/examples/tut107.expect")
@select(tangler("tut/examples/tut107.expect","data"))
3
@head(2,"tut/examples/tut107a.expect")
@select(tangler("tut/examples/tut107a.expect","data"))
0
@head(2,"tut/examples/tut107b.expect")
@select(tangler("tut/examples/tut107b.expect","data"))
0
@head(2,"tut/examples/tut108.expect")
@select(tangler("tut/examples/tut108.expect","data"))
3355
@head(2,"tut/examples/tut109.expect")
@select(tangler("tut/examples/tut109.expect","data"))
2
@head(2,"tut/examples/tut110.expect")
@select(tangler("tut/examples/tut110.expect","data"))
3
@head(2,"tut/examples/tut111.expect")
@select(tangler("tut/examples/tut111.expect","data"))
0 1 3 4
@head(2,"tut/examples/tut112.expect")
@select(tangler("tut/examples/tut112.expect","data"))
1
@head(2,"tut/examples/tut112a.expect")
@select(tangler("tut/examples/tut112a.expect","data"))
5
@head(2,"tut/examples/tut113.expect")
@select(tangler("tut/examples/tut113.expect","data"))
1
2
@head(2,"tut/examples/tut114.expect")
@select(tangler("tut/examples/tut114.expect","data"))
1111111
@head(2,"tut/examples/tut115.expect")
@select(tangler("tut/examples/tut115.expect","data"))
1
2
@head(2,"tut/examples/tut116.expect")
@select(tangler("tut/examples/tut116.expect","data"))
1
2
@head(2,"tut/examples/tut117.expect")
@select(tangler("tut/examples/tut117.expect","data"))
@head(2,"tut/examples/tut118.expect")
@select(tangler("tut/examples/tut118.expect","data"))
Some 1
@head(2,"tut/examples/tut119.expect")
@select(tangler("tut/examples/tut119.expect","data"))
-1
0
1
-1
0
1
-1
0
1
@head(2,"tut/examples/tut120.expect")
@select(tangler("tut/examples/tut120.expect","data"))
1, (3, 4)
@head(2,"tut/examples/tut120a.expect")
@select(tangler("tut/examples/tut120a.expect","data"))
1
2
@head(2,"tut/examples/tut121.expect")
@select(tangler("tut/examples/tut121.expect","data"))
Identifier
Number
Neither
@head(2,"tut/examples/tut121a.expect")
@select(tangler("tut/examples/tut121a.expect","data"))
Identifier: A
White:  
Identifier: string
White:  
Number: 2
White:  
Identifier: lex
Done.
@head(2,"tut/examples/tut121b.expect")
@select(tangler("tut/examples/tut121b.expect","data"))
Lexer here
Other:   "#!/"
Id:      "bin"
SLASH:   "/"
Id:      "env"
White:   " "
Id:      "flx"
Eol:     "
"
Id:      "include"
White:   " "
Other:   ""std""
SEMI:    ";"
Eol:     "
"
Id:      "include"
White:   " "
Other:   ""flx_lex""
SEMI:    ";"
Eol:     "
"
Id:      "use"
White:   " "
Id:      "Lexer"
:::      "::"
Id:      "sub"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Id:      "print"
White:   " "
Other:   ""Lexer here""
SEMI:    ";"
White:   " "
Id:      "endl"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Cc:      "/* some /* commented */ stuffs */"
Eol:     "
"
Eol:     "
"
Id:      "val"
White:   " "
Id:      "xx"
White:   " "
EQUAL:   "="
White:   " "
Int:     "1214"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Cppc:    "//val s = "A string is here == != @@ ";"
Eol:     "
"
Id:      "var"
White:   " "
Id:      "s"
White:   " "
EQUAL:   "="
White:   " "
Id:      "Text_file"
:::      "::"
Id:      "load"
LPAR:    "("
Other:   ""tut/examples/tut121b.flx""
RPAR:    ")"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Cppc:    "//print s; endl;"
Eol:     "
"
Eol:     "
"
Id:      "i2"
White:   " "
:=:      ":="
White:   " "
Id:      "Lexer"
:::      "::"
Id:      "end_iterator"
White:   " "
Id:      "s"
SEMI:    ";"
Eol:     "
"
Id:      "var"
White:   " "
Id:      "i1"
White:   " "
EQUAL:   "="
White:   " "
Id:      "Lexer"
:::      "::"
Id:      "start_iterator"
White:   " "
Id:      "s"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Id:      "proc"
White:   " "
Id:      "print_token"
LPAR:    "("
RPAR:    ")"
Eol:     "
"
LBRACE:  "{"
Eol:     "
"
White:   "  "
Id:      "open"
White:   " "
Id:      "Flx_lex"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "def"
White:   " "
Id:      "var"
White:   " "
Id:      "j"
COMMA:   ","
White:   " "
Id:      "var"
White:   " "
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "pre_flx_lex"
White:   " "
LPAR:    "("
Id:      "i1"
COMMA:   ","
White:   " "
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "match"
White:   " "
Id:      "des"
White:   " "
Id:      "with"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "qQuote"
White:   " "
=>:      "=>"
White:   "        "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_q_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "qqqQuote"
White:   " "
=>:      "=>"
White:   "      "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_qqq_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "dQuote"
White:   " "
=>:      "=>"
White:   "        "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_d_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "dddQuote"
White:   " "
=>:      "=>"
White:   "      "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_ddd_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "rqQuote"
White:   " "
=>:      "=>"
White:   "       "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_rq_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "rqqqQuote"
White:   " "
=>:      "=>"
White:   "     "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_rqqq_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "rdQuote"
White:   " "
=>:      "=>"
White:   "       "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_rd_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "rdddQuote"
White:   " "
=>:      "=>"
White:   "     "
LBRACE:  "{"
White:   " "
Id:      "j"
COMMA:   ","
Id:      "des"
White:   " "
EQUAL:   "="
White:   " "
Id:      "parse_rddd_string"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "Preprocessor"
White:   " "
=>:      "=>"
White:   "  "
LBRACE:  "{"
White:   " "
Id:      "j"
White:   " "
EQUAL:   "="
White:   " "
Id:      "to_eol"
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
White:   " "
MINUS:   "-"
White:   " "
Int:     "1"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "Cpp_comment"
White:   " "
=>:      "=>"
White:   "   "
LBRACE:  "{"
White:   " "
Id:      "j"
White:   " "
EQUAL:   "="
White:   " "
Id:      "to_eol"
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
White:   " "
MINUS:   "-"
White:   " "
Int:     "1"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "C_comment"
White:   " "
=>:      "=>"
White:   "     "
LBRACE:  "{"
White:   " "
Id:      "j"
White:   " "
EQUAL:   "="
White:   " "
Id:      "to_end_c_comment"
White:   " "
LPAR:    "("
Id:      "j"
COMMA:   ","
Id:      "i2"
RPAR:    ")"
SEMI:    ";"
White:   " "
RBRACE:  "}"
Eol:     "
"
White:   "  "
VBAR:    "|"
White:   " "
Id:      "_"
White:   " "
=>:      "=>"
White:   " "
LBRACE:  "{"
RBRACE:  "}"
Eol:     "
"
White:   "  "
Id:      "endmatch"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "dess"
White:   " "
:=:      ":="
Eol:     "
"
White:   "    "
Id:      "match"
White:   " "
Id:      "des"
White:   " "
Id:      "with"
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Eol"
White:   " "
=>:      "=>"
White:   " "
Other:   ""Eol""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Ident"
White:   " "
=>:      "=>"
White:   " "
Other:   ""Id""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "DOLLAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""DOLLAR""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "QUEST"
White:   " "
=>:      "=>"
White:   " "
Other:   ""QUEST""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "EXCLAMATION"
White:   " "
=>:      "=>"
White:   " "
Other:   ""EXCLAMATION""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LPAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""LPAR""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RPAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""RPAR""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LSQB"
White:   " "
=>:      "=>"
White:   " "
Other:   ""LSQB""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RSQB"
White:   " "
=>:      "=>"
White:   " "
Other:   ""RSQB""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LBRACE"
White:   " "
=>:      "=>"
White:   " "
Other:   ""LBRACE""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RBRACE"
White:   " "
=>:      "=>"
White:   " "
Other:   ""RBRACE""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "COLON"
White:   " "
=>:      "=>"
White:   " "
Other:   ""COLON""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "COMMA"
White:   " "
=>:      "=>"
White:   " "
Other:   ""COMMA""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SEMI"
White:   " "
=>:      "=>"
White:   " "
Other:   ""SEMI""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "PLUS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""PLUS""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "MINUS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""MINUS""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "STAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""STAR""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SLASH"
White:   " "
=>:      "=>"
White:   " "
Other:   ""SLASH""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "VBAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""VBAR""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "AMPER"
White:   " "
=>:      "=>"
White:   " "
Other:   ""AMPER""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LESS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""LESS""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "GREATER"
White:   " "
=>:      "=>"
White:   " "
Other:   ""GREATER""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "EQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""EQUAL""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "DOT"
White:   " "
=>:      "=>"
White:   " "
Other:   ""DOT""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "PERCENT"
White:   " "
=>:      "=>"
White:   " "
Other:   ""PERCENT""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "BACKQUOTE"
White:   " "
=>:      "=>"
White:   " "
Other:   ""BACKQUOTE""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "TILDE"
White:   " "
=>:      "=>"
White:   " "
Other:   ""TILDE""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "CIRCUMFLEX"
White:   " "
=>:      "=>"
White:   " "
Other:   ""CIRCUMFLEX""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDLESS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&<""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDGREATER"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&>""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "EQEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""==""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "NOTEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""!=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LESSEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "GREATEREQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   "">=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LEFTSHIFT"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<<""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RIGHTSHIFT"
White:   " "
=>:      "=>"
White:   " "
Other:   "">>""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "STARSTAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""**""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LESSCOLON"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<:""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "COLONGREATER"
White:   " "
=>:      "=>"
White:   " "
Other:   "":>""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "DOTDOT"
White:   " "
=>:      "=>"
White:   " "
Other:   ""..""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "COLONCOLON"
White:   " "
=>:      "=>"
White:   " "
Other:   ""::""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "PLUSPLUS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""++""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "MINUSMINUS"
White:   " "
=>:      "=>"
White:   " "
Other:   ""--""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "PLUSEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""+=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "MINUSEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""-=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "STAREQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""*=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SLASHEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""/=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "PERCENTEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""%=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "CARETEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""^=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "VBAREQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""|=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "AMPEREQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "TILDEEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""~=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "COLONEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   "":=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RIGHTARROW"
White:   " "
=>:      "=>"
White:   " "
Other:   ""->""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "EQRIGHTARROW"
White:   " "
=>:      "=>"
White:   " "
Other:   ""=>""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LEFTARROW"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<-""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LSQANGLE"
White:   " "
=>:      "=>"
White:   " "
Other:   ""[<""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RSQANGLE"
White:   " "
=>:      "=>"
White:   " "
Other:   "">]""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LSQBAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""[|""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RSQBAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""|]""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "AMPERAMPER"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&&""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "VBARVBAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""||""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SLOSHAMPER"
White:   " "
=>:      "=>"
White:   " "
Other:   ""\\&""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SLOSHVBAR"
White:   " "
=>:      "=>"
White:   " "
Other:   ""\\|""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "SLOSHCIRCUMFLEX"
White:   " "
=>:      "=>"
White:   " "
Other:   ""\\|""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LEFTSHIFTEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<<=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "RIGHTSHIFTEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   "">>=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "LEFTRIGHTARROW"
White:   " "
=>:      "=>"
White:   " "
Other:   ""<->""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDEQEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&==""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDNOTEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&!=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDLESSEQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&<=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "ANDGREATEREQUAL"
White:   " "
=>:      "=>"
White:   " "
Other:   ""&>=""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "DOTDOTDOT"
White:   " "
=>:      "=>"
White:   " "
Other:   ""...""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Preprocessor"
White:   " "
=>:      "=>"
White:   "  "
Other:   ""Pre""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Cpp_comment"
White:   " "
=>:      "=>"
White:   "   "
Other:   ""Cppc""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "C_comment"
White:   " "
=>:      "=>"
White:   "     "
Other:   ""Cc""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "White"
White:   " "
=>:      "=>"
White:   " "
Other:   ""White""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Int"
White:   " "
=>:      "=>"
White:   " "
Other:   ""Int""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "Float"
White:   " "
=>:      "=>"
White:   " "
Other:   ""Float""
Eol:     "
"
White:   "    "
VBAR:    "|"
White:   " "
Id:      "_"
White:   " "
=>:      "=>"
White:   " "
Other:   ""Other""
Eol:     "
"
White:   "    "
Id:      "endmatch"
Eol:     "
"
White:   "  "
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "print"
White:   " "
LPAR:    "("
Id:      "dess"
White:   " "
Other:   "":       ""
RPAR:    ")"
DOT:     "."
LSQB:    "["
Int:     "0"
White:   " "
Id:      "to"
White:   " "
Int:     "9"
RSQB:    "]"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "print"
White:   " "
LPAR:    "("
Other:   "'"'"
White:   " "
LPAR:    "("
Id:      "Lexer"
:::      "::"
Id:      "string_between"
LPAR:    "("
Id:      "i1"
COMMA:   ","
Id:      "j"
RPAR:    ")"
RPAR:    ")"
White:   " "
Other:   "'"'"
RPAR:    ")"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "endl"
SEMI:    ";"
Eol:     "
"
White:   "  "
Id:      "i1"
White:   " "
EQUAL:   "="
White:   " "
Id:      "j"
SEMI:    ";"
Eol:     "
"
RBRACE:  "}"
Eol:     "
"
Eol:     "
"
Id:      "use"
White:   " "
Id:      "Lexer"
:::      "::"
Id:      "ne"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
Id:      "while"
White:   " "
LBRACE:  "{"
White:   " "
Id:      "i1"
White:   " "
!=:      "!="
White:   " "
Id:      "i2"
White:   " "
RBRACE:  "}"
White:   " "
LBRACE:  "{"
White:   " "
Id:      "print_token"
SEMI:    ";"
White:   " "
RBRACE:  "}"
SEMI:    ";"
Eol:     "
"
Eol:     "
"
@head(2,"tut/examples/tut135a.expect")
@select(tangler("tut/examples/tut135a.expect","data"))
1
2
2
@head(2,"tut/examples/tut135b.expect")
@select(tangler("tut/examples/tut135b.expect","data"))
1
2
2
@head(2,"tut/examples/tut135c.expect")
@select(tangler("tut/examples/tut135c.expect","data"))
3,4
3,4
2,2
@head(2,"tut/examples/tut135e.expect")
@select(tangler("tut/examples/tut135e.expect","data"))
1,2
@head(2,"tut/examples/tut135f.expect")
@select(tangler("tut/examples/tut135f.expect","data"))
1,2
1
321
11
12
321Empty
@head(2,"tut/examples/tut135g.expect")
@select(tangler("tut/examples/tut135g.expect","data"))
1111111112YES
@head(2,"tut/examples/tut136.expect")
@select(tangler("tut/examples/tut136.expect","data"))
200.2 100.1 []
@head(2,"tut/examples/tut137.expect")
@select(tangler("tut/examples/tut137.expect","data"))
List= 1 2 3 4 5 6 7 8 9 10 []
Reversed= 10 9 8 7 6 5 4 3 2 1 []
@head(2,"tut/examples/tut138.expect")
@select(tangler("tut/examples/tut138.expect","data"))
42
43
@head(2,"tut/examples/tut138a.expect")
@select(tangler("tut/examples/tut138a.expect","data"))
16
@head(2,"tut/examples/tut139.expect")
@select(tangler("tut/examples/tut139.expect","data"))
10
10
10
10
10
10
10
@head(2,"tut/examples/tut140.expect")
@select(tangler("tut/examples/tut140.expect","data"))
10
10
10
10
10
10
10
@head(2,"tut/examples/tut140a.expect")
@select(tangler("tut/examples/tut140a.expect","data"))
1, 2, 3, 
3, 2, 1, 
6
6
6
6
@head(2,"tut/examples/tut141.expect")
@select(tangler("tut/examples/tut141.expect","data"))
1
1
2
3
@head(2,"tut/examples/tut142.expect")
@select(tangler("tut/examples/tut142.expect","data"))
5
@head(2,"tut/examples/tut143.expect")
@select(tangler("tut/examples/tut143.expect","data"))
1
2
@head(2,"tut/examples/tut144.expect")
@select(tangler("tut/examples/tut144.expect","data"))
start
1
2
3
4
5
6
7
8
9
finished
@head(2,"tut/examples/tut145.expect")
@select(tangler("tut/examples/tut145.expect","data"))
good x
bad_x
finished
@head(2,"tut/examples/tut146.expect")
@select(tangler("tut/examples/tut146.expect","data"))
1
Zero
@head(2,"tut/examples/tut147.expect")
@select(tangler("tut/examples/tut147.expect","data"))
1
Zero
@head(2,"tut/examples/tut148.expect")
@select(tangler("tut/examples/tut148.expect","data"))
1
Zero
Zero
@head(2,"tut/examples/tut149.expect")
@select(tangler("tut/examples/tut149.expect","data"))
10
@head(2,"tut/examples/tut149a.expect")
@select(tangler("tut/examples/tut149a.expect","data"))
ONE
@head(2,"tut/examples/tut149b.expect")
@select(tangler("tut/examples/tut149b.expect","data"))
ONE
Not a one ..
@head(2,"tut/examples/tut149c.expect")
@select(tangler("tut/examples/tut149c.expect","data"))
ONE
TWO
Not a one ..
@head(2,"tut/examples/tut149d.expect")
@select(tangler("tut/examples/tut149d.expect","data"))
ONE 
FoundWeird Found
@head(2,"tut/examples/tut149e.expect")
@select(tangler("tut/examples/tut149e.expect","data"))
NOT ONE
1 TEN
NOT ONE
1 TWENTY
NOT ONE
1 
NOT ONE
2 TWENTY
NOT ONE
Dunno .. 
@head(2,"tut/examples/tut149f.expect")
@select(tangler("tut/examples/tut149f.expect","data"))
1
1
@head(2,"tut/examples/tut149g.expect")
@select(tangler("tut/examples/tut149g.expect","data"))
1
@head(2,"tut/examples/tut150.expect")
@select(tangler("tut/examples/tut150.expect","data"))
@head(2,"tut/examples/tut151.expect")
@select(tangler("tut/examples/tut151.expect","data"))
error 1 -- aborting
error handled, continuing
@head(2,"tut/examples/tut152.expect")
@select(tangler("tut/examples/tut152.expect","data"))
@head(2,"tut/examples/tut154.expect")
@select(tangler("tut/examples/tut154.expect","data"))
1
1
3
3
3
3
3
3
3
3
3
finished
@head(2,"tut/examples/tut155.expect")
@select(tangler("tut/examples/tut155.expect","data"))
10
9
8
7
6
5
4
3
2
1
@head(2,"tut/examples/tut156.expect")
@select(tangler("tut/examples/tut156.expect","data"))
10
9
8
7
6
5
4
3
2
1
@head(2,"tut/examples/tut157.expect")
@select(tangler("tut/examples/tut157.expect","data"))
2
@head(2,"tut/examples/tut158.expect")
@select(tangler("tut/examples/tut158.expect","data"))
@head(2,"tut/examples/tut159.expect")
@select(tangler("tut/examples/tut159.expect","data"))
Hello Hello 
@head(2,"tut/examples/tut160.expect")
@select(tangler("tut/examples/tut160.expect","data"))
Unit circle
one
One third
@head(2,"tut/examples/tut161.expect")
@select(tangler("tut/examples/tut161.expect","data"))
@head(2,"tut/examples/tut205.expect")
@select(tangler("tut/examples/tut205.expect","data"))
4
@head(2,"tut/examples/tut206.expect")
@select(tangler("tut/examples/tut206.expect","data"))
X1
X2
top level
@head(2,"tut/examples/tut206a.expect")
@select(tangler("tut/examples/tut206a.expect","data"))
1
@head(2,"tut/examples/tut207a.expect")
@select(tangler("tut/examples/tut207a.expect","data"))
Case 1 of three
Case 2 of three
Case 3 of three
case 1 33
case 2 3.3
case 3 33
@head(2,"tut/examples/tut207b.expect")
@select(tangler("tut/examples/tut207b.expect","data"))
42
42
42
42
@head(2,"tut/examples/tut207c.expect")
@select(tangler("tut/examples/tut207c.expect","data"))
11 22
11 22
11 22
33 44
33 44
33 44
33 44
1
1
@head(2,"tut/examples/tut208.expect")
@select(tangler("tut/examples/tut208.expect","data"))
2
2
8
@head(2,"tut/examples/tut209.expect")
@select(tangler("tut/examples/tut209.expect","data"))
1
1
1
2
3
@head(2,"tut/examples/tut210.expect")
@select(tangler("tut/examples/tut210.expect","data"))
Start .. 
Hello World
This is Felix
Saying Bye for now
.. OK
@head(2,"tut/examples/tut211.expect")
@select(tangler("tut/examples/tut211.expect","data"))
10 threads
10 messages
100
@head(2,"tut/examples/tut301.expect")
@select(tangler("tut/examples/tut301.expect","data"))
argc=1
@if WIN32:
   tangle("0->.\\tut\\examples\\tut301"+EXT_SHLIB)
 else:
   tangle("0->./tut/examples/tut301"+EXT_SHLIB)
@head(2,"tut/examples/tut302.expect")
@select(tangler("tut/examples/tut302.expect","data"))
1
2
3
2
23
423
0 -> 2
1 -> 23
2 -> 423
@head(2,"tut/examples/tut212.expect")
@select(tangler("tut/examples/tut212.expect","data"))
driver request test
driver name code is 1
exit code is 2
Name service performed, result flx_run
main launched t1
t1 starts
t1 continues
t1 sends message: Hello main from t1!
t1 dies
Main got message: Hello main from t1!
@head(2,"tut/examples/tut310.expect")
@select(tangler("tut/examples/tut310.expect","data"))
6
@head(2,"tut/examples/tut311.expect")
@select(tangler("tut/examples/tut311.expect","data"))
6
@head(2,"tut/examples/tut312.expect")
@select(tangler("tut/examples/tut312.expect","data"))
6
@head(2,"tut/examples/tut313.expect")
@select(tangler("tut/examples/tut313.expect","data"))
3
@head(2,"tut/examples/tut314.expect")
@select(tangler("tut/examples/tut314.expect","data"))
driver request test
driver name code is 1
exit code is 2
Name service performed, result flx_run
main launched t1
t1 starts
t1 continues
t1 dies
@head(2,"tut/examples/tut315.expect")
@select(tangler("tut/examples/tut315.expect","data"))
OK
10
10
10
10
11
11
1
1
@head(2,"tut/examples/tut316.expect")
@select(tangler("tut/examples/tut316.expect","data"))
20000
2
3
20000
This is a Y object, with x = 22, y = 3, and c = 20000
This is a Y object, with x = 12, y = 33, and c = 20000
13
1142
@head(2,"tut/examples/tut_bind130.expect")
@select(tangler("tut/examples/tut_bind130.expect","data"))
(1, 2)
(2, 4)
(-12, 16)
400
@head(2,"tut/examples/tut317.expect")
@select(tangler("tut/examples/tut317.expect","data"))
20000
2
3
20000
This is a Y object, with x = 22, y = 3, and c = 20000
This is a Y object, with x = 12, y = 33, and c = 20000
13
1142
@head(2,"tut/examples/tut318.expect")
@select(tangler("tut/examples/tut318.expect","data"))
20000
2
3
20000
This is a Y object, with x = 22, y = 3, and c = 20000
This is a Y object, with x = 12, y = 33, and c = 20000
13
13
@head(2,"tut/examples/tut_bind131.expect")
@select(tangler("tut/examples/tut_bind131.expect","data"))
(1, 2)
(2, 4)
(4, 16)
272
@head(2,"tut/examples/tut_bind131a.expect")
@select(tangler("tut/examples/tut_bind131a.expect","data"))
1
2
@head(2,"tut/examples/tut_bind132.expect")
@select(tangler("tut/examples/tut_bind132.expect","data"))
1
2
3
@head(2,"tut/examples/tut_bind133.expect")
@select(tangler("tut/examples/tut_bind133.expect","data"))
1, 2
1
@head(2,"tut/examples/tut_bind134.expect")
@select(tangler("tut/examples/tut_bind134.expect","data"))
1
1 2 3 
@head(2,"tut/examples/tut_bind135.expect")
@select(tangler("tut/examples/tut_bind135.expect","data"))
Hello
@head(2,"tut/examples/tut_bind136.expect")
@select(tangler("tut/examples/tut_bind136.expect","data"))
Hello
@head(2,"tut/examples/tut_bind137.expect")
@select(tangler("tut/examples/tut_bind137.expect","data"))
Hello
@head(2,"tut/examples/tut_bind138.expect")
@select(tangler("tut/examples/tut_bind138.expect","data"))
Hello
@head(2,"tut/examples/tut_bind138a.expect")
@select(tangler("tut/examples/tut_bind138a.expect","data"))
TOP
A will be used
A is used
Done
@head(2,"tut/examples/tut_bind138b.expect")
@select(tangler("tut/examples/tut_bind138b.expect","data"))
A is used
@head(2,"tut/examples/tut_bind138c.expect")
@select(tangler("tut/examples/tut_bind138c.expect","data"))
1
1.1
@head(2,"tut/examples/tut_bind150.expect")
@select(tangler("tut/examples/tut_bind150.expect","data"))
1 2
2 1
@head(2,"tut/examples/tut_bind151.expect")
@select(tangler("tut/examples/tut_bind151.expect","data"))
3
4
4
16
@head(2,"tut/examples/tut_bind160.expect")
@select(tangler("tut/examples/tut_bind160.expect","data"))
-50
2
3
105
1105
Y=2,3
20
3
20
42
10062
162
1162
162
1
1
25
