@head(1,'Keywords')
@h = tangler('src/flx_keywords.ml')
@select(h)

open Flx_parse
open List

let hash_table_from_list n lst =
  let tbl = Hashtbl.create n
  in let addEntry (s,kw) = Hashtbl.add tbl s kw
  in 
  List.iter addEntry lst;
  tbl


let flx_keyword_table =          (* 97 is a prime larger than table size *)
  hash_table_from_list 97 [  
@for n,t in flx_keywords:
  tangle('  "'+n+'", (fun s -> '+t+' s);')
]

let map_flx_keywords srcref lex_item = 
  try (Hashtbl.find flx_keyword_table lex_item) srcref
  with Not_found -> NAME (srcref, lex_item)

let flx_parser_keyword_table =  
  hash_table_from_list 97 [  
@for n,t in flx_parser_keywords:
  tangle('  "'+n+'", (fun s -> '+t+' s);')
]

let retok_parser_tokens toks = 
  rev 
  (rev_map 
    (function 
      | NAME (sr,s) as x -> 
        begin 
          try (Hashtbl.find flx_parser_keyword_table s) sr
          with Not_found -> x
        end
      | x -> x
    ) 
    toks
  )
  
@h = tangler('src/flx_keywords.mli')
@select(h)
open Flx_parse
val map_flx_keywords : Flx_ast.srcref -> string -> token
val retok_parser_tokens : token list -> token list
