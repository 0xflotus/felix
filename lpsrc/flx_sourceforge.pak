@head(1,'Sourceforge web site top level')
These HTML pages are manually prepared.
The output lives in the subdirectory www,
but the files must be at the top level on the
sourceforge site to link to everything properly.
@select(tangler('www/index.html'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Felix: The power language for C++ programmers</H1>
<P>
Felix is new, high power programming language which
provides an ML style type system with a syntax that C++
programmers should find easy to learn. It generates 
C++ and supports both use of C++ types as primitives,
as well as embedding in existing C++ written architectures.
</P><P>
<STRONG>Control inversion</STRONG> converts logical threads
into continuation objects with resume() callback methods, 
allowing embedding in event driven message passing frameworks,
and supporting high speed context switching
of cooperatively multitasked logics, called
ultra-lightweight threads. Memory is the only limit
on the number of UL-threads supported, and context
switching times of order O(1) can be achieved using
hash tables. Applications include web services,
telephony, GUI, and other event driven message passing
systems.
</P>
<STRONG>Language Features</STRONG> include:
<UL>
<LI>Algebraic Data Types including
<UL>
<LI>Tuples</LI>
<LI>Variants with full support for inductive types</LI>
<LI>Structs</LI>
<LI>First class Higher Order Functions and Procedures with Currying</LI>
</UL>
</LI>
<LI>Pattern matching</LI>
<LI>Regular matching</LI>
<LI>Type inference for variables and function returns</LI>
<LI>Garbage Collection</LI>
<LI>LALR(1) yaccable Grammar</LI>
<LI>No primitive types in core language: all primitives supplied by user</LI>
<LI>C++ binding constructions</LI>
<LI>Module system</LI>
<LI>ISO10646/Unicode character set</LI>
<LI>Generic primitives</LI>
</UL>

<STRONG>Libraries</STRONG> include:
<UL>
<LI>Standard Library includes bindings for</LI>
<UL>
<LI>C99/C++ exact and normal integral types</LI>
<LI>C99 floats</LI>
<LI>C++ complex</LI>
<LI>string(8 bit), wstring(16 bit), ustring(32 bit)</LI>
</UL>
</UL>
<STRONG>Architecture</STRONG> support includes:
<UL>
<LI>Control Inversion: mechanical translation of blocking reads into callbacks provides event
driven cooperative multi-tasking</LI>
<LI>Targets dynamically loaded shared libraries</LI>
<LI>User written drivers allow integration into existing message passing
frameworks</LI>
<LI>Sample drivers for stand alone program and standard input</LI>
</UL>
<STRONG>Implementation</STRONG> information:
<UL>
<LI>All source written using the Literate Programming 
tool <A HREF=http://interscript.sf.net>interscript</A></LI>
<LI>Compiler implemented in <A HREF=http://caml.inria.fr>Ocaml 3.06</A></LI>
<LI>Generates ISO C++ code</LI>
</UL>
<P>
Felix is <STRONG>Compatable</STRONG> with most platforms including
all Unix variants, Windows with or without Cygwin, and Mac. 
A C++ compiler and either the ocaml native code or bytecode
compiler with bignum support is required to use Felix.
</P><P>
<STRONG>Browse</STRONG> the felix <A HREF=tut/doc/en_flx_tutorial_top.html>tutorial</A> online.
</P>
<P>
<STRONG>Browse</STRONG> the felix ocaml implementation module reference 
<A HREF=impldoc/index.html>tutorial</A> generated by ocamldoc.
</P>
<p>
<STRONG>Download</STRONG> <A HREF=download.html>felix</A> now! 
</P>
<P><STRONG>Join</STRONG> the mailing list for discussion of
the Felix <A HREF= 
http://lists.sourceforge.net/lists/listinfo/felix-language>language.</A>
</P><P>
<STRONG>Join</STRONG> the mailing list for discussion of the Felix 
<A
HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>implementation</A>
</P>
The CVS location is
<STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>
<P>
CVS web access <A
HREF="http://sourceforge.net/cvs/?group_id=28597">here</A>
<P>
<STRONG>Browse</STRONG> the complete documented source code, test suite, etc,
using <A HREF=doc/en_flx_top.html>frames</A>,
and <A HREF=doc/en_flx.html>without frames</A>.
The documentation is generated by <A
HREF=//interscript.sf.net>interscript</A>.
</BODY>
</HTML>

@select(tangler('www/download.html'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix Download</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Download</H1>
<P> Download <A HREF=flx.tgz>Felix tarball</A></P>
<P>
Felix is now packaged in a single tarball.
This file is a gziped tar file which contains:
<OL>
<LI> Literate programmed original source files</LI>
<LI> Interscript literate programming tool</LI>
<LI> Extracted source, documentation and build scripts.
Documentation is available as:
<OL>
<LI>HTML web [ready to browse]</LI>
<LI>LaTeX2e source [you need to run LaTeX2e etc]</LI>
<LI>Man pages in man format [summarises toools and some language features]</LI>
<LI>Man pages in html format [generated by man2html, web server required to view]</LI>
</OL>
<LI> Binary executables for Linux </LI>
</OL>
</OL>
</P>
<H2>Consider becoming a serious Felix user</H2>
<P>
Felix is pre-alpha! If you are seriously considering
using it in a commercial project, you are strongly
advised to 
<UL> 
<LI>join the Felix 
<A HREF=http://lists.sourceforge.net/lists/listinfo/felix-language>language</A>
mailing list.
<LI>download and evaluated the linux demo</LI>
<LI>contact the principal developer
<A HREF=mailto:skaller@ozemail.com.au>John Skaller</A>
Although Felix is public domain, you may wish to consider
a commercial support contract.
</LI>
</UL>
</P>
<H2>Build from extracted sources</H2>
<P>If you're not using Linux, and you'd like to run Felix,
you can help yourself and others by building the
compiler and run-times for your platform from the extracted sources.
but you must first have installed:
<A HREF=http://caml.inria.fr>Ocaml 3.06</A> to build
the Felix compiler, and  <A HREF=http://www.python.org>Python</A>
to run the build scripts.
</P>

<H2>Become a Felix compiler developer</H2>
You will need to install the felix 
<A HREF=felix_lpsrc.tgz>felix original source</A> package.
This includes the full interscript sources for the whole
Felix package and the interscript tool to extract the derived sources. 
To keep up to date,
you need to connect to the CVS archive, the CVS
address is: <STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>,
see
<A HREF=http://sourceforge.net/cvs/?group_id=28597>CVS web access</A>
Finally, if you want to contribute, you will need to register
as a <A HREF=http://sf.net>Sourceforge user</A>, and then as a Felix
developer.
<P>
To bootstrap the build, type
<P>
make boot
</P>
on the command line to unpack the build scripts and makefile.
You should now be able to use the commands:
<P>
make 
make test
make doc
</P>
To get a completely clean build, type
<P>
make virgin
</P>
before the other commands.
Note that if you change the build scripts, you need to extract them
using
<P>
iscr lpsrc/flx_maker.ipk
</P>
or just
<P>
make boot
</P>
before they'll run.

<H2>Package Changes</H2>
<P>There is now only one tarball containing everything
including the linux binaries and interscript. There is no need
to install interscript, the build system detects it automatically.
The build system now detects which variant of the ocaml tools
you're using: whether you have the optimising compiler built
by itself, a bytecode version of the optimising compiler,
no optimising compiler, or no ocaml tools.
</P>
<P>
The script attempts to build a machine binary using the optimising
compiler if available, a bytecode version if the optimising
compiler is not available, or do nothing if ocaml isn't available
at all. 
</P>
<P>
At present, ocaml is not required to use Felix on Linux,
since it comes with a pre-built Felix compiler. Ocaml is
required on other platforms to build the compiler. We may
distribute a bytecode version of the compiler in the future,
but you will still need the ocaml bytecode interpreter
custom built with the Nums and Unix packages to use it.
</P>
</BODY>

