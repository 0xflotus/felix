@head(1,'Sourceforge web site top level')
These HTML pages are manually prepared.
The output lives in the subdirectory www,
but the files must be at the top level on the
sourceforge site to link to everything properly.

@select(tangler('www/index.html'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Felix: The power language for C++ programmers</H1>
<P>
Felix is new, high power general purpose programming language 
with strong roots in functional programming systems.
It provides an ML style type system with a syntax that C++
programmers should find easy to learn. It generates 
C++ and supports both use of C++ types as primitives,
as well as embedding in existing C++ architectures.
</P>
<P>
<STRONG>Control inversion</STRONG> converts logical threads
into continuation objects with resume() callback methods, 
obtaining stackless operation and thereby
allowing embedding in event driven message passing frameworks.
The technology supports high speed context switching
of cooperatively multitasked logics, called
ultra-lightweight threads. Memory is the only limit
on the number of UL-threads supported, and context
switching times of order O(1) can be achieved using
hash tables. Applications include web services,
telephony, GUI, and other event driven message passing
systems.
</P>
<STRONG>Language Features</STRONG> include:
<UL>
<LI>Algebraic Data Types including
<UL>
<LI>Tuples</LI>
<LI>Variants with full support for inductive types</LI>
<LI>Structs</LI>
<LI>First class Higher Order Functions and Procedures with Currying</LI>
</UL>
</LI>
<LI>Pattern matching</LI>
<LI>Type deduction for variables</LI>
<LI>No top down type inference</LI>
<LI>Garbage Collection</LI>
<LI>Unambiguous LL(1) Grammar</LI>
<LI>No primitive types in core language</LI>
<LI>C++ binding constructions</LI>
<LI>Module system</LI>
<LI>ISO10646/Unicode character set</LI>
<LI>Parameterized modules (functors) with implicit instantiation</LI>
</UL>

<STRONG>Libraries</STRONG> include:
<UL>
<LI>Standard Library includes bindings for</LI>
<UL>
<LI>C99/C++ exact and normal integral types</LI>
<LI>C99 floats</LI>
<LI>char, wchar, and unicode strings</LI>
</UL>
</UL>

<STRONG>Architecture</STRONG> support may be described by:
<UL>
<LI>Targets dynamically loadable shared libraries</LI>
<LI>Standard driver for stand-alone program operation</LI>
<LI>Standard tool for rapid prototyping/scripting operation</LI>
<LI>Stackless operation</LI>
<LI>Event driven architecture</LI>
<LI>Cooperative multi-tasking</LI>
<LI>Ultra-lightweight threading</LI>
<LI>Constant time context switching</LI>
<LI>Thread count bounded only by memory</LI>
<LI>User written drivers allow integration into existing message passing
frameworks</LI>
<LI>Sample drivers for stand alone program and standard input</LI>
</UL>

<STRONG>Implementation</STRONG> information:
<UL>
<LI>All source written using the Literate Programming 
tool <A HREF=http://interscript.sf.net>interscript</A></LI>
<LI>Compiler implemented in <A HREF=http://caml.inria.fr>Ocaml 3.01</A></LI>
<LI>Generates ISO C++ code</LI>
</UL>
<P>
Felix is <STRONG>Compatable</STRONG> with most platforms including
all Unix variants, Windows with or without Cygwin, and Mac. 
A C++ compiler and either the ocaml native code or bytecode
compiler with bignum support is required to use Felix.
</P><P>
<STRONG>Browse</STRONG> the felix <A HREF=tut/doc/en_flx_tutorial_top.html>tutorial</A> online.
</P>
<p>
<STRONG>Download</STRONG> <A HREF=download.html>felix</A> now! 
</P>
<P><STRONG>Join</STRONG> the mailing list for discussion of
the Felix <A HREF= 
http://lists.sourceforge.net/lists/listinfo/felix-language>language.</A>
</P><P>
<STRONG>Join</STRONG> the mailing list for discussion of the Felix 
<A
HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>implementation</A>
</P>
The CVS location is
<STRONG>cvs.felix.sourceforge.net:/cvsroot/felix</STRONG>
and you need module "lpsrc"<P>
CVS web access <A
HREF="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/felix">here</A>
<P>
<STRONG>Browse</STRONG> the complete documented source code, test suite, etc,
using <A HREF=doc/en_flx_top.html>frames</A>,
and <A HREF=doc/en_flx.html>without frames</A>.
The documentation is generated by <A
HREF=//interscript.sf.net>interscript</A>.
</BODY>
</HTML>

@select(tangler('www/download.html'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix Download</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Download</H1>
<P> Download <A HREF=felix_src.tgz>Felix source tarball</A></P>
<P> Download <A HREF=felix_bin_linux.tgz>Linux binaries</A></P>
<P>
Felix is now packaged in a single tarball.
This file is a gziped tar file which contains:
<OL>
<LI> Literate programmed original source files</LI>
<LI> Extracted source, documentation and build scripts.
Documentation is available as:
<OL>
<LI>HTML web [ready to browse]</LI>
<LI>LaTeX2e source [you need to run LaTeX2e etc]</LI>
<LI>Man pages [summarises toools and some language features]</LI>
</OL>
</OL>
</OL>
</P>
<H2>Consider becoming a serious Felix user</H2>
<P>
Felix is pre-alpha! If you are seriously considering
using it in a commercial project, you are strongly
advised to 
<UL> 
<LI>join the Felix 
<A HREF=http://lists.sourceforge.net/lists/listinfo/felix-language>language</A>
mailing list.
<LI>download and evaluated the linux demo</LI>
<LI>contact the principal developer
<A HREF=mailto:skaller@ozemail.com.au>John Skaller</A>
Although Felix is public domain, you may wish to consider
a commercial support contract.
</LI>
</UL>
</P>
<H2>Build from extracted sources</H2>
<P>If you're not using Linux, and you'd like to run Felix,
you can help yourself and others by building the
compiler and run-times for your platform from the extracted sources.
You don't need interscript for this, the sources are already
extracted in the tarball.
but you must first have installed:
<A HREF=http://caml.inria.fr>Ocaml 3.01</A> to build
the Felix compiler, and  <A HREF=http://www.python.org>Python</A>
to run the build scripts.
</P>

<H2>Become a Felix compiler developer</H2>
To do this you need the following tools:
You need <A HREF=www.python.org>Python</A>,
version 1.5.2 or greater. Python is required
for two reasons: the build scripts for Felix
are all hand written in Python, and the whole
of Felix is written using the Literate Programming
tool <A HREF=http://interscript.sf.net>interscript</A>
which you must also install: interscript is written in Python.
Then you will need to install
<A HREF=caml.inria.fr>Ocaml 3.01</A> 
to build the Felix compiler, which is written in Ocaml.
NOTE: due to bugs in ocaml 3.02, 3.03, and 3.04, 
you MUST use 3.01 to build felix.
Although the optimising compiler is recommended,
it should be possible to build a bytecode version of Felix.
This includes the full interscript sources for the whole
Felix package. To keep up to date,
you need to connect to the CVS archive: the
address is: <STRONG>cvs.felix.sourceforge.net:/cvsroot/felix</STRONG>.
Finally, if you want to contribute, you will need to register
as a <A HREF=http://sf.net>Sourceforge user</A>, and then as a Felix
developer.
<P>
To bootstrap the build, type
<P>
iscr lpsrc/flx_maker.ipk
</P>
on the command line to unpack the build scripts and makefile.
If you're running bash, or some other shell that expands 
wildcards, you can do:
<P>
iscr lpsrc/*.pak
</P>
instead, which extracts all the sources.
You should now be able to use the commands:
<P>
make 
make test
make test_clean
make doc
</P>
To get a completely clean build, type
<P>
python script/maker clean
</P>
Note that if you change the build scripts, you need to extract them
using
<P>
iscr lpsrc/flx_maker.ipk
</P>
before they'll run.

<H2>Package Changes</H2>
<P>Ocaml 3.04 doesn't work, Ocaml 3.01 is required</P>
<P>There are two packages:
<OL><LI>Source package. Everything except platform specific
executable binaries. Python, Ocaml 3.01, and g++ are required
to build the compiler, run time, and tests.</LI>
<LI>Linux Binary Package. Requires the source tarball.
Ocaml is not required, python is strongly recommended
to execute the test harness.
</LI>
</OL>
</P>
<P>Felix no longer requires boost download. It uses a single
boost header file to define int64_t which Felix requires,
but that file is now packaged in the LP sources.
</P>
<H2>Language Changes</H2>
<H3>Version 1.0a3</H3>
<P>Match and if/then/else/endif are now expressions.</P>

<P>Function return type are now deduced in many cases,
they can be left off declarations.</P>

<P>Syntax changes to function declarations</P>
<P>All standard library types now defined in modules, typing
of literals is now context sensitive.
</P>
<P>Recursive types are now supported across sums and functions.
</P>
<P>Felix now supports anonymous sum types.
Consequently, I have finally managed to eliminate
the boolean type from the core language, its now
defined in the standard library instead.
</P>
</BODY>

