@head(1,'Sourceforge web site top level')
These HTML pages are manually prepared.
The output lives in the subdirectory www,
but the files must be at the top level on the
sourceforge site to link to everything properly.
@f = open("VERSION")
@flx_version = string.strip(f.readline())
@f.close()
@select(tangler('www/index.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Felix: The power language for C++ programmers</H1>
@tangle("<H2>Felix Version "+flx_version+"</H1>")
<P>
<STRONG>Download</STRONG> <A HREF=download.html>felix</A> now! 
</P>
Felix is new, high power programming language which
provides an ML style type system with a syntax that C++
programmers should find easy to learn. It generates 
C++ and supports both use of C++ types as primitives,
as well as embedding in existing C++ written architectures.
</P><P>
<STRONG>Control inversion</STRONG> converts logical threads
into continuation objects with resume() callback methods, 
allowing embedding in event driven message passing frameworks,
and supporting high speed context switching
of cooperatively multitasked logics, called
ultra-lightweight threads. Memory is the only limit
on the number of UL-threads supported, and context
switching times of order O(1) can be achieved using
hash tables. Applications include web services,
telephony, GUI, and other event driven message passing
systems.
</P>
<STRONG>Language Features</STRONG> include:
<UL>
<LI>Algebraic Data Types including
<UL>
<LI>Tuples</LI>
<LI>Variants with full support for inductive types</LI>
<LI>Structs</LI>
<LI>First class Higher Order Functions and Procedures with Currying</LI>
</UL>
</LI>
<LI>Pattern matching</LI>
<LI>Regular matching</LI>
<LI>Type inference for variables and function returns</LI>
<LI>Garbage Collection</LI>
<LI>LALR(1) yaccable Grammar</LI>
<LI>No primitive types in core language: all primitives supplied by user</LI>
<LI>C++ binding constructions</LI>
<LI>Module system</LI>
<LI>ISO10646/Unicode character set</LI>
<LI>Compile time parametric polymorphism</LI>
</UL>

<STRONG>Libraries</STRONG> include:
<UL>
<LI>Standard Library includes bindings for</LI>
<UL>
<LI>C99/C++ exact and normal integral types</LI>
<LI>C99 floats</LI>
<LI>string(8 bit), ustring(32 bit)</LI>
</UL>
</UL>
<STRONG>Architecture</STRONG> support includes:
<UL>
<LI>Control Inversion: mechanical translation of blocking reads into callbacks provides event
driven cooperative multi-tasking</LI>
<LI>Targets dynamically loaded shared libraries</LI>
<LI>User written drivers allow integration into existing message passing
frameworks</LI>
<LI>Sample drivers for stand alone program and standard input</LI>
</UL>
<STRONG>Implementation</STRONG> information:
<UL>
<LI>All source written using the Literate Programming 
tool <A HREF=http://interscript.sf.net>interscript</A></LI>
<LI>Compiler implemented in <A HREF=http://caml.inria.fr>Ocaml 3.07</A></LI>
<LI>Generates ISO C++ code</LI>
</UL>
<P>
Felix is <STRONG>Compatible</STRONG> with most platforms including
all Unix variants, Windows with or without Cygwin, and Mac. 
A C++ compiler and either the ocaml native code or bytecode
compiler with bignum support is required to use Felix.
</P>
<P>
<STRONG>Browse</STRONG> the felix sourceforge <A HREF=http://sourceforge.net/projects/felix/>project</A> page.
</P>
<P>
<STRONG>Browse</STRONG> the felix 
<UL>
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tutorial_top.html>main tutorial</A>,")
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tut_bind_top.html>binding and embedding tutorial</A> or")
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tut_macro_top.html>macro processor tutorial</A> ")
@tangle("<LI><A HREF=flx_"+flx_version+"/htmlman/felix_1.html>man pages</A> ")
</UL>
online.
</P>
<P>
<STRONG>Browse</STRONG> the felix ocaml implementation module reference 
@tangle("<A HREF=flx_"+flx_version+"/impldoc/index.html>tutorial</A> generated by ocamldoc.")
</P>
<P><STRONG>Join</STRONG> the mailing list for discussion of
the Felix <A HREF= 
http://lists.sourceforge.net/lists/listinfo/felix-language>language.</A>
</P><P>
<STRONG>Join</STRONG> the mailing list for discussion of the Felix 
<A
HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>implementation</A>
</P>
The CVS location is
<STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>
<P>
CVS web access <A
HREF="http://sourceforge.net/cvs/?group_id=28597">here</A>
<P>
<STRONG>Browse</STRONG> the complete documented source code, test suite, etc,
using 
@tangle("<LI><A HREF=flx_"+flx_version+"/doc/en_flx_top.html>frames</A>,")
or
@tangle("<LI><A HREF=flx_"+flx_version+"/doc/en_flx.html>without frames</A>,")
The documentation is generated by <A
HREF=//interscript.sf.net>interscript</A>.
</BODY>
</HTML>

@select(tangler('www/download.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Download Felix "+flx_version+"</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Prerequisites</H2>
<P>You must first have installed:
<OL>
<LI><A HREF=http://caml.inria.fr>Ocaml 3.07</A> to build
the Felix compiler,
<LI><A HREF=http://www.python.org>Python</A>
to run the build scripts,

<LI>A C++ compiler. The build script is preset to 
use GNU g++.
</OL>
</P>
<H1>Supported Platforms</H1>
<P>Currently a Unix like environment is required. Felix 
has been built on the following platforms:
<OL>
<LI>Linux (RH9)
<LI>OSX (10.3)
<LI>Solaris (SPARC)
<LI>Free BSD 5.2.1 (i386)
<LI>Win32 (Cygwin)
</OL>
</P>

<H1>Download</H1>
@tangle("<P> Download developer tarball <A HREF=flx_"+flx_version+"_src.tgz>flx_"+flx_version+"_src.tgz</A> (486391bytes)")
</P>
@tangle("<P> Download end user tarball <A HREF=flx_"+flx_version+"_bin_linux.tgz>flx_"+flx_version+"_bin_linux.tgz</A> (2513039 bytes)")
This is the same as the developer package except all sources are
extracted and documentation built.
</P>
<H1>Make procedure</H1>
To bootstrap the build, type
</P><P><CODE>
make boot
</CODE></P><P>
on the command line to unpack the build scripts and makefile.
You should now be able to use the commands:
</P><P>
<CODE>
make extract<BR>
make compiler<BR>
make rtl<BR>
make drivers<BR>
make tests<BR>
make doc<BR>
make man<BR>
make impldoc
</CODE></P>
<P>Become superuser and type
</P>
<P><CODE>
make install
</CODE></P><P>
to install the system in /usr/local/lib/felix,
the scripting driver harness in /usr/local/bin,
and the man pages in /usr/local/man.
If these install points are not suitable for your
system, you'll have to edit the config/config.py file.
</P>
<H1>CVS access</H1>
To keep up to date,
you need to connect to the CVS archive, the CVS
address is: <STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>,
see
<A HREF=http://sourceforge.net/cvs/?group_id=28597>CVS web access</A>

The first time you need to so, pressing Enter key for password:
</P><P><CODE>
make backup<BR>
rm -rf lpsrc<BR>
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/felix login<BR>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/felix co lpsrc<BR>
</CODE>
</P><P>Thereafter you should be able to do:

</P><P><CODE>
make backup<BR>
cd lpsrc<BR>
cvs update<BR>
cd ..<BR>
</CODE>
</P><P>Continue after refreshing the archive with:
</P><P><CODE>
make virgin<BR>
make boot<BR>
make<BR>
</CODE>
</P><P>and build documentation and install as required.
</P>

<H1>Mailing lists</H1>
<P><OL>
<LI>
<A HREF=http://lists.sourceforge.net/lists/listinfo/felix-language>Language discussion</A>
<LI><A HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>Compiler implementation discussion</A>
</OL><P>

<H1>Contact</H1>
<P>The principal developer is
<A HREF=mailto:skaller@users.sourceforge.net>John Skaller</A>
</P>

</BODY>

