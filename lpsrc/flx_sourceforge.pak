@head(1,'Sourceforge web site top level')
These HTML pages are manually prepared.
The output lives in the subdirectory www,
but the files must be at the top level on the
sourceforge site to link to everything properly.
@f = open("VERSION")
@flx_version = string.strip(f.readline())
@f.close()
@select(tangler('www/index.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Felix</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Felix: The power language for C++ programmers</H1>
@tangle("<H2>Felix Version "+flx_version+"</H1>")
<P>
<STRONG>Learn</STRONG> more from the
@tangle("<A HREF=flx_"+flx_version+"/tut/doc/en_flx_tutorial_top.html>tutorial</A>.")
<STRONG>Download</STRONG> <A HREF=download.html>felix</A> now! 
See <A HREF=developer.html>developer</A> to <STRONG>contribute</STRONG>. 
</P><P>
Felix is new, high power, Open Source, community based
programming language which
provides an ML style type system with a syntax that C++
programmers should find easy to learn. It generates 
C++ and supports both use of C++ types as primitives,
as well as embedding in existing C++ written architectures
in a natural manner.
</P><P>
Unlike many other scripting
languages, Felix boasts <STRONG>seamless integration</STRONG>
with C and C++ code bases, which it achieves by adopting
the C/C++ object model directly.
</P><P>
<STRONG>Control inversion</STRONG> converts logical threads
into continuation objects with resume() callback methods, 
allowing embedding in event driven message passing frameworks,
and supporting high speed context switching
of cooperatively multitasked logics, called
ultra-lightweight threads. Memory is the only limit
on the number of UL-threads supported, and context
switching times of order O(1) can be achieved using
hash tables. Applications include web services,
telephony, GUI, and other event driven message passing
systems.
</P>
<P>Support for <STRONG>Domain Specific Languages</STRONG>
is provided by incorporating some of the them directly into 
the core compiler, with the idea of later providing
an abstracted extension mechanism. We currently
support regular matching and lexing, and hope to extend
this set to include parsing, numerical computation,
term rewriting, XML processing, and SQL.
</P><P>
<STRONG>Language Features</STRONG> include:
<UL>
<LI>Algebraic Data Types including
<UL>
<LI>Tuples</LI>
<LI>Variants with full support for inductive types</LI>
<LI>Structs</LI>
<LI>First class Higher Order Functions and Procedures with Currying</LI>
</UL>
</LI>
<LI>Pattern matching</LI>
<LI>Regular matching</LI>
<LI>Type inference for variables and function returns</LI>
<LI>Garbage Collection</LI>
<LI>LALR(1) yaccable Grammar</LI>
<LI>No primitive types in core language: all primitives supplied by user</LI>
<LI>C++ binding constructions</LI>
<LI>Module system</LI>
<LI>ISO10646/Unicode character set</LI>
<LI>Compile time parametric polymorphism</LI>
</UL>

<STRONG>Libraries</STRONG> include:
<UL>
<LI>Standard Library includes bindings for</LI>
<UL>
<LI>C99/C++ exact and normal integral types</LI>
<LI>C99 floats</LI>
<LI>string(8 bit), ustring(32 bit)</LI>
<LI>GNU multiple precision arithmetic (gmp) package</LI>
</UL>
</UL>
<STRONG>Architecture</STRONG> support includes:
<UL>
<LI>Control Inversion: mechanical translation of blocking reads into callbacks provides event
driven cooperative multi-tasking</LI>
<LI>Targets dynamically loaded shared libraries</LI>
<LI>User written drivers allow integration into existing message passing
frameworks</LI>
<LI>Sample drivers for stand alone program and standard input</LI>
</UL>
<STRONG>Implementation</STRONG> information:
<UL>
<LI>All source written using the Literate Programming 
tool <A HREF=http://interscript.sf.net>interscript</A></LI>
<LI>Compiler implemented in <A HREF=http://caml.inria.fr>Ocaml 3.07</A></LI>
<LI>Generates ISO C++ code</LI>
</UL>
<P>
Felix is <STRONG>Compatible</STRONG> with most platforms including
all Unix variants, Windows with or without Cygwin, and Mac. 
A C++ compiler and either the ocaml native code or bytecode
compiler with bignum support is required to use Felix.
</P>
<P>
<STRONG>Browse</STRONG> the felix sourceforge <A HREF=http://sourceforge.net/projects/felix/>project</A> page.
</P>
<P>
<STRONG>Browse</STRONG> the felix 
<UL>
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tutorial_top.html>main tutorial</A>,")
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tut_bind_top.html>binding and embedding tutorial</A> or")
@tangle("<LI><A HREF=flx_"+flx_version+"/tut/doc/en_flx_tut_macro_top.html>macro processor tutorial</A> ")
@tangle("<LI><A HREF=flx_"+flx_version+"/htmlman/felix_1.html>man pages</A> ")
</UL>
online.
</P>
<P>
<STRONG>Browse</STRONG> the felix ocaml implementation module reference 
@tangle("<A HREF=flx_"+flx_version+"/impldoc/index.html>tutorial</A> generated by ocamldoc.")
</P>
<P><STRONG>Join</STRONG> the mailing list for discussion of
the Felix <A HREF= 
http://lists.sourceforge.net/lists/listinfo/felix-language>language.</A>
</P><P>
<STRONG>Join</STRONG> the mailing list for discussion of the Felix 
<A
HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>implementation</A>
</P>
The CVS location is
<STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>
<P>
CVS web access <A
HREF="http://sourceforge.net/cvs/?group_id=28597">here</A>
<P>
<STRONG>Browse</STRONG> the complete documented source code, test suite, etc,
using 
@tangle("<LI><A HREF=flx_"+flx_version+"/doc/en_flx_top.html>frames</A>,")
or
@tangle("<LI><A HREF=flx_"+flx_version+"/doc/en_flx.html>without frames</A>,")
The documentation is generated by <A
HREF=//interscript.sf.net>interscript</A>.
</BODY>
</HTML>

@select(tangler('www/download.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Download Felix "+flx_version+"</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Prerequisites</H2>
<P>You must first have installed:
<OL>
<LI><A HREF=http://caml.inria.fr>Ocaml 3.07</A> to build
the Felix compiler,
<LI><A HREF=http://www.python.org>Python</A>
to run the build scripts,

<LI>A C++ compiler. The build script is preset to 
use GNU g++.
</OL>
</P>
<H1>Supported Platforms</H1>
<P>Currently a Unix like environment is required. Felix 
has been built on the following platforms:
<OL>
<LI>Linux (RH9)
<LI>OSX (10.3)
<LI>Solaris (SPARC)
<LI>Free BSD 5.2.1 (i386)
<LI>Win32 (Cygwin)
</OL>
</P>

<H1>Download</H1>
@tangle("<P> Download developer tarball <A HREF=flx_"+flx_version+"_src.tgz>flx_"+flx_version+"_src.tgz</A> (486391bytes)")
</P>
<H1>Make procedure</H1>
To bootstrap the build, type
</P><P><CODE>
make boot
</CODE></P><P>
on the command line to unpack the build scripts and makefile.
You may need to edit the file
<CODE>
config/config.py
</CODE>
to suit your platform.</P><P>
You should now be able to:
</P><P>
<CODE>
make<BR>
make doc<BR>
</CODE></P>
<P>Become superuser and type
</P>
<P><CODE>
make install
</CODE></P><P>
to install the system in /usr/local/lib/felix,
the scripting driver harness in /usr/local/bin,
and the man pages in /usr/local/man.
If these install points are not suitable for your
system, you'll have to edit the config/config.py file.
</P>
<H1>CVS access</H1>
To keep up to date,
you need to connect to the CVS archive, the CVS
address is: <STRONG>cvs.sourceforge.net:/cvsroot/felix</STRONG>,
see
<A HREF=http://sourceforge.net/cvs/?group_id=28597>CVS web access</A>

The first time you need to so, pressing Enter key for password:
</P><P><CODE>
make backup<BR>
rm -rf lpsrc<BR>
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/felix login<BR>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/felix co lpsrc<BR>
</CODE>
</P><P>Thereafter you should be able to do:

</P><P><CODE>
make backup<BR>
cd lpsrc<BR>
cvs update<BR>
cd ..<BR>
</CODE>
</P><P>Continue after refreshing the archive with:
</P><P><CODE>
make virgin<BR>
make boot<BR>
make<BR>
</CODE>
</P><P>and build documentation and install as required.
</P>

<H1>Mailing lists</H1>
<P><OL>
<LI>
<A HREF=http://lists.sourceforge.net/lists/listinfo/felix-language>Language discussion</A>
<LI><A HREF=http://lists.sourceforge.net/lists/listinfo/felix-impl>Compiler implementation discussion</A>
</OL><P>

<H1>Contact</H1>
<P>The principal developer is
<A HREF=mailto:skaller@users.sourceforge.net>John Skaller</A>
</P>

<H1>See also</H1>
<A HREF=developer.html>Developer Info</A>
</P>

</BODY>

@select(tangler('www/developer.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Developers Info</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Contributing</H1>
<P>To join this exciting project you need to do the following:</P>
<P>
<OL>
<LI><A HREF=download.html>Build</A> and install felix</LI>
<LI>Join the <A HREF=http://lists.sourceforge.net/lists/listinfo/felix-language>Language discussion</A>
mailing list and announce yourself and the result of your build attempt.
</LI>
<LI>Let us know what your interest in Felix is,
how we can help you, and what you might be able to
do to help us.
</LI>
<LI>Contribute something</LI>
<LI>Request developer status</LI>
</OL>
</P>
<H1>Job List</H1>
<P>
Please read <A HREF=jobs.html>Jobs</A>.
</P>
<H1>Coding Guide</H1>
<P>
Please read <A HREF=coding.html>Coding Guidelines</A>.
</P>
<H1>Flxcc wrapper generator</H1>
<P>
There is some information on using the <A HREF=flxcc.html>flxcc</A> wrapper generator.
</P>
</BODY>
</HTML>

@select(tangler('www/jobs.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Jobs</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Jobs</H1>
<P>Felix is an open source community based programming language project.
The community basis leads to a need for considerable 
administrative, advocacy, diplomatic, and political skills,
particularly project management at this stage.
</P><P>
As a compiler project, a wide range of opporunities
also exist for improving the compiler and writing
reference documentation as well as actually deciding what to
put in, and implementing it.
<P><EM>Everyone is welcome to contribute to the language design
process.</EM>
</P>
<TABLE>
<TR><TD>Project manager</TD><TD>Overall activity coordination</TD></TR>
<TR><TD>Advocate</TD><TD>Publish articles in various media</TD></TR>
<TR><TD>Web Site designer</TD><TD>Manage the felix.sf.net web site</TD></TR>
<TR><TD>Build Tester</TD><TD>Check the build on  particular platform</TD></TR>
<TR><TD>Compiler writer</TD><TD>Implement core <A HREF=compiler.html>compiler</A></TD></TR>
<TR><TD>Core library Developer</TD><TD>Implement core libraries</TD></TR>
<TR><TD>Library Developer</TD><TD>Implement Standard library components</TD></TR>
<TR><TD>Wrapper Library Developer</TD><TD>Develop wrappers for your favourite C or C++ library</TD></TR>
<TR><TD>Manual writer</TD><TD>Specify language semantics</TD></TR>
<TR><TD>Manual writer</TD><TD>Write User Guide</TD></TR>
<TR><TD>Tester</TD><TD>Write unit tests</TD></TR>
</TABLE>
</BODY>
</HTML>

@select(tangler('www/compiler.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Compiler Implementors</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Compiler documentation</H1>
<P>The ocamldoc generated <A HREF=impldoc/index.html>module reference</A>
for the modules in the core compiler are useful sometimes.
</P>
</BODY>
</HTML>


@select(tangler('www/flxcc.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>Flxcc Wrapper Generator</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Flxcc Wrapper Generator</H1>
<P>Felix now ships with <STRONG>flxcc</STRONG> which can 
be used to bulk generate wrappers for installed libraries.
This tool is very much work in progress.
Here's how it currently works.
</P>
<P>The first step you need to take is to create a 
single C header file, called something like:
</P><P><CODE>
  usr_include.h
</CODE></P><P>
which consists of a long sequence of C <CODE>#include</CODE>
preprocessor directives for all the library header files
you would like to wrap. I generated this list from a listing
of the directory <CODE>/usr/include</CODE>
</P>
<P>The second step is to preprocess this header file
using the system preprocessor. For gcc based systems
you should use a command like:
</P><P><CODE><PREFORMAT>
  gcc -E `pkg-config --cflags gtk+-2.0` usr_include.h > usr_include.hhh
</PREFORMAT></CODE></P><P>
to generate a preprocessed output file.
</P>
<P>The third step is to execute the wrapper generator:
</P><P><CODE>
  flxcc usr_include.hhh
</CODE>
</P><P>This will create a directory <CODE>flxcc_out</CODE> containing
wrappers for every included file: this is the inclusion closure
of the files listed in the original usr_include.h file.
</P>
<P>In principle if everything worked, you now have a set
of wrappers for your C environment. In practice, you will
probably need to remove some include files from the bootstrap
because they create conflicts, they're C++, they weren't meant
to be included at the top level, they have syntax errors in them,
or other reasons. Even then, the resulting wrappers may not
work. At present there is no recourse: you can edit the generated
wrappers by hand if you're desparate, but of course be careful
subsequent runs of flxcc don't clobber your changes.
</P>
<P>The following rules currently apply: module and include
names are the same as the C header, except "_h" is pasted 
on the end, and certain files found in subdirectories get
the subdirectory name prefixed to the start, including
'sys', 'bits', and 'asm'.
</P>
<P>The wrappers for your functions might not be where you
expect. For example on my system 'sin()' is actually 
defined in 'bits/mathcalls.h' and so ends up in
module 'bits_mathcalls_h' instead of 'math_h'. 
</P>
</BODY>
</HTML>


@select(tangler('www/coding.html','data'))
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
@tangle("<TITLE>Felix Developers Info</TITLE>")
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8">
</HEAD>
<BODY>
<H1>Coding Guidelines</H1>
<H2>Media</H2>
<P>Felix currently <EM>requires</EM> all original sources
to be encapsulated in interscript text files.
</P><P>
Files must end in either:
<OL>
<LI>pak for top level packages</LI>
<LI>ipk for subcomponents of those packages</LI>
</OL>
</P><P>If you have a large data file, or one
which is an authoritative externally sourced work
such as an academic paper or standards data,
a special exemption may be made to avoid gratuitious 
wrapping and tangling, whilst alleviating the customer
of the need to separately download it.
</P>
<H2>Character set</H2>
<P>
Felix uses UTF-8 encoding of ISO10646/Unicode.
Try to restrict use to the code points 
U+20 to U+7E plus U+10 (newline), the graphic
characters of ASCII plus newline and space.
</P><P>
Although interscript can handle diverse encodings,
we do not use this facility. Note in particular
<EM>Latin-1 encoded text is not supported</EM>.
</P><P>
Special exception: data files deliberately using
foreign encodings and character sets for the purpose
of testing codecs. Note: a few Latin-1 encoded characters
do appear occasionally in harmless places such as 
people's names. 
</P><P>
<EM>Tabs are not permitted in original sources</EM>,
and they may not be generated with a single
exception: makefiles, because they're required.
</P>
<H2>Code layout guidelines</H2>
<P>
The standard shiftwidth is 2.
Indentation must be systematic.
Extra indentation is not allowed.
Exactly one space should be used in flowing text.
The exact indentation style is up to the individual developer.
</P><P>
Text should be constrained to 65 columns where possible.
Extremely long lines are not allowed in original source (however
it is OK to generate long lines). All literate
programmed code should be preformatted for book pages,
which have very narrow width.
</P>
</BODY>
</HTML>

