@head(1,"Vim Syntax File")
@select(tangler("misc/felix.vim",'data'))
" Vim syntax file
" Language:	Felix
" Maintainer:	<John Max Skaller> skaller@ozemail.com.au
" Last Change:	2002 Apr 25

" This vim file is adapted from the c.vim file
" for use with Felix .. it doesn't quite work,
" but is better than nothing usually ..

" For version 5.x: Clear all syntax items
" For version 6.x: Quit when a syntax file was already loaded
if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

" all the felix keywords ..
" directives
syn keyword cDefine open
syn keyword cDefine use
syn keyword cDefine include
syn keyword cDefine header
syn keyword cDefine body
syn keyword cDefine macro

" special identifiers
syn keyword cDefine root
syn keyword cDefine parent
syn keyword cDefine self

" to do stuff
syn keyword cToDo todo

" statement keywords
syn keyword cStatement interface
syn keyword cStatement functor
syn keyword cStatement fun
syn keyword cStatement obj
syn keyword cStatement def
syn keyword cStatement proc
syn keyword cStatement call
syn keyword cStatement jump
syn keyword cStatement loop

syn keyword cStatement type
syn keyword cStatement ctypes
syn keyword cStatement typedef
syn keyword cStatement fun
syn keyword cStatement read
syn keyword cStatement return
syn keyword cStatement proc
syn keyword cStatement const
syn keyword cStatement struct
syn keyword cStatement var
syn keyword cStatement val
syn keyword cStatement union
syn keyword cStatement class
syn keyword cStatement exceptions
syn keyword cStatement module
syn keyword cStatement regexp
syn keyword cStatement attempt
syn keyword cStatement endattempt
syn keyword cStatement endmatch
syn keyword cStatement except
syn keyword cStatement finally
syn keyword cStatement raise

" operators
syn keyword cStatement not
syn keyword cStatement and
syn keyword cStatement not
syn keyword cStatement or

syn keyword cStatement if
syn keyword cStatement then
syn keyword cStatement else
syn keyword cStatement elif
syn keyword cStatement endif

syn keyword cStatement code
syn keyword cStatement fork
syn keyword cStatement of
syn keyword cStatement _
syn keyword cStatement when
syn keyword cStatement as
syn keyword cStatement all
syn keyword cStatement case
syn keyword cStatement with
syn keyword cStatement match
syn keyword cStatement regmatch
syn keyword cStatement lambda
syn keyword cStatement goto
syn keyword cStatement export
syn keyword cStatement inf
syn keyword cStatement NaN
syn keyword cStatement to

" standard library types
syn keyword cType unit
syn keyword cType void
syn keyword cType bool

syn keyword cType byte 
syn keyword cType address
syn keyword cType offset


syn keyword cType tiny
syn keyword cType short
syn keyword cType int
syn keyword cType long
syn keyword cType vlong

syn keyword cType utiny
syn keyword cType ushort
syn keyword cType uint
syn keyword cType ulong
syn keyword cType uvlong

syn keyword cType int8
syn keyword cType int16
syn keyword cType int32
syn keyword cType int64

syn keyword cType uint8
syn keyword cType uint16
syn keyword cType uint32
syn keyword cType uint64

syn keyword cType float
syn keyword cType double
syn keyword cType ldouble

syn keyword cType char
syn keyword cType wchar
syn keyword cType uchar

syn keyword cType string
syn keyword cType wstring
syn keyword cType ustring

syn keyword cConstant true false

" [JMS] yeah well, OK ..
syn keyword	cTodo		contained TODO FIXME XXX KLUDGE HACK

" cCommentGroup allows adding matches for special things in comments
syn cluster	cCommentGroup	contains=cTodo

syn region pythonString         matchgroup=Normal start=+'+  end=+'+ skip=+\\\\\|\\'+ contains=pythonEscape
syn region pythonString         matchgroup=Normal start=+"+  end=+"+ skip=+\\\\\|\\"+ contains=pythonEscape
syn region pythonString         matchgroup=Normal start=+"""+  end=+"""+ contains=pythonEscape
syn region pythonString         matchgroup=Normal start=+'''+  end=+'''+ contains=pythonEscape
syn region pythonRawString      matchgroup=Normal start=+[rR]'+ end=+'+ skip=+\\\\\|\\'+
syn region pythonRawString      matchgroup=Normal start=+[rR]"+    end=+"+ skip=+\\\\\|\\"+
syn region pythonRawString      matchgroup=Normal start=+[rR]"""+ end=+"""+
syn region pythonRawString      matchgroup=Normal start=+[rR]'''+ end=+'''+
syn match  pythonEscape         +\\[abfnrtv'"\\]+ contained
syn match  pythonEscape         "\\o\o\+" contained
syn match  pythonEscape         "\\x\x\+" contained
syn match  pythonEscape         "\\d\d\+" contained
syn match  pythonEscape         "\\$"
syn match  pythonEscape         display contained "\\\(u\x\{4}\|U\x\{8}\)"


" numbers -- skip weird error checks for now .. too hard
syn case ignore
syn match	cNumbers	display transparent "\<\d" contains=cNumber
syn match	cNumber		display contained "\(0d_\=\)\=\(\d\+_\)*\d\+\(u\=\(t\|s\|l\|v\|ll\)\=u\=\)\>"
syn match       cNumber         display contained "\(\d\+_\)*\d\+[.]\(\d+_\)*\d\+\(e[+-]\=\d\+\)\=\>"
syn match	cNumber		display contained "0x_\=\(\x\+_\)*\(\x\)\+u\=\(t\|s\|l\|v\|ll\)\=u\=\>"
syn match	cNumber		display contained "0o_\=\(\o\+_\)*\(\o\)\+u\=\(t\|s\|l\|v\|ll\)\=u\=\>"
syn match	cNumber		display contained "0b_\=\([01]\+_\)*\([01]\)\+u\=\(t\|s\|l\|v\|ll\)\=u\=\>"
syn case match

if exists("c_comment_strings")
  " A comment can contain cString, cCharacter and cNumber.
  " But a "*/" inside a cString in a cComment DOES end the comment!  So we
  " need to use a special type of cString: cCommentString, which also ends on
  " "*/", and sees a "*" at the start of the line as comment again.
  " Unfortunately this doesn't very well work for // type of comments :-(
  syntax match	cCommentSkip	contained "^\s*\*\($\|\s\+\)"
  syntax region cCommentString	contained start=+L\="+ skip=+\\\\\|\\"+ end=+"+ end=+\*/+me=s-1 contains=cSpecial,cCommentSkip
  syntax region cComment2String	contained start=+L\="+ skip=+\\\\\|\\"+ end=+"+ end="$" contains=cSpecial
  syntax region  cCommentL	start="//" skip="\\$" end="$" keepend contains=@cCommentGroup,cComment2String,cCharacter,cNumbersCom,cSpaceError
  syntax region cComment	matchgroup=cCommentStart start="/\*" matchgroup=NONE end="\*/" contains=@cCommentGroup,cCommentStartError,cCommentString,cCharacter,cNumbersCom,cSpaceError
else
  syn region	cCommentL	start="//" skip="\\$" end="$" keepend contains=@cCommentGroup,cSpaceError
  syn region	cComment	matchgroup=cCommentStart start="/\*" matchgroup=NONE end="\*/" contains=@cCommentGroup,cCommentStartError,cSpaceError
endif
" keep a // comment separately, it terminates a preproc. conditional
syntax match	cCommentError	display "\*/"
syntax match	cCommentStartError display "/\*"me=e-1 contained

syn region	cPreCondit	start="^\s*#\s*\(if\|ifdef\|ifndef\|elif\)\>" skip="\\$" end="$" end="//"me=s-1 contains=cComment,cCppString,cCharacter,cCppParen,cParenError,cNumbers,cCommentError,cSpaceError
syn match	cPreCondit	display "^\s*#\s*\(else\|endif\)\>"
if !exists("c_no_if0")
  syn region	cCppOut		start="^\s*#\s*if\s\+0\+\>" end=".\|$" contains=cCppOut2
  syn region	cCppOut2	contained start="0" end="^\s*#\s*\(endif\>\|else\>\|elif\>\)" contains=cSpaceError,cCppSkip
  syn region	cCppSkip	contained start="^\s*#\s*\(if\>\|ifdef\>\|ifndef\>\)" skip="\\$" end="^\s*#\s*endif\>" contains=cSpaceError,cCppSkip
endif
syn region	cIncluded	display contained start=+"+ skip=+\\\\\|\\"+ end=+"+
syn match	cIncluded	display contained "<[^>]*>"
syn match	cInclude	display "^\s*#\s*include\>\s*["<]" contains=cIncluded
"syn match cLineSkip	"\\$"
syn cluster	cPreProcGroup	contains=cPreCondit,cIncluded,cInclude,cDefine,cErrInParen,cErrInBracket,cUserLabel,cSpecial,cOctalZero,cCppOut,cCppOut2,cCppSkip,cFormat,cNumber,cFloat,cOctal,cOctalError,cNumbersCom,cString,cCommentSkip,cCommentString,cComment2String,@cCommentGroup,cCommentStartError,cParen,cBracket,cMulti
syn region	cDefine		start="^\s*#\s*\(define\|undef\)\>" skip="\\$" end="$" end="//"me=s-1 contains=ALLBUT,@cPreProcGroup
syn region	cPreProc	start="^\s*#\s*\(pragma\>\|line\>\|warning\>\|warn\>\|error\>\)" skip="\\$" end="$" keepend contains=ALLBUT,@cPreProcGroup

" Highlight User Labels
syn cluster	cMultiGroup	contains=cIncluded,cSpecial,cCommentSkip,cCommentString,cComment2String,@cCommentGroup,cCommentStartError,cUserCont,cUserLabel,cBitField,cOctalZero,cCppOut,cCppOut2,cCppSkip,cFormat,cNumber,cFloat,cOctal,cOctalError,cNumbersCom,cCppParen,cCppBracket,cCppString
" Avoid matching foo::bar() in C++ by requiring that the next char is not ':'
syn cluster	cLabelGroup	contains=cUserLabel
syn match	cUserCont	display "^\s*\I\i*\s*:>" contains=@cLabelGroup
syn match	cUserLabel	display "\I\i*" contained

if exists("c_minlines")
  let b:c_minlines = c_minlines
else
  if !exists("c_no_if0")
    let b:c_minlines = 50	" #if 0 constructs can be long
  else
    let b:c_minlines = 15	" mostly for () constructs
  endif
endif
exec "syn sync ccomment cComment minlines=" . b:c_minlines

" Define the default highlighting.
" For version 5.7 and earlier: only when not done already
" For version 5.8 and later: only when an item doesn't have highlighting yet
if version >= 508 || !exists("did_flx_syn_inits")
  if version < 508
    let did_flx_syn_inits = 1
    command -nargs=+ HiLink hi link <args>
  else
    command -nargs=+ HiLink hi def link <args>
  endif

  HiLink cFormat		cSpecial
  HiLink cCppString		cString
  HiLink cCommentL		cComment
  HiLink cCommentStart		cComment
  HiLink cLabel			Label
  HiLink cUserLabel		Label
  HiLink cConditional		Conditional
  HiLink cRepeat		Repeat
  HiLink cCharacter		Character
  HiLink cSpecialCharacter	cSpecial
  HiLink cNumber		Number
  HiLink cOctal			Number
  HiLink cOctalZero		PreProc	 " link this to Error if you want
  HiLink cFloat			Float
  HiLink cOctalError		cError
  HiLink cParenError		cError
  HiLink cErrInParen		cError
  HiLink cErrInBracket		cError
  HiLink cCommentError		cError
  HiLink cCommentStartError	cError
  HiLink cSpaceError		cError
  HiLink cSpecialError		cError
  HiLink cOperator		Operator
  HiLink cStructure		Structure
  HiLink cStorageClass		StorageClass
  HiLink cInclude		Include
  HiLink cPreProc		PreProc
  HiLink cDefine		Macro
  HiLink cIncluded		cString
  HiLink cError			Error
  HiLink cStatement		Statement
  HiLink cPreCondit		PreCondit
  HiLink cType			Type
  HiLink cConstant		Constant
  HiLink cCommentString		cString
  HiLink cComment2String	cString
  HiLink cCommentSkip		cComment
  HiLink pythonString		String
  HiLink cComment		Comment
  HiLink cSpecial		SpecialChar
  HiLink cTodo			Todo
  HiLink cCppSkip		cCppOut
  HiLink cCppOut2		cCppOut
  HiLink cCppOut		Comment

  delcommand HiLink
endif

let b:current_syntax = "felix"

" vim: ts=8

