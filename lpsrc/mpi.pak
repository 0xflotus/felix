@head(1,"MPI")
@select(tangler("cpkgs/target/mpi.py"))
execfile("config"+os.sep+"config.py")
try:
  cload(globals(),"target_mpi")
except:
  #HAVE_MPI=TARGET_CXX.check_header_exists(xqt,'mpi.h')
  # THIS ONLY WORKS ON UNIX
  print "Search for include/mpi.h"
  dir = locate_file("/include/mpi.h")
  print "Result of search",dir
  if dir:
    f = open("config"+os.sep+"mpi.fpc","w")
    if dir != "/usr":
      f.write("cflags: -I"+dir+"/include\n")
    f.write("provides_dlib: -lmpi\n")
    f.write("provides_slib: -lmpi\n")
    f.close()
    HAVE_MPI=1
  else:
    HAVE_MPI=0

  f=cwrite('target_mpi')
  pa(f,locals(),"HAVE_MPI")
  f.close()
  cload(globals(),"target_mpi")


@h = tangler('spkgs/mpi.py')
@select(h)
execfile("cpkgs"+os.sep+"target"+os.sep+"mpi.py")
if HAVE_MPI:
  iscr_source = ['lpsrc/mpi.pak']
  weaver_directory = 'doc/rtl/mpi/'

@select(tangler("lib/mpi/mpi.flx"))
//Module        : usr_lib_mpich_include_mpi_h
//Timestamp     : 2006/8/29 15:42:8 UTC
//Timestamp     : 2006/8/30 1:42:8 (local)
//Raw Header    : /usr/lib/mpich/include/mpi.h
//Preprocessor  : gcc -E 
//Input file: mpi.flxcc.i
//Flxcc Control : mpi.flxcc
//Felix Version : 1.1.3_rc1
include 'std';

//#define PMPI_Init( a, b ) PMPI_Init_vcheck( a, b, MPICH_VERSION )
//#define MPI_Init( a, b ) MPI_Init_vcheck( a, b, MPICH_VERSION )
//#define MPI_Win_f2c(win)   (MPI_Win)(win)
//#define MPI_Win_c2f(win)   (MPI_Fint)(win)
//#define MPI_Errhandler_f2c(errhandler) (MPI_Errhandler)(errhandler)
//#define MPI_Errhandler_c2f(errhandler) (MPI_Fint)(errhandler)
//#define MPI_Op_f2c(op) (MPI_Op)(op)
//#define MPI_Op_c2f(op) (MPI_Fint)(op)
//#define MPI_Request_f2c(request) (MPI_Request)MPIR_ToPointer(request)
//#define MPI_Group_f2c(group) (MPI_Group)(group)
//#define MPI_Group_c2f(group) (MPI_Fint)(group)
//#define MPI_Type_f2c(datatype) (MPI_Datatype)(datatype)
//#define MPI_Type_c2f(datatype) (MPI_Fint)(datatype)
//#define MPI_Comm_f2c(comm) (MPI_Comm)(comm)
//#define MPI_Comm_c2f(comm) (MPI_Fint)(comm)
//#define MPICH_HAS_C2F
//#define NEW_POINTERS

module mpi_h
{
  header '#include "mpi.h"';
  open C_hack;
  open usr_lib_mpich_include_mpi_fortdefs_h;
  open usr_lib_mpich_include_mpidefs_h;

  const MPICHX_VMPI_LEVEL : int;
  const MPICHX_HOST_LEVEL : int;
  const MPICHX_LAN_LEVEL : int;
  const MPICHX_WAN_LEVEL : int;
  const MPI_THREAD_MULTIPLE : int;
  const MPI_THREAD_SERIALIZED : int;
  const MPI_THREAD_FUNNELED : int;
  const MPI_THREAD_SINGLE : int;
  const MPI_STATUSES_IGNORE : int;
  const MPI_STATUS_IGNORE : int;
  const MPI_DISTRIBUTE_DFLT_DARG : int;
  const MPI_DISTRIBUTE_NONE : int;
  const MPI_DISTRIBUTE_CYCLIC : int;
  const MPI_DISTRIBUTE_BLOCK : int;
  const MPI_ORDER_FORTRAN : int;
  const MPI_ORDER_C : int;
  const MPI_MAX_INFO_VAL : int;
  const MPI_MAX_INFO_KEY : int;
  const MPI_INFO_NULL : int;
  const MPI_COMBINER_STRUCT : int;
  const MPI_COMBINER_HINDEXED : int;
  const MPI_COMBINER_INDEXED : int;
  const MPI_COMBINER_HVECTOR : int;
  const MPI_COMBINER_VECTOR : int;
  const MPI_COMBINER_CONTIGUOUS : int;
  const MPI_COMBINER_NAMED : int;
  const MPICH_VERSION : int;
  const MPICH_NAME : int;
  const MPI_SUBVERSION : int;
  const MPI_VERSION : int;
  const MPI_COMM_DUP_FN : int;
  const MPI_COMM_NULL_DELETE_FN : int;
  const MPI_COMM_NULL_COPY_FN : int;
  const MPI_DUP_FN : int;
  const MPI_NULL_DELETE_FN : int;
  const MPI_NULL_COPY_FN : int;
  const MPIR_ERRORS_WARN : int;
  const MPI_ERRORS_RETURN : int;
  const MPI_ERRORS_ARE_FATAL : int;
  const MPI_ANY_TAG : int;
  const MPI_ROOT : int;
  const MPI_ANY_SOURCE 	: int;
  const MPI_PROC_NULL : int;
  const MPI_BOTTOM : int;
  const MPI_CART : int;
  const MPI_GRAPH : int;
  const MPI_BSEND_OVERHEAD : int;
  const MPI_KEYVAL_INVALID : int;
  const MPI_UNDEFINED_RANK : int;
  const MPI_UNDEFINED : int;
  const MPI_MAX_NAME_STRING : int;
  const MPI_MAX_ERROR_STRING : int;
  const MPI_MAX_PROCESSOR_NAME : int;
  const MPI_ERRHANDLER_NULL : int;
  const MPI_REQUEST_NULL : int;
  const MPI_DATATYPE_NULL : int;
  const MPI_GROUP_NULL : int;
  const MPI_OP_NULL : int;
  const MPI_COMM_NULL : int;
  const MPIR_WTIME_IS_GLOBAL : int;
  const MPIR_IO : int;
  const MPIR_HOST : int;
  const MPIR_TAG_UB : int;
  const MPI_WTIME_IS_GLOBAL : int;
  const MPI_IO : int;
  const MPI_HOST : int;
  const MPI_TAG_UB : int;
  const MPI_MAXLOC : int;
  const MPI_MINLOC : int;
  const MPI_BXOR : int;
  const MPI_LXOR : int;
  const MPI_BOR : int;
  const MPI_LOR : int;
  const MPI_BAND : int;
  const MPI_LAND : int;
  const MPI_PROD : int;
  const MPI_SUM : int;
  const MPI_MIN : int;
  const MPI_MAX : int;
  const MPI_GROUP_EMPTY : int;
  const MPI_COMM_SELF : int;
  const MPI_COMM_WORLD : int;
  const MPI_CHARACTER : int;
  const MPI_2DOUBLE_PRECISION : int;
  const MPI_2REAL : int;
  const MPI_2DOUBLE_COMPLEX : int;
  const MPI_2COMPLEX : int;
  const MPI_2INTEGER : int;
  const MPI_INTEGER : int;
  const MPI_DOUBLE_PRECISION : int;
  const MPI_REAL : int;
  const MPI_LOGICAL : int;
  const MPI_DOUBLE_COMPLEX : int;
  const MPI_COMPLEX : int;
  const MPI_LONG_DOUBLE_INT : int;
  const MPI_2INT : int;
  const MPI_SHORT_INT : int;
  const MPI_LONG_INT : int;
  const MPI_DOUBLE_INT : int;
  const MPI_FLOAT_INT : int;
  const MPI_UB : int;
  const MPI_LB : int;
  const MPI_PACKED : int;
  const MPI_LONG_LONG : int;
  const MPI_LONG_LONG_INT : int;
  const MPI_LONG_DOUBLE : int;
  const MPI_DOUBLE : int;
  const MPI_FLOAT : int;
  const MPI_UNSIGNED_LONG : int;
  const MPI_LONG : int;
  const MPI_UNSIGNED : int;
  const MPI_INT : int;
  const MPI_UNSIGNED_SHORT : int;
  const MPI_SHORT : int;
  const MPI_BYTE : int;
  const MPI_UNSIGNED_CHAR : int;
  const MPI_CHAR : int;
  const MPI_UNEQUAL : int;
  const MPI_SIMILAR : int;
  const MPI_CONGRUENT : int;
  const MPI_IDENT : int;
  const MPI_MAX_PORT_NAME : int;

 
  //ABSTRACT TYPES
  type MPI_Handler_function = 'MPI_Handler_function';
  
  //CSTRUCTS 
  cstruct gridftp_params {
    partner_rank: int;
    nsocket_pairs: int;
    max_outstanding_writes: int;
    tcp_buffsize: int;
  }
  
  //PURE INCOMPLETE TYPES
  type _struct_MPIR_Info = 'struct MPIR_Info'; //local
  type _union_MPIR_HANDLE = ' union MPIR_HANDLE'; //local
  
  //TYPE ALIASES
  typedef MPI_Delete_function = int * int * address * address -> int;
  typedef MPI_Errhandler = int;
  typedef MPI_Group = int;
  typedef MPI_User_function = address * address * ptr[int] * ptr[int] -> void_t;
  typedef MPI_Op = int;
  typedef _struct_gridftp_params = gridftp_params;
  typedef MPI_Copy_function = int * int * address * address * address * ptr[int] -> int;
  typedef MPI_Request = ptr[_union_MPIR_HANDLE];
  typedef MPI_Comm = int;
  typedef MPI_Info = ptr[_struct_MPIR_Info];
  typedef MPI_Datatype = int;
  
  //VARIABLES
  const MPICHX_TOPOLOGY_DEPTHS: int = 'MPICHX_TOPOLOGY_DEPTHS';
  const MPICHX_QOS_BANDWIDTH: int = 'MPICHX_QOS_BANDWIDTH';
  const MPICHX_QOS_PARAMETERS: int = 'MPICHX_QOS_PARAMETERS';
  const MPICHX_PARALLELSOCKETS_PARAMETERS: int = 'MPICHX_PARALLELSOCKETS_PARAMETERS';
  const MPICHX_TOPOLOGY_COLORS: int = 'MPICHX_TOPOLOGY_COLORS';
  
  //FUNCTIONS
  fun MPIR_dup_fn: int * int * address * address * address * ptr[int] -> int;
  fun MPIR_null_copy_fn: int * int * address * address * address * ptr[int] -> int;
  fun MPIR_null_delete_fn: int * int * address * address -> int;
  fun MPI_Abort: int * int -> int;
  fun MPI_Address: address * ptr[MPI_Aint] -> int;
  fun MPI_Allgather: address * int * int * address * int * int * int -> int;
  fun MPI_Allgatherv: address * int * int * address * ptr[int] * ptr[int] * int * int -> int;
  fun MPI_Allreduce: address * address * int * int * int * int -> int;
  fun MPI_Alltoall: address * int * int * address * int * int * int -> int;
  fun MPI_Alltoallv: address * ptr[int] * ptr[int] * int * address * ptr[int] * ptr[int] * int * int -> int;
  fun MPI_Attr_delete: int * int -> int;
  fun MPI_Attr_get: int * int * address * ptr[int] -> int;
  fun MPI_Attr_put: int * int * address -> int;
  fun MPI_Barrier: int -> int;
  fun MPI_Bcast: address * int * int * int * int -> int;
  fun MPI_Bsend: address * int * int * int * int * int -> int;
  fun MPI_Bsend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Buffer_attach: address * int -> int;
  fun MPI_Buffer_detach: address * ptr[int] -> int;
  fun MPI_Cancel: ptr[MPI_Request] -> int;
  fun MPI_Cart_coords: int * int * int * ptr[int] -> int;
  fun MPI_Cart_create: int * int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun MPI_Cart_get: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun MPI_Cart_map: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun MPI_Cart_rank: int * ptr[int] * ptr[int] -> int;
  fun MPI_Cart_shift: int * int * int * ptr[int] * ptr[int] -> int;
  fun MPI_Cart_sub: int * ptr[int] * ptr[int] -> int;
  fun MPI_Cartdim_get: int * ptr[int] -> int;
  fun MPI_Comm_compare: int * int * ptr[int] -> int;
  fun MPI_Comm_create: int * int * ptr[int] -> int;
  fun MPI_Comm_dup: int * ptr[int] -> int;
  fun MPI_Comm_free: ptr[int] -> int;
  fun MPI_Comm_get_name: int * ptr[char] * ptr[int] -> int;
  fun MPI_Comm_group: int * ptr[int] -> int;
  fun MPI_Comm_rank: int * ptr[int] -> int;
  fun MPI_Comm_remote_group: int * ptr[int] -> int;
  fun MPI_Comm_remote_size: int * ptr[int] -> int;
  fun MPI_Comm_set_name: int * ptr[char] -> int;
  fun MPI_Comm_size: int * ptr[int] -> int;
  fun MPI_Comm_split: int * int * int * ptr[int] -> int;
  fun MPI_Comm_test_inter: int * ptr[int] -> int;
  fun MPI_Dims_create: int * int * ptr[int] -> int;
  fun MPI_Errhandler_create: ptr[MPI_Handler_function] * ptr[int] -> int;
  fun MPI_Errhandler_free: ptr[int] -> int;
  fun MPI_Errhandler_get: int * ptr[int] -> int;
  fun MPI_Errhandler_set: int * int -> int;
  fun MPI_Error_class: int * ptr[int] -> int;
  fun MPI_Error_string: int * ptr[char] * ptr[int] -> int;
  fun MPI_Finalize: 1 -> int;
  fun MPI_Finalized: ptr[int] -> int;
  fun MPI_Gather: address * int * int * address * int * int * int * int -> int;
  fun MPI_Gatherv: address * int * int * address * ptr[int] * ptr[int] * int * int * int -> int;
  fun MPI_Get_count: ptr[MPI_Status] * int * ptr[int] -> int;
  fun MPI_Get_elements: ptr[MPI_Status] * int * ptr[int] -> int;
  fun MPI_Get_processor_name: ptr[char] * ptr[int] -> int;
  fun MPI_Get_version: ptr[int] * ptr[int] -> int;
  fun MPI_Graph_create: int * int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun MPI_Graph_get: int * int * int * ptr[int] * ptr[int] -> int;
  fun MPI_Graph_map: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun MPI_Graph_neighbors: int * int * int * ptr[int] -> int;
  fun MPI_Graph_neighbors_count: int * int * ptr[int] -> int;
  fun MPI_Graphdims_get: int * ptr[int] * ptr[int] -> int;
  fun MPI_Group_compare: int * int * ptr[int] -> int;
  fun MPI_Group_difference: int * int * ptr[int] -> int;
  fun MPI_Group_excl: int * int * ptr[int] * ptr[int] -> int;
  fun MPI_Group_free: ptr[int] -> int;
  fun MPI_Group_incl: int * int * ptr[int] * ptr[int] -> int;
  fun MPI_Group_intersection: int * int * ptr[int] -> int;
  fun MPI_Group_range_excl: int * int * ptr[ptr[int]] * ptr[int] -> int;
  fun MPI_Group_range_incl: int * int * ptr[ptr[int]] * ptr[int] -> int;
  fun MPI_Group_rank: int * ptr[int] -> int;
  fun MPI_Group_size: int * ptr[int] -> int;
  fun MPI_Group_translate_ranks: int * int * ptr[int] * int * ptr[int] -> int;
  fun MPI_Group_union: int * int * ptr[int] -> int;
  fun MPI_Ibsend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Info_c2f: MPI_Info -> MPI_Fint;
  fun MPI_Info_create: ptr[MPI_Info] -> int;
  fun MPI_Info_delete: MPI_Info * ptr[char] -> int;
  fun MPI_Info_dup: MPI_Info * ptr[MPI_Info] -> int;
  fun MPI_Info_f2c: MPI_Fint -> MPI_Info;
  fun MPI_Info_free: ptr[MPI_Info] -> int;
  fun MPI_Info_get: MPI_Info * ptr[char] * int * ptr[char] * ptr[int] -> int;
  fun MPI_Info_get_nkeys: MPI_Info * ptr[int] -> int;
  fun MPI_Info_get_nthkey: MPI_Info * int * ptr[char] -> int;
  fun MPI_Info_get_valuelen: MPI_Info * ptr[char] * ptr[int] * ptr[int] -> int;
  fun MPI_Info_set: MPI_Info * ptr[char] * ptr[char] -> int;
  fun MPI_Init: ptr[int] * ptr[ptr[ptr[char]]] -> int;
  fun MPI_Init_thread: ptr[int] * ptr[ptr[ptr[char]]] * int * ptr[int] -> int;
  fun MPI_Initialized: ptr[int] -> int;
  fun MPI_Intercomm_create: int * int * int * int * int * ptr[int] -> int;
  fun MPI_Intercomm_merge: int * int * ptr[int] -> int;
  fun MPI_Iprobe: int * int * int * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Irecv: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Irsend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Isend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Issend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Keyval_create: ptr[MPI_Copy_function] * ptr[MPI_Delete_function] * ptr[int] * address -> int;
  fun MPI_Keyval_free: ptr[int] -> int;
  fun MPI_Op_create: ptr[MPI_User_function] * int * ptr[int] -> int;
  fun MPI_Op_free: ptr[int] -> int;
  fun MPI_Pack: address * int * int * address * int * ptr[int] * int -> int;
  fun MPI_Pack_size: int * int * int * ptr[int] -> int;
  fun MPI_Pcontrol[t]: t -> int = 'MPI_Pcontrol($a)';
  fun MPI_Probe: int * int * int * ptr[MPI_Status] -> int;
  fun MPI_Recv: address * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun MPI_Recv_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Reduce: address * address * int * int * int * int * int -> int;
  fun MPI_Reduce_scatter: address * address * ptr[int] * int * int * int -> int;
  fun MPI_Request_c2f: MPI_Request -> MPI_Fint;
  fun MPI_Request_free: ptr[MPI_Request] -> int;
  fun MPI_Rsend: address * int * int * int * int * int -> int;
  fun MPI_Rsend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Scan: address * address * int * int * int * int -> int;
  fun MPI_Scatter: address * int * int * address * int * int * int * int -> int;
  fun MPI_Scatterv: address * ptr[int] * ptr[int] * int * address * int * int * int * int -> int;
  fun MPI_Send: address * int * int * int * int * int -> int;
  fun MPI_Send_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Sendrecv: address * int * int * int * int * address * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun MPI_Sendrecv_replace: address * int * int * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun MPI_Ssend: address * int * int * int * int * int -> int;
  fun MPI_Ssend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun MPI_Start: ptr[MPI_Request] -> int;
  fun MPI_Startall: int * ptr[MPI_Request] -> int;
  fun MPI_Status_c2f: ptr[MPI_Status] * ptr[MPI_Fint] -> int;
  fun MPI_Status_f2c: ptr[MPI_Fint] * ptr[MPI_Status] -> int;
  fun MPI_Status_set_cancelled: ptr[MPI_Status] * int -> int;
  fun MPI_Status_set_elements: ptr[MPI_Status] * int * int -> int;
  fun MPI_Test: ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Test_cancelled: ptr[MPI_Status] * ptr[int] -> int;
  fun MPI_Testall: int * ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Testany: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Testsome: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Topo_test: int * ptr[int] -> int;
  fun MPI_Type_commit: ptr[int] -> int;
  fun MPI_Type_contiguous: int * int * ptr[int] -> int;
  fun MPI_Type_create_indexed_block: int * int * ptr[int] * int * ptr[int] -> int;
  fun MPI_Type_extent: int * ptr[MPI_Aint] -> int;
  fun MPI_Type_free: ptr[int] -> int;
  fun MPI_Type_get_contents: int * int * int * int * ptr[int] * ptr[MPI_Aint] * ptr[int] -> int;
  fun MPI_Type_get_envelope: int * ptr[int] * ptr[int] * ptr[int] * ptr[int] -> int;
  fun MPI_Type_hindexed: int * ptr[int] * ptr[MPI_Aint] * int * ptr[int] -> int;
  fun MPI_Type_hvector: int * int * MPI_Aint * int * ptr[int] -> int;
  fun MPI_Type_indexed: int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun MPI_Type_lb: int * ptr[MPI_Aint] -> int;
  fun MPI_Type_size: int * ptr[int] -> int;
  fun MPI_Type_struct: int * ptr[int] * ptr[MPI_Aint] * ptr[int] * ptr[int] -> int;
  fun MPI_Type_ub: int * ptr[MPI_Aint] -> int;
  fun MPI_Type_vector: int * int * int * int * ptr[int] -> int;
  fun MPI_Unpack: address * int * ptr[int] * address * int * int * int -> int;
  fun MPI_Wait: ptr[MPI_Request] * ptr[MPI_Status] -> int;
  fun MPI_Waitall: int * ptr[MPI_Request] * ptr[MPI_Status] -> int;
  fun MPI_Waitany: int * ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Waitsome: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun MPI_Wtick: 1 -> double;
  fun MPI_Wtime: 1 -> double;
  fun PMPI_Abort: int * int -> int;
  fun PMPI_Address: address * ptr[MPI_Aint] -> int;
  fun PMPI_Allgather: address * int * int * address * int * int * int -> int;
  fun PMPI_Allgatherv: address * int * int * address * ptr[int] * ptr[int] * int * int -> int;
  fun PMPI_Allreduce: address * address * int * int * int * int -> int;
  fun PMPI_Alltoall: address * int * int * address * int * int * int -> int;
  fun PMPI_Alltoallv: address * ptr[int] * ptr[int] * int * address * ptr[int] * ptr[int] * int * int -> int;
  fun PMPI_Attr_delete: int * int -> int;
  fun PMPI_Attr_get: int * int * address * ptr[int] -> int;
  fun PMPI_Attr_put: int * int * address -> int;
  fun PMPI_Barrier: int -> int;
  fun PMPI_Bcast: address * int * int * int * int -> int;
  fun PMPI_Bsend: address * int * int * int * int * int -> int;
  fun PMPI_Bsend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Buffer_attach: address * int -> int;
  fun PMPI_Buffer_detach: address * ptr[int] -> int;
  fun PMPI_Cancel: ptr[MPI_Request] -> int;
  fun PMPI_Cart_coords: int * int * int * ptr[int] -> int;
  fun PMPI_Cart_create: int * int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun PMPI_Cart_get: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun PMPI_Cart_map: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun PMPI_Cart_rank: int * ptr[int] * ptr[int] -> int;
  fun PMPI_Cart_shift: int * int * int * ptr[int] * ptr[int] -> int;
  fun PMPI_Cart_sub: int * ptr[int] * ptr[int] -> int;
  fun PMPI_Cartdim_get: int * ptr[int] -> int;
  fun PMPI_Comm_compare: int * int * ptr[int] -> int;
  fun PMPI_Comm_create: int * int * ptr[int] -> int;
  fun PMPI_Comm_dup: int * ptr[int] -> int;
  fun PMPI_Comm_free: ptr[int] -> int;
  fun PMPI_Comm_get_name: int * ptr[char] * ptr[int] -> int;
  fun PMPI_Comm_group: int * ptr[int] -> int;
  fun PMPI_Comm_rank: int * ptr[int] -> int;
  fun PMPI_Comm_remote_group: int * ptr[int] -> int;
  fun PMPI_Comm_remote_size: int * ptr[int] -> int;
  fun PMPI_Comm_set_name: int * ptr[char] -> int;
  fun PMPI_Comm_size: int * ptr[int] -> int;
  fun PMPI_Comm_split: int * int * int * ptr[int] -> int;
  fun PMPI_Comm_test_inter: int * ptr[int] -> int;
  fun PMPI_Dims_create: int * int * ptr[int] -> int;
  fun PMPI_Errhandler_create: ptr[MPI_Handler_function] * ptr[int] -> int;
  fun PMPI_Errhandler_free: ptr[int] -> int;
  fun PMPI_Errhandler_get: int * ptr[int] -> int;
  fun PMPI_Errhandler_set: int * int -> int;
  fun PMPI_Error_class: int * ptr[int] -> int;
  fun PMPI_Error_string: int * ptr[char] * ptr[int] -> int;
  fun PMPI_Finalize: 1 -> int;
  fun PMPI_Gather: address * int * int * address * int * int * int * int -> int;
  fun PMPI_Gatherv: address * int * int * address * ptr[int] * ptr[int] * int * int * int -> int;
  fun PMPI_Get_count: ptr[MPI_Status] * int * ptr[int] -> int;
  fun PMPI_Get_elements: ptr[MPI_Status] * int * ptr[int] -> int;
  fun PMPI_Get_processor_name: ptr[char] * ptr[int] -> int;
  fun PMPI_Get_version: ptr[int] * ptr[int] -> int;
  fun PMPI_Graph_create: int * int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun PMPI_Graph_get: int * int * int * ptr[int] * ptr[int] -> int;
  fun PMPI_Graph_map: int * int * ptr[int] * ptr[int] * ptr[int] -> int;
  fun PMPI_Graph_neighbors: int * int * int * ptr[int] -> int;
  fun PMPI_Graph_neighbors_count: int * int * ptr[int] -> int;
  fun PMPI_Graphdims_get: int * ptr[int] * ptr[int] -> int;
  fun PMPI_Group_compare: int * int * ptr[int] -> int;
  fun PMPI_Group_difference: int * int * ptr[int] -> int;
  fun PMPI_Group_excl: int * int * ptr[int] * ptr[int] -> int;
  fun PMPI_Group_free: ptr[int] -> int;
  fun PMPI_Group_incl: int * int * ptr[int] * ptr[int] -> int;
  fun PMPI_Group_intersection: int * int * ptr[int] -> int;
  fun PMPI_Group_range_excl: int * int * ptr[ptr[int]] * ptr[int] -> int;
  fun PMPI_Group_range_incl: int * int * ptr[ptr[int]] * ptr[int] -> int;
  fun PMPI_Group_rank: int * ptr[int] -> int;
  fun PMPI_Group_size: int * ptr[int] -> int;
  fun PMPI_Group_translate_ranks: int * int * ptr[int] * int * ptr[int] -> int;
  fun PMPI_Group_union: int * int * ptr[int] -> int;
  fun PMPI_Ibsend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Info_c2f: MPI_Info -> MPI_Fint;
  fun PMPI_Info_create: ptr[MPI_Info] -> int;
  fun PMPI_Info_delete: MPI_Info * ptr[char] -> int;
  fun PMPI_Info_dup: MPI_Info * ptr[MPI_Info] -> int;
  fun PMPI_Info_f2c: MPI_Fint -> MPI_Info;
  fun PMPI_Info_free: ptr[MPI_Info] -> int;
  fun PMPI_Info_get: MPI_Info * ptr[char] * int * ptr[char] * ptr[int] -> int;
  fun PMPI_Info_get_nkeys: MPI_Info * ptr[int] -> int;
  fun PMPI_Info_get_nthkey: MPI_Info * int * ptr[char] -> int;
  fun PMPI_Info_get_valuelen: MPI_Info * ptr[char] * ptr[int] * ptr[int] -> int;
  fun PMPI_Info_set: MPI_Info * ptr[char] * ptr[char] -> int;
  fun PMPI_Init: ptr[int] * ptr[ptr[ptr[char]]] -> int;
  fun PMPI_Init_thread: ptr[int] * ptr[ptr[ptr[char]]] * int * ptr[int] -> int;
  fun PMPI_Initialized: ptr[int] -> int;
  fun PMPI_Intercomm_create: int * int * int * int * int * ptr[int] -> int;
  fun PMPI_Intercomm_merge: int * int * ptr[int] -> int;
  fun PMPI_Iprobe: int * int * int * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Irecv: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Irsend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Isend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Issend: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Keyval_create: ptr[MPI_Copy_function] * ptr[MPI_Delete_function] * ptr[int] * address -> int;
  fun PMPI_Keyval_free: ptr[int] -> int;
  fun PMPI_Op_create: ptr[MPI_User_function] * int * ptr[int] -> int;
  fun PMPI_Op_free: ptr[int] -> int;
  fun PMPI_Pack: address * int * int * address * int * ptr[int] * int -> int;
  fun PMPI_Pack_size: int * int * int * ptr[int] -> int;
  fun PMPI_Pcontrol[t]: t -> int = 'PMPI_Pcontrol($a)';
  fun PMPI_Probe: int * int * int * ptr[MPI_Status] -> int;
  fun PMPI_Recv: address * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun PMPI_Recv_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Reduce: address * address * int * int * int * int * int -> int;
  fun PMPI_Reduce_scatter: address * address * ptr[int] * int * int * int -> int;
  fun PMPI_Request_free: ptr[MPI_Request] -> int;
  fun PMPI_Rsend: address * int * int * int * int * int -> int;
  fun PMPI_Rsend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Scan: address * address * int * int * int * int -> int;
  fun PMPI_Scatter: address * int * int * address * int * int * int * int -> int;
  fun PMPI_Scatterv: address * ptr[int] * ptr[int] * int * address * int * int * int * int -> int;
  fun PMPI_Send: address * int * int * int * int * int -> int;
  fun PMPI_Send_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Sendrecv: address * int * int * int * int * address * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun PMPI_Sendrecv_replace: address * int * int * int * int * int * int * int * ptr[MPI_Status] -> int;
  fun PMPI_Ssend: address * int * int * int * int * int -> int;
  fun PMPI_Ssend_init: address * int * int * int * int * int * ptr[MPI_Request] -> int;
  fun PMPI_Start: ptr[MPI_Request] -> int;
  fun PMPI_Startall: int * ptr[MPI_Request] -> int;
  fun PMPI_Status_set_cancelled: ptr[MPI_Status] * int -> int;
  fun PMPI_Status_set_elements: ptr[MPI_Status] * int * int -> int;
  fun PMPI_Test: ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Test_cancelled: ptr[MPI_Status] * ptr[int] -> int;
  fun PMPI_Testall: int * ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Testany: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Testsome: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Topo_test: int * ptr[int] -> int;
  fun PMPI_Type_commit: ptr[int] -> int;
  fun PMPI_Type_contiguous: int * int * ptr[int] -> int;
  fun PMPI_Type_extent: int * ptr[MPI_Aint] -> int;
  fun PMPI_Type_free: ptr[int] -> int;
  fun PMPI_Type_get_contents: int * int * int * int * ptr[int] * ptr[MPI_Aint] * ptr[int] -> int;
  fun PMPI_Type_get_envelope: int * ptr[int] * ptr[int] * ptr[int] * ptr[int] -> int;
  fun PMPI_Type_hindexed: int * ptr[int] * ptr[MPI_Aint] * int * ptr[int] -> int;
  fun PMPI_Type_hvector: int * int * MPI_Aint * int * ptr[int] -> int;
  fun PMPI_Type_indexed: int * ptr[int] * ptr[int] * int * ptr[int] -> int;
  fun PMPI_Type_lb: int * ptr[MPI_Aint] -> int;
  fun PMPI_Type_size: int * ptr[int] -> int;
  fun PMPI_Type_struct: int * ptr[int] * ptr[MPI_Aint] * ptr[int] * ptr[int] -> int;
  fun PMPI_Type_ub: int * ptr[MPI_Aint] -> int;
  fun PMPI_Type_vector: int * int * int * int * ptr[int] -> int;
  fun PMPI_Unpack: address * int * ptr[int] * address * int * int * int -> int;
  fun PMPI_Wait: ptr[MPI_Request] * ptr[MPI_Status] -> int;
  fun PMPI_Waitall: int * ptr[MPI_Request] * ptr[MPI_Status] -> int;
  fun PMPI_Waitany: int * ptr[MPI_Request] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Waitsome: int * ptr[MPI_Request] * ptr[int] * ptr[int] * ptr[MPI_Status] -> int;
  fun PMPI_Wtick: 1 -> double;
  fun PMPI_Wtime: 1 -> double;
}
