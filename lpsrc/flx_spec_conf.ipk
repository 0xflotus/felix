@set_title('Felix Standard: Conformance')
@head(1,'Identification')
Felix Programming Language and tools specification, version 1.0,
June 2001.

@head(1,'Conformance')
Three levels of language semantics are specified:
abstract semantics, translation semantics, and
binding semantics.

@head(2,'Abstract Semantics')
Abstract semantics refers to the operational
semantics of the abstract Felix machine.
The abstract machine is parameterized by user
specified data types, functions, and procedures.
The behaviour of the machine is characterized in terms
of calls to these functions and procedures passing values
of the user defined types as arguments, and,
in the case of functions, accepting
values of user defined types as results.
@p()
The semantics of the read primitive are that
execution shall be suspended, and, if resumed,
a value of the type of the read variable shall
be stored in that variable.
@p()
Note that the abstract semantics are independent
of the implementation of the primitve functions,
and independent of the representation of 
primitive data types.
@p()
Note that abstract semantics is a property of
Felix programs.

@head(2,'Translation Semantics')
Translation semantics consists of abstract semantics
together with specification of the code generated by a
Felix program or library. The translation semantics
is a set of mappings from Felix to C++ code: a correct
translation is any one of these mappings. A Felix
translator is conforming if every Felix program is
correctly translated.
@p()
Note that it is not necessary that the generated
code be correct C++.

@head(2,'Binding Semantics')
The binding semantics of a Felix program
is the semantics of the generated code,
as specified by ISO C++ and any vendor libraries
and extensions: these are the detailed execution semantics
of a Felix program.
@p()
A Felix program is said to have a well formed binding
if the generated code, together with the driver program,
are a well formed C++ program with well defined behaviour.

@head(2,'Program Correctness')
A Felix translation unit is said to be lexically correct if
the mapping of the input character string to the output
token string specified by the Felix Lexer Specification
does not contain an error token.
@p()
A Felix program is said to be syntactically correct
if it is lexically correct, and the input
token string may be generated by the Felix Grammar.
@p()
The output of the Felix Parser when applied to a
a token stream shall either consist of a diagnostic
error message, or shall be an 
Abstract Syntax Tree of the Felix Abstract Syntax,
constructed according to the rules for Felix
Syntax Directed Translation.
@p()

