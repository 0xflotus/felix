@import config
@head(1,'elkhound')

@h=tangler('licences/elk_licence.txt','data')
@select(h)
The elkhound software
Copyright (c) 2002, Regents of the University of California
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of the University of California, Berkeley nor
      the names of its contributors may be used to endorse or promote
      products derived from this software without specific prior
      written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@h = tangler('spkgs/elk.py')
@select(h)
import os

# Elkhound stuffs

SMBASE = [
]

# These are the files actually needed at run time by Felix
SMRTL = [
  'src/smbase/sm_malloc_stub',
  'src/smbase/sm_nonport',
  'src/smbase/sm_autofile',
  'src/smbase/sm_bflatten',
  'src/smbase/sm_bit2d',
  'src/smbase/sm_bitarray',
  'src/smbase/sm_boxprint',
  'src/smbase/sm_breaker',
  'src/smbase/sm_crc',
  'src/smbase/sm_datablok',
  'src/smbase/sm_flatten',
  'src/smbase/sm_growbuf',
  'src/smbase/sm_gprintf',
  'src/smbase/sm_hashline',
  'src/smbase/sm_hashtbl',
  'src/smbase/sm_missing',
  'src/smbase/sm_point',
  'src/smbase/sm_pprint',
  'src/smbase/sm_strdict',
  'src/smbase/sm_strhash',
  'src/smbase/sm_stringset',
  'src/smbase/sm_strtokp',
  'src/smbase/sm_strutil',
  'src/smbase/sm_svdict',
  'src/smbase/sm_vdtllist',
  'src/smbase/sm_vptrmap',
  'src/smbase/sm_warn',
  'src/smbase/sm_srcloc',
  'src/smbase/sm_syserr',
  'src/smbase/sm_str',
  'src/smbase/sm_trace',
  'src/smbase/sm_trdelete',
  'src/smbase/sm_voidlist',
  'src/smbase/sm_exc',
]

ASTGEN = [
  'src/ast/ast_gramlex',
  'src/ast/ast_ccsstr',
  'src/ast/ast_reporterr',
  'src/ast/ast_embedded',
  'src/ast/ast_asthelp',
  'src/ast/ast_strtable',
  'src/ast/ast_locstr',
]

ELKHOUND = [
  'src/elkhound/elk_asockind',
  'src/elkhound/elk_grammar',
  'src/elkhound/elk_emitcode',
  'src/elkhound/elk_mlsstr',
  'src/elkhound/elk_genml',
  'src/elkhound/elk_gramast.ast.gen',
  'src/elkhound/elk_gramlex.yy',
  'src/elkhound/elk_grampar',
  'src/elkhound/elk_grampar.tab',
  'src/elkhound/elk_gramexpl',
]

ELKRTL = [
  'src/elkhound/elk_glr',
  'src/elkhound/elk_parsetables',
  'src/elkhound/elk_useract',
  'src/elkhound/elk_ptreenode',
  'src/elkhound/elk_ptreeact',
]

ELKRTL_INTERFACES = [
  'config/target/flx_elk_config.hpp',
  'config/host/flx_host_elk_config.hpp',
  'config/target/flx_target_elk_config.hpp',
  'src/smbase/sm_array.h',
  'src/smbase/sm_objpool.h',
  'src/smbase/sm_sobjlist.h',
  'src/smbase/sm_trdelete.h',
  'src/smbase/sm_voidlist.h',
  'src/smbase/sm_macros.h',
  'src/smbase/sm_srcloc.h',
  'src/smbase/sm_typ.h',
  'src/smbase/sm_xassert.h',
  'src/smbase/sm_objlist.h',
  'src/smbase/sm_str.h',
  'src/elkhound/elk_lexerint.h',
  'src/elkhound/elk_glrconfig.h',
  'src/elkhound/elk_parsetables.h',
  'src/elkhound/elk_glr.h',
  'src/elkhound/elk_rcptr.h',
  'src/elkhound/elk_useract.h',
]

host_include_path = ['src/smbase', 'src/ast']
host_cpp_cpps = SMRTL+ASTGEN+ELKHOUND+ELKRTL
host_exes = [("src/elkhound/elk_gramanl","bin/flx_elkhound")]
host_exes_require_libs = ["src/elkhound/libelk_host_static"]

include_path = ['src/smbase', 'src/ast']
rtl_interfaces = ELKRTL_INTERFACES
cpp_cpps = ELKRTL + SMRTL
iscr_source = ['lpsrc/elk.pak']
build_macro = "ELK"
weaver_directory = "doc/elkhound/"
tmpdir = ['elk']

xfiles = [
  os.path.join('src', 'smbase', '*'),
  os.path.join('src', 'ast', '*'),
  os.path.join('src', 'elkhound', '*'),
]

@h = tangler('config/elk.fpc')
@select(h)
Name: elk
Description: Elhound
Version: 1
@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:libelk_dynamic")
   tangle("provides_slib: /DEFAULTLIB:libelk_static")
 else:
   tangle("provides_dlib: -lelk_dynamic")
   tangle("provides_slib: -lelk_static")

@h=tangler('config/target/flx_target_elk_config.hpp')
@select(h)
#ifndef __FLX_TARGET_ELK_CONFIG_H__
#define __FLX_TARGET_ELK_CONFIG_H__
#include "flx_rtl_config.hpp"
#ifdef BUILD_ELK
#define ELK_EXTERN FLX_EXPORT
#else
#define ELK_EXTERN FLX_IMPORT
#endif
#endif

@h=tangler('config/host/flx_host_elk_config.hpp')
@select(h)
#ifndef __FLX_HOST_ELK_CONFIG_H__
#define __FLX_HOST_ELK_CONFIG_H__
#include "flx_host_config.hpp"
#ifdef BUILD_ELK
#define ELK_EXTERN FLX_EXPORT
#else
#define ELK_EXTERN FLX_IMPORT
#endif
#endif

@h=tangler('config/target/flx_elk_config.hpp')
@select(h)
#ifndef __FLX_ELK_CONFIG_H__
#define __FLX_ELK_CONFIG_H__
#if defined(HOST_BUILD)
#include "flx_host_elk_config.hpp"
#elif defined(TARGET_BUILD)
#include "flx_target_elk_config.hpp"
#else
#error "ELKHOUND: must specify -DHOST_BUILD or -DTARGET_BUILD"
#endif
#endif
