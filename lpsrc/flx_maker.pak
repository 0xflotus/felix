@import config

@head(1,'Maker')
@FLX_MAKER_CVS_ID='$Id$'
@print(FLX_MAKER_CVS_ID)

@def make_executable(path):
   import stat
   try:
     mode = os.stat(path).st_mode
     os.chmod(path, mode | stat.S_IXUSR)
   except OSError as e:
     print(e)

@h = tangler('script/bin2hex.py')
@select(h)
# convert a binary file to hex
import sys
fn = sys.argv[1]
f = open(fn)
data = f.read()
f.close()
counter = 0
for ch in data:
  print("%02x" % ord(ch), end='')
  counter = counter + 1
  if counter == 8:
    print()
    counter = 0
print()

@head(1,'AUTHORS')
@select(tangler('AUTHORS'))
John (Max) Skaller skaller at users dot sourceforge dot net
Peter Jolly helped do the Cygwin build

@head(1,'LICENCE')
@select(tangler('LICENCE'))
@tangle('Version ' + config.flx_version + ' of Felix')
is free for any use, provided the authors
are not misrepresented in any way.

@head(1,'W3C Cascading Style Sheets')
Needed to view interscript generated documentation.
Also some gif images.

@python("//")
def mkgif(fn,d):
  try:
    os.mkdir("misc")
  except:
    pass
  f = open("misc"+os.sep+fn+".gif","wb")
  f.write(d)
  f.close()

plus=(b"\x47\x49\x46\x38\x39\x61\x09\x00"
  b"\x09\x00\x91\x00\x00\xfe\xfe\xfe"
  b"\x82\x82\x82\x02\x02\x02\x00\x00"
  b"\x00\x2c\x00\x00\x00\x00\x09\x00"
  b"\x09\x00\x00\x02\x14\x8c\x8f\xa0"
  b"\x0b\xb6\xb2\x9c\x82\xca\x89\x7b"
  b"\x5b\x78\x71\xcf\xce\x74\x08\x52"
  b"\x00\x00\x3b")

minus=(b"\x47\x49\x46\x38\x39\x61\x09\x00"
  b"\x09\x00\x91\x00\x00\xfe\xfe\xfe"
  b"\x82\x82\x82\x02\x02\x02\x00\x00"
  b"\x00\x2c\x00\x00\x00\x00\x09\x00"
  b"\x09\x00\x00\x02\x11\x8c\x8f\xa0"
  b"\x0b\xc6\xeb\x5e\x0b\x40\x58\x3b"
  b"\x65\x96\xf1\xa1\x1f\x14\x00\x3b")

dot=(b"\x47\x49\x46\x38\x39\x61\x09\x00"
  b"\x09\x00\xa1\x03\x00\xfe\xfe\xfe"
  b"\x82\x82\x82\x02\x02\x02\xff\xff"
  b"\xff\x2c\x00\x00\x00\x00\x09\x00"
  b"\x09\x00\x00\x02\x0d\x84\x8f\xa9"
  b"\x20\x2b\x9f\x9e\x8c\x50\xb5\x85"
  b"\x55\x01\x00\x3b")

mkgif("plus",plus)
mkgif("minus",plus)
mkgif("dot",dot)
//

@head(1, "Run script written in Felix")

@# ------------- UNIVERSAL RUN SCRIPT flx.flx
@# ------------- This script should be compiled to binary using one of the other
@# ------------- run scripts, or even do it the hard way, the result is a binary
@# ------------- executable with no dependencies which was generated from platform
@# ------------- independent code. Obviously the install directory is bound in,
@# ------------- but it can easily be overridden on the command line by again writing
@# ------------- a native shell script to drive it (but now leaving the binary to
@# ------------- do most of the command line argument processing etc

@select(tangler('src/flx/flx.flx','data'))

dbug := false; // switch off for production

False := false;
True := true;
@def ts(x): tangle(x+";")

@def tv(x): ts("var "+x)

@tv("INSTALL_ROOT_TOPDIR=Filename::join(%r, 'lib/felix')" % (config.PREFIX))
@tv("INSTALL_ROOT=Filename::join(INSTALL_ROOT_TOPDIR, 'felix-%s')" % (config.flx_version))
var FLX_INSTALL_DIR = Env::getenv("FLX_INSTALL_DIR", INSTALL_ROOT);
@tv("CYGWIN="+str(config.CYGWIN))
@tv("WIN32="+str(config.WIN32))
@tv("MACOSX="+str(config.MACOSX))
@tv("HAVE_GNU="+str(config.HAVE_GNU))
@tv("HAVE_MSVC="+str(config.HAVE_MSVC))
@if config.TARGET_CXX.options.HAVE_PIC:
  tv('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+' '+config.TARGET_CXX.options.PIC+'"')
 else:
  tv('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+'"')
@tv('CCLINK_DLLIB="'+config.TARGET_CXX.options.CCLINK_DYNAMIC_FLX+'"')
@tv('CCOBJ_STATIC_LIB="'+config.TARGET_CXX.options.CCOBJ_STATIC_FLX+'"')
@tv('CCLINK_STATIC="'+config.TARGET_CXX.options.CCLINK_STATIC+'"')
@tv('VERSION="'+config.flx_version+'"')
@tv('EXT_LIB="'+config.TARGET_CXX.options.EXT_LIB+'"')
@tv('EXT_STATIC_OBJ="'+config.TARGET_CXX.options.EXT_STATIC_OBJ+'"')
@tv('EXT_SHARED_OBJ="'+config.TARGET_CXX.options.EXT_SHARED_OBJ+'"')
@tv('EXT_EXE="'+config.TARGET_CXX.options.EXT_EXE+'"')
@tv('EXT_SHLIB="'+config.TARGET_CXX.options.EXT_SHLIB+'"')
@tv('SPEC_OBJ_FILENAME="'+config.TARGET_CXX.options.SPEC_OBJ_FILENAME+'"')
@tv('SPEC_EXE_FILENAME="'+config.TARGET_CXX.options.SPEC_EXE_FILENAME+'"')
@tv('OPTIMISE="'+config.TARGET_CXX.options.OPTIMISE+' "')
@tv('DEBUG_FLAGS="'+config.TARGET_CXX.options.DEBUG_FLAGS+' "')

// check for test mode: this argument must come first

var RECOMPILE=0;
var DEBUG=0;
var DEBUG_COMPILER=0;
var INLINE=100;
var ECHO=0;
var TIME=0;
var NOOPTIMISE=0;
var TIMECMD="time -p";

@if config.DEFAULT_LINK_MODEL=="dynamic":
   tv("STATIC=0;")
 else:
   tv("STATIC=1;")

var RUNIT=1;
var CCFLAGS="";
var FELIX=1;
var LINKER_SWITCHES="";
var MACROS="";
var grab=1;
var cpps="";
var cppos="";
var INCLUDE_DIRS="";
var INCLUDE_FILES="";
var NOSTDLIB=0;
var STDOUT="";
var STDIMPORT="--import=nugram.flxh --import=flx.flxh";
var IMPORTS="";
var OUTPUT_DIR="";

var DRIVER_PKG = "";
var DRIVER = "";
var LINK_STRING = "";

var pkgs="";

var CONFIG_DIR = "";
var FLXG = "";
var FLXRUN = "";

fun splitext(p:string)=>
  if p.[-4 to] == ".flx" then p.[to -4],"flx"
  elif p.[-4 to] == ".cpp" then p.[to -4],"cpp"
  else p,""
  endif
;

gen system(cmd:string):int= {
  if ECHO==1 do println(cmd); done
  var result = System::system(cmd);
  if ECHO==1 do println("Result code " + str(result)); done
  return result;
}

var argno=1;
fun prefix(arg:string,key:string)=>
  arg.[to len key]==key
;

var compile_exts = List::list ('cpp','cxx');
var linkexts =  List::list ('o','obj','lib','dll','a','so');
var arg = "";
var result = 0;

whilst grab == 1 and argno<System::argc do
  arg = System::argv argno;
  dbug?? println$ "ARGNO="+str(argno)+", arg='"+arg+"'";
  var path,ext = splitext(arg);
  var dir,base = Filename::split1(path);
  dbug?? println$ "path="+path+", ext="+ext+",dir="+dir+",base="+base;
  if ext != "flx" and ext != "" do
    // add to list of things to link, and also things to compile
    // if the extension is appropriate
    if List::mem eq of (string * string) compile_exts ext do
      cpps = cpps + " " + arg;
      cppos = cppos + " " + path + "." + EXT_OBJ;
    else
     cppos = cppos + " " + arg;
    done

  elif arg == "--nostdimport" do
    dbug?? println "No standard library import";
    // Note: currently, Felix compiler generates code that REQUIRES
    // the standard library, eg the driver passes a gc_profile_t record
    // and the compiler generates _uctor_ objects, etc etc
    STDIMPORT="";

  elif prefix(arg,"--import=") do
   dbug?? println "Add import";
   IMPORTS=IMPORTS + " " + arg.[9 to];

  elif prefix(arg,"--test=") do
    dbug?? println "Set test directory";
    FLX_INSTALL_DIR=arg.[7 to];

  elif arg=="--test" do
    dbug?? println "Set test directory";
    FLX_INSTALL_DIR=".";

  elif arg=="--install" do
    dbug?? println "Intall Felix";
    println "Install Felix: ONLY ON UNIX (you may need to be superuser)";
    println "Always installs the --test directory to the configured install target";
    println "Because that is hard coded into this program";
    println "Note: does NOT install this program 'flx' into your PATH!";
    println$ "FROM: " + FLX_INSTALL_DIR;
    println$ "TO  : " + INSTALL_ROOT;
    if FLX_INSTALL_DIR == INSTALL_ROOT do
      println "Can't install, src and dst are the same";
      System::exit(1);
    else
      result=system("mkdir -pv "+INSTALL_ROOT_TOPDIR);
      if result != 0 do
        println$ "Cannot create directory " + INSTALL_ROOT_TOPDIR;
        System::exit 1;
      done
      result=system("cp -Rp "+FLX_INSTALL_DIR+" "+INSTALL_ROOT);
      if result == 0 do println "Install succeeded"
      else println$ "Install failed, code = " + str(result);
      done
      System::exit(result);
    done

  elif prefix(arg,"--stdout=") do
    dbug?? println "Redirect standard output";
    // of the Felix program only: used for saving the output
    // to a file so the test harness can compare it with an .expect file
    STDOUT=arg.[9 to];

  elif arg=="--force" do
    dbug?? println "Force recompilation";
    // of the felix code, runs Felix unless --nofelix is set
    // the C++ compiler is run unless the felix compile failed
    RECOMPILE=1;

  elif arg=="--debug" do
    dbug?? println "Enable runtime debugging";
    DEBUG=1;

  elif arg=="--debug-compiler" do
    dbug?? println "Enable compiler debugging";
    DEBUG_COMPILER=1;

  elif arg=="--nooptimise" do
    dbug?? println "Disable optimisation";
    NOOPTIMISE=1;

  elif arg=="--nostdlib" do
    dbug?? println "Do not load standard library";
    NOSTDLIB=1;

  elif arg == "--echo" do
    dbug?? println "Echo commands sent to system";
    ECHO=1;

  elif arg == "--static" do
    dbug?? println "Compile a statically linked program";
    STATIC=1;

  elif prefix(arg,"--inline=") do
    dbug?? println "Set inline aggressiveness";
    INLINE=int(arg.[to 9]);

  elif arg == "--inline" do
    dbug?? println "Set inline aggressiveness";
    INLINE=100;

  elif arg == "--noinline" do
    dbug?? println "Disable inlining (NOT RECOMMENDED)";
    INLINE=0;

  elif arg == "--version" do
    dbug?? println "Print Felix version and exit";
    print("version ..");
    println(VERSION);
    System::exit(0);

  elif arg == "--config" do
    println$ "VERSION            = "+VERSION;
    println$ "INSTALL_ROOT_TOPDIR= "+INSTALL_ROOT_TOPDIR;
    println$ "INSTALL_ROOT       = "+INSTALL_ROOT;
    println$ "FLX_INSTALL_DIR    = "+FLX_INSTALL_DIR;
    println$ "";
    println$ "CYGWIN             = "+str CYGWIN;
    println$ "WIN32              = "+str WIN32;
    println$ "MACOSX             = "+str MACOSX;

    println$ "";
    println$ "HAVE_GNU           = "+str HAVE_GNU;
    println$ "HAVE_MSVC          = "+str HAVE_MSVC;

    println$ "";
    println$ "CCOBJ_DLLIB        = "+CCOBJ_DLLIB;
    println$ "CCLINK_DLLIB       = "+CCLINK_DLLIB;
    println$ "CCOBJ_STATIC_LIB   = "+CCOBJ_STATIC_LIB;
    println$ "CCLINK_STATIC      = "+CCLINK_STATIC;

    println$ "";
    println$ "EXT_LIB            = "+EXT_LIB;
    println$ "EXT_STATIC_OBJ     = "+EXT_STATIC_OBJ;
    println$ "EXT_SHARED_OBJ     = "+EXT_SHARED_OBJ;
    println$ "EXT_EXE            = "+EXT_EXE;
    println$ "EXT_SHLIB          = "+EXT_SHLIB;
    println$ "SPEC_OBJ_FILENAME  = "+SPEC_OBJ_FILENAME;
    println$ "SPEC_EXE_FILENAME  = "+SPEC_EXE_FILENAME;

    println$ "";
    println$ "OPTIMISE           = "+str OPTIMISE;
    println$ "DEBUG_FLAGS        = "+str DEBUG_FLAGS;
    System::exit(0);

  elif arg == "--options" do
    println$ "NOOPTIMISE         = "+str NOOPTIMISE;
    println$ "STATIC             = "+str STATIC;
    println$ "ECHO               = "+str ECHO;
    println$ "NOSTDLIB           = "+str NOSTDLIB;
    println$ "DEBUG              = "+str DEBUG;
    println$ "DEBUG_COMPILER     = "+str DEBUG_COMPILER;
    println$ "STDIMPORT          = "+str STDIMPORT;
    println$ "IMPORTS            = "+str IMPORTS;
    println$ "RECOMPILE          = "+str RECOMPILE;
    println$ "cpps               = "+str cpps;
    println$ "cppos              = "+str cppos;
    println$ "TIME               = "+str TIME;
    println$ "OUTPUT_DIR         = "+str OUTPUT_DIR;
    println$ "RUNIT              = "+str RUNIT;
    println$ "INCLUDE_DIRS       = "+str INCLUDE_DIRS;
    println$ "FELIX              = "+str FELIX;
    println$ "LINKER_SWITCHES    = "+str LINKER_SWITCHES;
    println$ "MACROS             = "+str MACROS;
    System::exit(0)

  elif arg == "--where" do
    dbug?? println "Print location of install directory and exit";
    println(FLX_INSTALL_DIR);
    System::exit(0);

  elif arg == "--time" do
    dbug?? println "Time program execution and print after running";
    TIME=1;

  elif prefix(arg,"--output_dir=") do
    dbug?? println "Set the directory for compiler generated C++ files";
    OUTPUT_DIR=arg;

  elif arg == "--help" do
    dbug?? println "Display top level manual page using 'man' program";
    C_hack::ignore(system( "man -M "+FLX_INSTALL_DIR+Filename::sep+"man"+" flx"));
    System::exit(0);

  elif arg == "-c" do
    dbug?? println "Compile program but do not run it";
    RUNIT=0;

  elif prefix(arg,"-I") do
    dbug?? println "Set include directories for both Felix and C/C++";
    INCLUDE_DIRS=INCLUDE_DIRS + " " + arg;

  elif arg== "--nofelix" do
    dbug?? println "Do not translate Felix code, just compile generated C++ (used to debug at C++ level)";
    FELIX=0;

  elif prefix(arg,"-l") or prefix(arg,"-L") do
    dbug?? println "Set extra switched for linker";
    LINKER_SWITCHES=LINKER_SWITCHES + " " + arg;

  elif prefix(arg,"-D") do
    dbug?? println "Set extra macros for C++ compilation";
    MACROS=MACROS + " " + arg;

  elif prefix(arg,"--pkg=") do
    dbug?? println "Add pkgconfig package to link";
    pkgs= pkgs + " " + arg.[6 to];

  elif prefix(arg,"--") do
    dbug?? println "Unknown -- style option, abort";
    println("Unknown option '"+ arg+"'");
    System::exit(1);

// the main filename -- subsequent args are args to flx_run
  else
    dbug?? println "Assume we have the filename now";
    grab=0;
  done
  argno = argno + 1;
done

dbug?? println$ grab,argno,System::argc;
if grab == 1 and argno == System::argc do
  println("usage: flx [options] filename");
  System::exit(1);
done

dbug?? println "#--------";
dbug?? println$ "DONE, option index = "+str(argno);
dbug?? println$ "path="+path+": dir="+dir+",base="+base", ext="+ext;
dbug?? println$ "cpps="+cpps;
dbug?? println$ "cppos="+cppos;

var USER_ARGS = ""; whilst argno < System::argc do USER_ARGS+=" " + System::argv argno; ++argno; done
//println$ "USER_ARGS=" + USER_ARGS;

if NOOPTIMISE == 0 do
  dbug?? println "Set C++ compiler optimisation switches";
  CCFLAGS=CCFLAGS+" " + OPTIMISE;
else
  dbug?? println "What, no optimisation?";
done

@if config.HAVE_MSVC:
  tangle('dbug?? println "Set MSVC linker options";');
  tv('DLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
  tangle('SLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
 elif config.CYGWIN or config.WIN32:
  tangle('dbug?? println "Set Cygwin linker options";');
  tv('DLINK_STRING="-L"+{FLX_INSTALL_DIR+"/bin "')
  tv('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
 else:
  tangle('dbug?? println "Set Unix linker options";');
  tv('DLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
  tv('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')


var PKGCONFIG=Filename::join$ List::list(FLX_INSTALL_DIR,"bin","flx_pkgconfig");
dbug?? println$ "Felix package manager program is "+PKGCONFIG;

if ECHO == 1 do
  println("#FLX_INSTALL_DIR="+FLX_INSTALL_DIR);
  println("#PKGCONFIG="+PKGCONFIG);
done

CONFIG_DIR = Filename::join(FLX_INSTALL_DIR,'config');
dbug?? println$ "Felix package manager config directory is "+CONFIG_DIR;
// make a list of any *.cpp files (or other g++ options ..)

var EXT_OBJ = 
  if STATIC == 0 then EXT_SHARED_OBJ
  else EXT_STATIC_OBJ
  endif
;

// this hack forces a directory name, because executing "prog"
// can fail if the currect directory is not on the PATH, 
// or worse, the wrong program can execute. The PATH is not
// searched if the filename includes a / somewhere so force one in.
// similarly for dynamic loaders looking for shared libraries
//
// It would probably be better to convert any relative filename
// to an absolute one, however this only makes sense on Unix 
// since Windows has multiple "drives" it is much harder to
// do the conversion.
dir = 
  if dir != "" then dir 
  else "."
  endif
;

var filebase = Filename::join(dir,base);
dbug?? println$ "User program base is " + filebase;

// Find absolute pathname

if path == "" do
  fprint$ cerr, ("No such felix program: "+path+"\n");
  System::exit(1);
done

gen get_stdout(x:string) = {
  // We're screwed if popen doesn't work ..
/*
  if os.name == "nt": // popen doesn't work on Windows
*/
    result := system(x + " >tmp.out");
    Stdout::flush();
    output := Text_file::load "tmp.out";
/*
  else:
    fout = os.popen(x+" 2>&1 ","r")
    output = []
    try:
      for line in fout:
        output.append(line)
        if outit: outit(line)
    finally:
      result = fout.close()
*/
  return result,output;
}

gen xqt(cmd:string) = {
  ECHO == 1 or dbug ?? println("cmd="+cmd);
  var result,output = get_stdout(cmd);
  if result == 0 do
    n := 
      match find_first_of (output, char "\n") with
      | Some ?n => n 
      | None => len output 
      endmatch
    ; 
    output = output.[to n]; // first line excluding newline
    ECHO==1 or dbug ?? println("output='"+output+"'");
  else
    dbug ?? println ("COMMAND FAILED");
    fprint$ cerr, ("Error "+repr(result)+" executing command " + cmd + "/n");
    System::exit result;
  done
  return output;
}

proc calpackages () {

  // find external header files
  var PKGCONFIG_CFLAGS=PKGCONFIG+ " --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=cflags ";

  // external header files
  var PKGCONFIG_INCLUDES=PKGCONFIG+ " --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=includes ";

  // find external dynload libraries
  var PKGCONFIG_DLIBS=PKGCONFIG+" -r --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=provides_dlib --field=requires_dlibs ";

  // find external static libraries
  var PKGCONFIG_SLIBS=PKGCONFIG+" -r --keeprightmost --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=provides_slib --field=requires_slibs ";

  //find driver package required
  var PKGCONFIG_DRIVER=PKGCONFIG+" --path+="+Filename::join(FLX_INSTALL_DIR,"config") + " --field=flx_requires_driver ";


  // find all include directories
  var x = xqt(PKGCONFIG_CFLAGS+ " @"+filebase+".resh");
  INCLUDE_DIRS=INCLUDE_DIRS +" " + x;

  // find all include files
  x = xqt(PKGCONFIG_INCLUDES+ " @"+filebase+".resh");
  INCLUDE_FILES=INCLUDE_FILES +" " + x;

  // find the driver package
  DRIVER_PKG=xqt(PKGCONFIG_DRIVER+" @"+filebase+".resh");
  DRIVER_PKG == "" ??  DRIVER_PKG="flx_run";

  // find the driver entity
  if STATIC == 0 do
    // dynamic linkage: the driver executable
    DRIVER=Filename::join$ List::list (FLX_INSTALL_DIR,"bin",DRIVER_PKG+EXT_EXE);
  else
    // static linkage: the driver object file
    DRIVER=Filename::join$ List::list (FLX_INSTALL_DIR,"lib","rtl",DRIVER_PKG+EXT_STATIC_OBJ);
  done

  if STATIC == 0 do
    // dynamic linkage: all the libraries required by the application
    LINK_STRING=DLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_DLIBS+" @"+filebase+".resh");
  else
    // static linkage: all the libraries required by the application and driver
    LINK_STRING=SLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_SLIBS+" "+DRIVER_PKG+" @"+filebase+".resh");
  done

  if ECHO == 1 do
    println("//RESOURCE FILE="+filebase+".resh");
    println("//INCLUDE_DIRS="+INCLUDE_DIRS);
    println("//INCLUDE_FILES="+INCLUDE_FILES);
    println("//DRIVER="+DRIVER);
    println("//LINK_STRING="+LINK_STRING);
  done
}

proc write_include_file(path:string) {
  includes := split (strip INCLUDE_FILES,char " ");
  var f = Text_file::fopen_output(path+".includes");
  List::iter  
    (proc (i:string) { Text_file::writeln$ f, "#include " + i; })
    includes
  ;
  Text_file::fclose f;
}

val args = USER_ARGS;
dbug?? println$ "Target program args = "+args;

var INCLUDE_DIR="-I"+Filename::join(FLX_INSTALL_DIR,"lib","rtl") + " -I"+Filename::join(FLX_INSTALL_DIR,"config","target");
dbug?? println$ "C++ Include directory for Felix library " + INCLUDE_DIR;

var FLXLIB="-I"+Filename::join(FLX_INSTALL_DIR,"lib");
var STDLIB="std";
if NOSTDLIB == 1 do
  FLXLIB="";
  STDLIB="";
done

if WIN32 do
  FLXG=Filename::join(FLX_INSTALL_DIR, 'bin', 'flxg');
  FLXRUN='';
else
  FLXG="env PATH="+FLX_INSTALL_DIR+"/bin:$PATH "+FLX_INSTALL_DIR+"/bin/flxg";
  // the mac uses DYLD_LIBRARY_PATH instead of LD_LIBRARY_PATH
  if MACOSX do
    FLXRUN="env DYLD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$DYLD_LIBRARY_PATH ";
  else
    FLXRUN="env LD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$LD_LIBRARY_PATH ";
  done
done

var DEBUGSWITCH="";
DEBUG_COMPILER == 1?? DEBUGSWITCH=" --debug";

var STATIC_ENV="";
DEBUG_COMPILER == 1?? STATIC_ENV="env FLX_DEBUG=1 ";

body """
long macosx_ftime(string s) {
  struct stat sb;
  int e = stat(s.data(),&sb);
  if(e != 0) return 0l;
  return sb.st_mtime;
}
""" requires header "#include <sys/stat.h>";

body """
long posix_ftime(string s) {
  struct stat sb;
  int e = stat(s.data(),&sb);
  if(e != 0) return 0l;
  return sb.st_mtime;
}
""" requires header "#include <sys/stat.h>";


fun macosx_ftime: string -> long = "macosx_ftime($1)";
fun posix_ftime: string -> long = "posix_ftime($1)";

fun filetime(f:string)=>if MACOSX then macosx_ftime(f) else posix_ftime(f) endif;

var cmd = "";
dbug?? println$ "RECOMPILE="+str RECOMPILE;
dbug?? println$ "RUNIT="+str RUNIT;

if RECOMPILE == 0 and RUNIT == 1 do
  // not (--force or -c)
  dbug?? println "Checking to see if the binary is uptodate";
  if STATIC == 0 do
    if (filetime(filebase+EXT_SHLIB) > filetime (filebase+".flx")) do
      dbug?? println$ "Running dynamically linked binary";
      calpackages();
      cmd=FLXRUN+DRIVER+DEBUGSWITCH+" "+ filebase+EXT_SHLIB+" "+args;
      dbug?? println$ "Uptodate shared lib: Running command " + cmd;
      System::exit(system(cmd));
    else
      dbug?? println$ "Dynamically linked binary out of date or non-existant";
    done
  else
    if (filetime(filebase+EXT_EXE) > filetime(filebase+".flx")) do
      dbug?? println$ "Running statically linked binary";
      cmd=STATIC_ENV+" "+filebase+" "+args;
      dbug?? println$ "Uptodate executable: Running command " + cmd;
      System::exit(system(cmd));
    else
      dbug?? println$ "Statically linked binary out of date or non-existant";
    done
  done
done

// Need Felix and c++ compile, then run it

var VERBOSE = "";
if DEBUG_COMPILER == 1 do
  VERBOSE="-v";
  dbug?? println "Compiler debugging on";
else
  VERBOSE="-q";
  dbug?? println "Compiler debugging off";
done

if DEBUG==1 do
  CCFLAGS=CCFLAGS+DEBUG_FLAGS;
done

var FLXFLAGS="--inline="+str(INLINE) + ' ' + str(OUTPUT_DIR);

var FCMD="";
var LCMD="";
var CCMD="";

if FELIX == 1 do
  FCMD=List::cat ' ' (List::list (
    FLXG,
    VERBOSE, FLXFLAGS, FLXLIB,
    INCLUDE_DIRS, STDIMPORT, IMPORTS,
    STDLIB, filebase));
  dbug?? println$ "Felix command="+FCMD;
  result=system(FCMD);
  if result != 0 do 
   dbug?? println "Felix compilation failed";
    System::exit(int(0!=result)); 
  done
  dbug?? println "Felix compilation succeeded";
  calpackages();
  write_include_file(filebase);
else
  dbug?? println "Felix compilation skipped by switch";
done

if STATIC == 0 do
  dbug?? println "Dynamic linkage";
  CCMD=List::cat ' ' (List::list (
    CCOBJ_DLLIB, CCFLAGS, "-DTARGET_BUILD",
    INCLUDE_DIR, INCLUDE_DIRS, MACROS,
    cpps, filebase+".cpp",
    SPEC_OBJ_FILENAME+filebase+EXT_OBJ));
  LCMD=List::cat ' ' (List::list (
    CCLINK_DLLIB, CCFLAGS,
    cppos, filebase+EXT_OBJ,
    SPEC_EXE_FILENAME+filebase+EXT_SHLIB,
    LINK_STRING));
  dbug?? println$ "C++ command="+CCMD;
  result = system(CCMD);
  if result == 0 do
    dbug?? println$ "Link command="+LCMD;
    result = system(LCMD);
    if result == 0 do
      if RUNIT == 1 do
        if TIME == 1 do
          cmd=List::cat ' ' (List::list (
            TIMECMD,
            FLXRUN+DRIVER+DEBUGSWITCH,
            filebase+EXT_SHLIB, args));
        else
          cmd=List::cat ' ' (List::list (
            FLXRUN+DRIVER+DEBUGSWITCH,
            filebase+EXT_SHLIB, args));
        done
        if STDOUT != "" do cmd=cmd+" > " +STDOUT; done
        dbug?? println$ "Run command="+cmd;
        System::exit(int(0!=system(cmd)));
      else
        dbug?? println "Not running program selected by switch";
      done
    else
      dbug?? println "Dynamic linkage failed";
    done
  else
    dbug?? println "C++ compilation failed";
  done
else
  dbug?? println "Static linkage";
  CCMD=List::cat ' ' (List::list (
    CCOBJ_STATIC_LIB,
    CCFLAGS, "-DTARGET_BUILD",
    "-DFLX_STATIC_LINK", INCLUDE_DIR, INCLUDE_DIRS,
    MACROS, cpps, filebase+".cpp",
    SPEC_OBJ_FILENAME+filebase+EXT_OBJ));
  LCMD=List::cat ' ' (List::list (
    CCLINK_STATIC, SPEC_EXE_FILENAME+filebase+EXT_EXE,
    filebase+EXT_OBJ, DRIVER, cppos, LINK_STRING));
  dbug?? println$ "C++ command="+CCMD;
  result=system(CCMD);
  if result == 0 do
    dbug?? println$ "Link command="+LCMD;
    result=system(LCMD);
    if result == 0 do
      // rm -f "$base.cpp"
      if RUNIT == 1 do
        if TIME == 1 do
          cmd= List::cat ' ' (List::list (
            TIMECMD, STATIC_ENV, filebase, args));
        else
          cmd=List::cat ' ' (List::list (
            STATIC_ENV, filebase,args));
        done
        if STDOUT != "" do cmd=cmd + " > "+STDOUT; done
        dbug?? println$ "Run command="+cmd;
        System::exit(int(0!=system(cmd)));
      else
        dbug?? println "Not running program selected by switch";
      done
    else
      dbug?? println "Static Linkage failed";
    done
  else
    dbug?? println "C++ compilation failed";
  done
done

System::exit(int(0!=result));


@head(1,'Run script')
@# ------------- RUN SCRIPT flx.bat FOR WINDOWS COMMAND LINE

@select(tangler('bin/flx.bat','data'))
@@echo off
SETLOCAL
SET RUNIT=1
SET DOFLXG=1
SET DOECHO=0
SET FID=%FLX_INSTALL_DIR%
SET STATIC=0

:DOARGS
IF "-c" EQU "%1" (
SET RUNIT=0
SHIFT
GOTO DOARGS
)

IF "--nofelix" EQU "%1" (
SET DOFLXG=0
SHIFT
GOTO DOARGS
)

IF "--echo" EQU "%1" (
echo on
SET DOECHO=1
SHIFT
GOTO DOARGS
)

IF "--test" EQU "%1" (
SET FID=.
SHIFT
GOTO DOARGS
)

IF "--static" EQU "%1" (
SET STATIC=1
SHIFT
GOTO DOARGS
)

"%FID%\BIN\FLXG" -I"%FID%\LIB" --import nugram.flxh --import:flx.flxh std %1 >"%1.LOG"
if ERRORLEVEL 1 GOTO ERROR
if %STATIC% EQU 0 (
%FID%\BIN\FLX_PKGCONFIG --path:%FID%\CONFIG --field:cflags @%1.resh >%1_cflags.txt
if ERRORLEVEL 1 GOTO ERROR
cl /nologo /MD /c /EHs /w  /I"%FID%\LIB\RTL" /I"%FID%\config\target" @%1_cflags.txt %1.cpp /Fo%1.obj >"%1.LOG"
if ERRORLEVEL 1 GOTO ERROR
%FID%\BIN\FLX_PKGCONFIG --path:%FID%\CONFIG --field:provides_dlib --field:requires_dlibs @%1.resh >%1_linkflags.txt
if ERRORLEVEL 1 GOTO ERROR
link /dll %1.obj /OUT:%1.dll @%1_linkflags.txt /LIBPATH:"%FID%\BIN" /DEFAULTLIB:flx_dynamic >"%1.LOG"
if ERRORLEVEL 1 GOTO ERROR
del %1.exp
del %1.lib
del %1_cflags.txt
del %1_linkflags.txt
IF %RUNIT% EQU 1 (
"%FID%\bin\flx_arun" %1.dll %2 %3 %4 %5 %6 %7 %8 %9
)
) else (
%FID%\BIN\FLX_PKGCONFIG --path:%FID%\CONFIG --field:cflags @%1.resh >%1_cflags.txt
if ERRORLEVEL 1 GOTO ERROR
cl /nologo /MT /c /EHs /w  /I"%FID%\LIB\RTL" /I"%FID%\config\target" /DFLX_STATIC_LINK @%1_cflags.txt %1.cpp /Fo%1.obj >"%1.LOG"
if ERRORLEVEL 1 GOTO ERROR
%FID%\BIN\FLX_PKGCONFIG --path:%FID%\CONFIG --field:provides_slib --field:requires_slibs @%1.resh >%1_linkflags.txt
link "%FID%\rtl\flx_arun_static.obj" %1.obj /OUT:%1.exe @%1_linkflags.txt /LIBPATH:"%FID%\RTL" /DEFAULTLIB:flx_async_static /DEFAULTLIB:faio_static /DEFAULTLIB:demux_static /DEFAULTLIB:flx_pthread_static /DEFAULTLIB:flx_static >"%1.LOG"
if ERRORLEVEL 1 GOTO ERROR
del %1_cflags.txt
del %1_linkflags.txt
%1 %2 %3 %4 %5 %6 %7 %8 %9
)
GOTO FINISHED
:ERROR
ECHO SOME KIND OF ERROR OCCURED, rerun with --echo
type %1.LOG
EXIT /B 1
:FINISHED
ENDLOCAL

@# ------------- UNIVERSAL RUN SCRIPT flx.py REQUIRES PYTHON
@select(tangler('bin/flx.py','data'))
#!/usr/bin/env python3.1
# flx.py - felix script harness (python version)
import os
import os.path
import sys
import stat
import string


@tangle("INSTALL_ROOT=os.path.join(%r, '/lib/felix/felix-%s')" % (config.PREFIX, config.flx_version))
FLX_INSTALL_DIR = os.getenv("FLX_INSTALL_DIR", INSTALL_ROOT)
@tangle("CYGWIN="+str(config.CYGWIN))
@tangle("WIN32="+str(config.WIN32))
@tangle("MACOSX="+str(config.MACOSX))
@tangle("HAVE_GNU="+str(config.HAVE_GNU))
@tangle("HAVE_MSVC="+str(config.HAVE_MSVC))
@if config.TARGET_CXX.options.HAVE_PIC:
  tangle('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+' '+config.TARGET_CXX.options.PIC+'"')
 else:
  tangle('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+'"')
@tangle('CCLINK_DLLIB="'+config.TARGET_CXX.options.CCLINK_DYNAMIC_FLX+'"')
@tangle('CCOBJ_STATIC_LIB="'+config.TARGET_CXX.options.CCOBJ_STATIC_FLX+'"')
@tangle('CCLINK_STATIC="'+config.TARGET_CXX.options.CCLINK_STATIC+'"')
@tangle('VERSION="'+config.flx_version+'"')
@tangle('EXT_LIB="'+config.TARGET_CXX.options.EXT_LIB+'"')
@tangle('EXT_STATIC_OBJ="'+config.TARGET_CXX.options.EXT_STATIC_OBJ+'"')
@tangle('EXT_SHARED_OBJ="'+config.TARGET_CXX.options.EXT_SHARED_OBJ+'"')
@tangle('EXT_EXE="'+config.TARGET_CXX.options.EXT_EXE+'"')
@tangle('EXT_SHLIB="'+config.TARGET_CXX.options.EXT_SHLIB+'"')
@tangle('SPEC_OBJ_FILENAME="'+config.TARGET_CXX.options.SPEC_OBJ_FILENAME+'"')
@tangle('SPEC_EXE_FILENAME="'+config.TARGET_CXX.options.SPEC_EXE_FILENAME+'"')
@tangle('OPTIMISE="'+config.TARGET_CXX.options.OPTIMISE+' "')
@tangle('DEBUG_FLAGS="'+config.TARGET_CXX.options.DEBUG_FLAGS+' "')

# check for test mode: this argument must come first

RECOMPILE=0
DEBUG=0
DEBUG_COMPILER=0
INLINE=100
ECHO=0
TIME=0
NOOPTIMISE=0
TIMECMD="time -p"

@if config.DEFAULT_LINK_MODEL=="dynamic":
   tangle("STATIC=0")
 else:
   tangle("STATIC=1")

RUNIT=1
CCFLAGS=""
FELIX=1
LINKER_SWITCHES=""
MACROS=""
grab=1
cpps=""
cppos=""
INCLUDE_DIRS=""
INCLUDE_FILES=""
NOSTDLIB=0
STDOUT=""
STDIMPORT="--import=nugram.flxh --import=flx.flxh"
IMPORTS=""
OUTPUT_DIR=""

def splitext(p):
  if p[-5:-1] == ".flx":
    return p[:-5],".flx"
  elif p[-5:-1] == ".cpp":
    return p[:-5],".cpp"
  return p,""

def system(cmd):
  if ECHO==1: print(cmd)
  result = os.system(cmd)
  if ECHO==1: print("Result code " + str(result))
  return result

argno=1
def prefix(arg,key):
  return arg[:len(key)]==key

compile_exts = ['cpp','cxx']
linkexts = ['o','obj','lib','dll','a','so']

while grab == 1 and argno<len(sys.argv):
  arg = sys.argv[argno]
  #print "ARGNO="+str(argno)+", arg='"+arg+"'"
  path,ext = splitext(arg)
  dir,base = os.path.split(path)
  #print "path="+path+", ext="+ext+",dir="+dir+",base="+base
  #print "cpps="+cpps
  #print "cppos="+cppos
  #print "arg='"+arg+"'"
  if ext != "flx" and ext != "":
    if ext in compile_exts:
      cpps = cpps + " " + arg
      cppos = cppos + " " + path + "." + EXT_OBJ
    else:
     cppos = cppos + " " + arg

  elif arg == "--nostdimport":
    STDIMPORT=""

  elif prefix(arg,"--import="):
   IMPORTS=IMPORTS + " " + arg[9:]

  elif prefix(arg,"--test="):
    FLX_INSTALL_DIR=arg[7:]

  elif arg=="--test":
    FLX_INSTALL_DIR="."

  elif prefix(arg,"--stdout="):
    STDOUT=arg[9:]

  elif arg=="--force":
    RECOMPILE=1

  elif arg=="--debug":
    DEBUG=1

  elif arg=="--debug-compiler":
    DEBUG_COMPILER=1

  elif arg=="--nooptimise":
    NOOPTIMISE=1

  elif arg=="--nostdlib":
    NOSTDLIB=1

  elif arg == "--echo":
    ECHO=1

  elif arg == "--static":
    STATIC=1

  elif prefix(arg,"--inline="):
    INLINE=int(arg[:9])

  elif arg == "--inline":
    INLINE=100

  elif arg == "--noinline":
    INLINE=0

  elif arg == "--version":
    print("version ..")
    print(VERSION)
    sys.exit(0)

  elif arg == "--where":
    print(FLX_INSTALL_DIR)
    sys.exit(0)

  elif arg == "--time":
    TIME=1

  elif prefix(arg,"--output_dir="):
    OUTPUT_DIR=arg

  elif arg == "--help":
    os.system("man -M "+FLX_INSTALL_DIR+os.sep+"man"+" flx")
    sys.exit(0)

  elif arg == "-c":
    RUNIT=0

  elif prefix(arg,"-I"):
    INCLUDE_DIRS=INCLUDE_DIRS + " " + arg

  elif arg== "--nofelix":
    FELIX=0

  elif prefix(arg,"-l") or prefix(arg,"-L"):
   LINKER_SWITCHES=LINKER_SWITCHES + " " + arg

  elif prefix(arg,"-D"):
   MACROS=MACROS + " " + arg

  elif prefix(arg,"--pkg="):
    pkgs= pkgs + " " + arg[6:]

  elif prefix(arg,"--"):
    print("Unknown option '"+ arg+"'")
    sys.exit(1)

# the main filename -- subsequent args are args to flx_run
  else:
    grab=0
  argno = argno + 1

#print grab,argno,len(sys.argv)
if grab == 1 and argno == len(sys.argv):
  print("usage: flx [options] filename")
  sys.exit(1)

#print "#--------"
#print "DONE, option index = "+str(argno)
#print "path="+path+", ext="+ext+",dir="+dir+",base="+base
#print "cpps="+cpps
#print "cppos="+cppos

if NOOPTIMISE == 0:
  CCFLAGS=CCFLAGS+" " + OPTIMISE

@if config.HAVE_MSVC:
  tangle('DLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
  tangle('SLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
 elif config.CYGWIN or config.WIN32:
  tangle('DLINK_STRING="-L"+{FLX_INSTALL_DIR+"/bin "')
  tangle('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
 else:
  tangle('DLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
  tangle('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')


PKGCONFIG=os.path.join(FLX_INSTALL_DIR,"bin","flx_pkgconfig")

if ECHO == 1:
  print("#FLX_INSTALL_DIR="+FLX_INSTALL_DIR)
  print("#PKGCONFIG="+PKGCONFIG)

CONFIG_DIR = os.path.join(FLX_INSTALL_DIR,'config')

# find external header files
PKGCONFIG_CFLAGS=PKGCONFIG+ " --path+="+os.path.join(FLX_INSTALL_DIR,"config") + " --field=cflags "

# external header files
PKGCONFIG_INCLUDES=PKGCONFIG+ " --path+="+os.path.join(FLX_INSTALL_DIR,"config") + " --field=includes "

# find external dynload libraries
PKGCONFIG_DLIBS=PKGCONFIG+" -r --path+="+os.path.join(FLX_INSTALL_DIR,"config") + " --field=provides_dlib --field=requires_dlibs "

# find external static libraries
PKGCONFIG_SLIBS=PKGCONFIG+" -r --keeprightmost --path+="+os.path.join(FLX_INSTALL_DIR,"config") + " --field=provides_slib --field=requires_slibs "

#find driver package required
PKGCONFIG_DRIVER=PKGCONFIG+" --path+="+os.path.join(FLX_INSTALL_DIR,"config") + " --field=flx_requires_driver "

# make a list of any *.cpp files (or other g++ options ..)

if STATIC == 0:
  EXT_OBJ=EXT_SHARED_OBJ
else:
  EXT_OBJ=EXT_STATIC_OBJ

# Strip trailing .flx or .so
# users should type 'flx file' without extension,
# but #! interpreter always passes extension ..

if path.endswith('.flx'):
  base = path[:-4]
elif path.endswith('.so'):
  base = path[:-3]
else:
  base = path

# Find absolute pathname

if path == "":
  sys.stderr.write("No such felix program: "+path+"\n")
  sys.exit(1)

def get_stdout(x,outit=None):
  # We're screwed if popen doesn't work ..

  if os.name == "nt": # popen doesn't work on Windows
    result = os.system(x + " >tmp.out")
    fout = open("tmp.out")
    output = fout.readlines()
    if outit:
      for line in output: outit(line)
    fout.close()
  else:
    fout = os.popen(x+" 2>&1 ","r")
    output = []
    try:
      for line in fout:
        output.append(line)
        if outit: outit(line)
    finally:
      result = fout.close()
  return result,output

def xqt(cmd, default=None):
  if ECHO == 1: print(cmd)
  result,output = get_stdout(cmd)
  if not result:
     output=output[0][:-1] # first line excluding newline
     if ECHO==1:print("output="+output)
     return output
  if default is None:
    print("Cmd FAILED")
    sys.stderr.write("Error "+repr(result)+" executing command " + cmd+"\n")
    if not hasattr(os, 'WEXITSTATUS'):
      sys.exit(1)
    else:
      sys.exit(os.WEXITSTATUS(result))
  else:
    return default

def calpackages ():
  # find all include directories
  global INCLUDE_DIRS, INCLUDE_FILES, LINK_STRING, DRIVER

  # find all include directories
  x = xqt(PKGCONFIG_CFLAGS+ " @"+base+".resh")
  INCLUDE_DIRS=INCLUDE_DIRS +" " + x

  # find all include files
  x = xqt(PKGCONFIG_INCLUDES+ " @"+base+".resh")
  INCLUDE_FILES=INCLUDE_FILES +" " + x

  # find the driver package
  DRIVER_PKG=xqt(PKGCONFIG_DRIVER+" @"+base+".resh")
  if DRIVER_PKG == "":
    DRIVER_PKG="flx_run"

  # find the driver entity
  if STATIC == 0:
    # dynamic linkage: the driver executable
    DRIVER=os.path.join(FLX_INSTALL_DIR,"bin",DRIVER_PKG+EXT_EXE)
  else:
    # static linkage: the driver object file
    DRIVER=os.path.join(FLX_INSTALL_DIR,"lib","rtl",DRIVER_PKG+EXT_STATIC_OBJ)

  if STATIC == 0:
    # dynamic linkage: all the libraries required by the application
    LINK_STRING=DLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_DLIBS+" @"+base+".resh")
  else:
    # static linkage: all the libraries required by the application and driver
    LINK_STRING=SLINK_STRING+LINKER_SWITCHES+xqt(
      PKGCONFIG_SLIBS+" "+DRIVER_PKG+" @"+base+".resh")

  if ECHO == 1:
    print("#RESOURCE FILE="+base+".resh")
    print("#INCLUDE_DIRS="+INCLUDE_DIRS)
    print("#INCLUDE_FILES="+INCLUDE_FILES)
    print("#DRIVER="+DRIVER)
    print("#LINK_STRING="+LINK_STRING)

def write_include_file(path):
  includes = INCLUDE_FILES.strip().split()
  f = open(path+".includes","w")
  for i in includes:
    f.write("#include " + i + "\n")
  f.close()

# grab program arguments
grab=1
args=' '.join(sys.argv[argno:])

INCLUDE_DIR="-I"+os.path.join(FLX_INSTALL_DIR,"lib","rtl") + " -I"+os.path.join(FLX_INSTALL_DIR,"config","target")
FLXLIB="-I"+os.path.join(FLX_INSTALL_DIR,"lib")
STDLIB="std"
if NOSTDLIB == 1:
  FLXLIB=""
  STDLIB=""

if WIN32:
  FLXG=os.path.join(FLX_INSTALL_DIR, 'bin', 'flxg')
  FLXRUN=''
else:
  FLXG="env PATH="+FLX_INSTALL_DIR+"/bin:$PATH "+FLX_INSTALL_DIR+"/bin/flxg"
  # the mac uses DYLD_LIBRARY_PATH instead of LD_LIBRARY_PATH
  if MACOSX == 1:
    FLXRUN="env DYLD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$DYLD_LIBRARY_PATH "
  else:
    FLXRUN="env LD_LIBRARY_PATH="+FLX_INSTALL_DIR+"/lib/rtl:$LD_LIBRARY_PATH "

DEBUGSWITCH=""
if DEBUG_COMPILER == 1: DEBUGSWITCH=" --debug"

STATIC_ENV=""
if DEBUG_COMPILER == 1: STATIC_ENV="env FLX_DEBUG=1 "

def filetime(f):
  try:
    t = os.stat(f)[stat.ST_MTIME]
  except EnvironmentError:
    t = 0
  return t

if RECOMPILE == 0 and RUNIT == 1:
  # not (--force or -c)
  if STATIC == 0:
    if (filetime(base+EXT_SHLIB) > filetime (base+".flx")):
      calpackages()
      cmd=FLXRUN+DRIVER+DEBUGSWITCH+" "+ base+EXT_SHLIB+" "+args
      sys.exit(system(cmd))
  else:
    if (filetime(base+EXT_EXE) > filetime(base+".flx")):
      cmd=STATIC_ENV+" "+base+" "+args
      sys.exit(system(cmd))

# Need Felix and c++ compile, then run it

if DEBUG_COMPILER == 1:
  VERBOSE="-v"
else:
  VERBOSE="-q"

if DEBUG:
  CCFLAGS=CCFLAGS+DEBUG_FLAGS

FLXFLAGS="--inline="+str(INLINE) + ' ' + str(OUTPUT_DIR)

result = 0

if STATIC == 0:
  if FELIX == 1:
    FCMD=' '.join([
      FLXG,
      VERBOSE, FLXFLAGS, FLXLIB,
      INCLUDE_DIRS, STDIMPORT, IMPORTS,
      STDLIB, base])
    result=system(FCMD)
    if result != 0: sys.exit(0!=result)
    calpackages()
    write_include_file(base)
    CCMD=' '.join([
      CCOBJ_DLLIB, CCFLAGS, "-DTARGET_BUILD",
      INCLUDE_DIR, INCLUDE_DIRS, MACROS,
      cpps, base+".cpp",
      SPEC_OBJ_FILENAME+base+EXT_OBJ])
    LCMD=' '.join([
      CCLINK_DLLIB, CCFLAGS,
      cppos, base+EXT_OBJ,
      SPEC_EXE_FILENAME+base+EXT_SHLIB,
      LINK_STRING])
    result = system(CCMD)
    if result == 0:
      result = system(LCMD)
      if result == 0:
        if RUNIT == 1:
          if TIME == 1:
            cmd=' '.join([
              TIMECMD,
              FLXRUN+DRIVER+DEBUGSWITCH,
              base+EXT_SHLIB, args])
          else:
            cmd=' '.join([
              FLXRUN+DRIVER+DEBUGSWITCH,
              base+EXT_SHLIB, args])
          if STDOUT != "": cmd=cmd+" > " +STDOUT
          sys.exit(0!=system(cmd))
else:
  if FELIX == 1:
    FCMD=' '.join([
      FLXG, VERBOSE, FLXFLAGS,
      FLXLIB, INCLUDE_DIRS, STDIMPORT,
      IMPORTS, STDLIB, base])
    result=system(FCMD)
  if result == 0:
    calpackages()
    write_include_file(base)
    CCMD=' '.join([
      CCOBJ_STATIC_LIB,
      CCFLAGS, "-DTARGET_BUILD",
      "-DFLX_STATIC_LINK", INCLUDE_DIR, INCLUDE_DIRS,
      MACROS, cpps, base+".cpp",
      SPEC_OBJ_FILENAME+base+EXT_OBJ])
    LCMD=' '.join([
      CCLINK_STATIC, SPEC_EXE_FILENAME+base+EXT_EXE,
      base+EXT_OBJ, DRIVER, cppos, LINK_STRING])
    result=system(CCMD)
    if result == 0:
      result=system(LCMD)
      if result == 0:
        # rm -f "$base.cpp"
        if RUNIT == 1:
          if TIME == 1:
            cmd=' '.join([
              TIMECMD, STATIC_ENV, base, args])
          else:
            cmd=' '.join([
              STATIC_ENV, base,args])
          if STDOUT != "": cmd=cmd + " > "+STDOUT
          sys.exit(0!=system(cmd))
sys.exit(0!=result)

@# ------------- UNIX RUN SCRIPT flx.sh REQUIRES bash
@select(tangler('bin/flx.sh','data'))
#!/usr/bin/env bash
# flx - felix script harness
@tangle("INSTALL_ROOT="+config.PREFIX+"/lib/felix/felix-"+config.flx_version)
@tangle("FLX_INSTALL_DIR=${FLX_INSTALL_DIR:-$INSTALL_ROOT}")
@tangle("CYGWIN="+str(config.CYGWIN and 1 or 0))
@tangle("WIN32="+str(config.WIN32 and 1 or 0))
@tangle("MACOSX="+str(config.MACOSX and 1 or 0))
@tangle("HAVE_GNU="+str(config.HAVE_GNU and 1 or 0))
@tangle("HAVE_MSVC="+str(config.HAVE_MSVC and 1 or 0))
@if config.TARGET_CXX.options.HAVE_PIC:
  tangle('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+' '+config.TARGET_CXX.options.PIC+'"')
 else:
  tangle('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+'"')
@tangle('CCLINK_DLLIB="'+config.TARGET_CXX.options.CCLINK_DYNAMIC_FLX+'"')
@tangle('CCOBJ_STATIC_LIB="'+config.TARGET_CXX.options.CCOBJ_STATIC_FLX+'"')
@tangle('CCLINK_STATIC="'+config.TARGET_CXX.options.CCLINK_STATIC+'"')
@tangle('VERSION="'+config.flx_version+'"')
@tangle('EXT_LIB="'+config.TARGET_CXX.options.EXT_LIB+'"')
@tangle('EXT_STATIC_OBJ="'+config.TARGET_CXX.options.EXT_STATIC_OBJ+'"')
@tangle('EXT_SHARED_OBJ="'+config.TARGET_CXX.options.EXT_SHARED_OBJ+'"')
@tangle('EXT_EXE="'+config.TARGET_CXX.options.EXT_EXE+'"')
@tangle('EXT_SHLIB="'+config.TARGET_CXX.options.EXT_SHLIB+'"')
@tangle('SPEC_OBJ_FILENAME="'+config.TARGET_CXX.options.SPEC_OBJ_FILENAME+'"')
@tangle('SPEC_EXE_FILENAME="'+config.TARGET_CXX.options.SPEC_EXE_FILENAME+'"')
@tangle('OPTIMISE="'+config.TARGET_CXX.options.OPTIMISE+'"')
@tangle('DEBUG_FLAGS="'+config.TARGET_CXX.options.DEBUG_FLAGS+'"')

# check for test mode: this argument must come first

RECOMPILE=0
DEBUG=0
INLINE=100
ECHO=0
TIME=0
NOOPTIMISE=0

@if config.DEFAULT_LINK_MODEL=="dynamic":
   tangle("STATIC=0")
 else:
   tangle("STATIC=1")

RUNIT=1
CCFLAGS=""
INCLUDE_FILES=""
FELIX=1
LINKER_SWITCHES=""
MACROS=""
grab=1
cpps=""
cppos=""
INCLUDE_DIRS=""
NOSTDLIB=0
STDOUT=""
STDIMPORT="--import=nugram.flxh --import=flx.flxh"
IMPORTS=""
OUTPUT_DIR=""

while (( "$grab" == "1" ));
do
  case x$1 in

  x--nostdimport)
    STDIMPORT=""
    shift
  ;;

  x--import=*)
   IMPORTS="$IMPORTS --import=${1:9}"
   shift
 ;;

  x--test=*)
    FLX_INSTALL_DIR=${1:7}
    shift
  ;;

  x--test)
    FLX_INSTALL_DIR=.
    shift
  ;;

  x--stdout=*)
    STDOUT=${1:9}
    shift
  ;;

  x--force)
    RECOMPILE=1
    shift
  ;;

  x--debug)
    DEBUG=1
    ECHO=1
    NOOPTIMISE=1
    shift
  ;;

  x--time)
    TIME=1
    shift
  ;;

  x--nostdlib)
    NOSTDLIB=1
    shift
  ;;

  x--echo)
    ECHO=1
    shift
  ;;

  x--static)
    STATIC=1
    shift
  ;;

  x--inline=*)
    INLINE=${1:9}
    shift
  ;;

  x--inline)
    INLINE=100
    shift
  ;;

  x--noinline)
    INLINE=0
    shift
  ;;

  x--version)
    echo $VERSION
    exit 0
  ;;

  x--output_dir=*)
    OUTPUT_DIR=$1
    shift
  ;;

  x--help)
    man -M $FLX_INSTALL_DIR/man flx
    exit 0
  ;;

  x-c)
    RUNIT=0
    shift
  ;;

  x-I*)
    INCLUDE_DIRS="$INCLUDE_DIRS $1"
    shift
  ;;

  x--nofelix)
    FELIX=0
    shift
  ;;

  x-[lL]*)
   LINKER_SWITCHES="$LINKER_SWITCHES $1"
   shift
  ;;

  x-D*)
   MACROS="$MACROS $1"
   shift
  ;;

  x*.cpp)
    cpps="$cpps $1"
    cppos="$cppos `dirname $1`/`basename $1 .cpp`$EXT_OBJ"
    shift
  ;;

  x*.cxx)
    cpps="$cpps $1"
    cppos="$cppos `dirname $1`/`basename $1 .cxx`$EXT_OBJ"
    shift
  ;;

  x*.c)
    cpps="$cpps $1"
    cppos="$cppos `dirname $1`/`basename $1 .c`$EXT_OBJ"
    shift
  ;;

  x*.o)
    cppos="$cppos `dirname $1`/`basename $1 .o`$EXT_OBJ"
    shift
  ;;

  x*.obj)
    cppos="$cppos `dirname $1`/`basename $1 .obj`$EXT_OBJ"
    shift
  ;;

  x*.a)
    cppos="$cppos $1"
    shift
  ;;

  x*.lib)
    cppos="$cppos $1"
    shift
  ;;

  x--pkg=*)
    pkgs=" `echo \"$1\" | sed 's/--pkg=\(.*\)/\\1/'`"
    shift
  ;;

# unknown flag .. pass to both compile and link
   x-*)
      cpps="$cpps $1"
      cppos="$cppos $1"
      shift
    ;;

# the main filename -- subsequent args are args to flx_run
  x*)
    grab=0
  ;;

  esac
done

if [ "$NOOPTIMISE" = "0" ]
then
  CCFLAGS=$CCFLAGS$OPTIMISE
fi

@if config.HAVE_MSVC:
  tangle('DLINK_STRING="/link /LIBPATH:${FLX_INSTALL_DIR}\\\\bin "')
  tangle('SLINK_STRING="/link /LIBPATH:${FLX_INSTALL_DIR}\\\\bin "')
 elif config.CYGWIN or config.WIN32:
  tangle('DLINK_STRING="-L${FLX_INSTALL_DIR}/bin "')
  tangle('SLINK_STRING="-L${FLX_INSTALL_DIR}/lib/rtl "')
 else:
  tangle('DLINK_STRING="-L${FLX_INSTALL_DIR}/lib/rtl "')
  tangle('SLINK_STRING="-L${FLX_INSTALL_DIR}/lib/rtl "')


PKGCONFIG="env FLX_DEBUG=0 FLX_ALLOW_COLLECTION_ANYWHERE=0 $FLX_INSTALL_DIR/bin/flx_pkgconfig"

if [ "$ECHO" = "1" ]
then
  echo "#FLX_INSTALL_DIR=$FLX_INSTALL_DIR"
  echo "#PKGCONFIG=$PKGCONFIG"
fi


# find external header files
PKGCONFIG_CFLAGS="$PKGCONFIG --path+=$FLX_INSTALL_DIR/config --field=cflags "

# external header files
PKGCONFIG_INCLUDES="$PKGCONFIG --path+=$FLX_INSTALL_DIR/config --field=includes "

# find external dynload libraries
PKGCONFIG_DLIBS="$PKGCONFIG -r --path+=$FLX_INSTALL_DIR/config --field=provides_dlib --field=requires_dlibs "

# find external static libraries
PKGCONFIG_SLIBS="$PKGCONFIG -r --keeprightmost --path+=$FLX_INSTALL_DIR/config --field=provides_slib --field=requires_slibs "

#find driver package required
PKGCONFIG_DRIVER="$PKGCONFIG --path+=$FLX_INSTALL_DIR/config --field=flx_requires_driver "

# make a list of any *.cpp files (or other g++ options ..)

if [ $STATIC = 0 ]
then
  EXT_OBJ=$EXT_SHARED_OBJ
else
  EXT_OBJ=$EXT_STATIC_OBJ
fi

if [ "x$1" = "x" ]
then
  echo "usage: flx [options] filename"
  exit 1
fi

# Strip trailing .flx or .so
# users should type 'flx file' without extension,
# but #! interpreter always passes extension ..

case "$1" in
  *.flx)
    arg="`echo $1 | sed 's/\.flx$//'`"
    is_flx=1
  ;;

  *.so)
    arg="`echo $1 | sed 's/\.so$//'`"
    is_so=1
  ;;

  *)
    arg="$1"
esac

# Find absolute pathname

base=$arg

if [ "x$base" = "x" ]
then
  echo "No such felix program: $arg" >&2
  exit 1
fi

shift

function calpackages () {
  # find all include directories
  if [ "$ECHO" = "1" ]
  then
    echo "$PKGCONFIG_CFLAGS @$base.resh"
  fi
  INCLUDE_DIRS="$INCLUDE_DIRS $($(echo $PKGCONFIG_CFLAGS @$base.resh))"

  # find all include files
  if [ "$ECHO" = "1" ]
  then
    echo "$PKGCONFIG_INCLUDES @$base.resh"
  fi
  INCLUDE_FILES="$INCLUDE_FILES $($(echo $PKGCONFIG_INCLUDES @$base.resh))"

  if [ "$ECHO" = "1" ]
  then
    echo "$PKGCONFIG_DRIVER @$base.resh"
  fi

  # find the driver package
  DRIVER_PKG=$($(echo $PKGCONFIG_DRIVER @$base.resh))
  if [ x$DRIVER_PKG = x ]
  then
    # default to flx_run if none specified
    DRIVER_PKG=flx_run
  fi

  # find the driver entity
  if [ $STATIC = 0 ]
  then
    # dynamic linkage: the driver executable
    DRIVER=$FLX_INSTALL_DIR/bin/$DRIVER_PKG$EXT_EXE
  else
    # static linkage: the driver object file
    DRIVER=$FLX_INSTALL_DIR/lib/rtl/$DRIVER_PKG$EXT_STATIC_OBJ
  fi

  if [ $STATIC = 0 ]
  then
    if [ "$ECHO" = "1" ]
    then
     echo "$PKGCONFIG_DLIBS @$base.resh"
    fi

    # dynamic linkage: all the libraries required by the application
    LINK_STRING="$DLINK_STRING$LINKER_SWITCHES $($(echo $PKGCONFIG_DLIBS @$base.resh))"
  else
    if [ "$ECHO" = "1" ]
    then
     echo "$PKGCONFIG_SLIBS $DRIVER_PKG @$base.resh"
    fi

    # static linkage: all the libraries required by the application and driver
    LINK_STRING="$SLINK_STRING$LINKER_SWITCHES $($(echo $PKGCONFIG_SLIBS $DRIVER_PKG @$base.resh))"
  fi

  if [ $ECHO = 1 ]
  then
    echo "#RESOURCE FILE=$base.resh"
    echo "#INCLUDE_DIRS=$INCLUDE_DIRS"
    echo "#INCLUDE_FILES=$INCLUDE_FILES"
    echo "#DRIVER=$DRIVER"
    echo "#LINK_STRING=$LINK_STRING"
  fi

}

function write_include_file() {
  (for filename in ${INCLUDE_FILES:1}; do echo "#include $filename"; done) > $1.includes
}

# grab arguments
grab=1
args=""
while (( "$grab" == "1" ));
do
  case "x$1" in
    x)
      grab=0
    ;;

    x*)
      args="$args $1"
      shift
    ;;
 esac
done

INCLUDE_DIR="-I$FLX_INSTALL_DIR/lib/rtl -I$FLX_INSTALL_DIR/config/target"
FLXLIB="-I$FLX_INSTALL_DIR/lib"
STDLIB="std"
if [ "$NOSTDLIB" = "1" ]
then
  FLXLIB=""
  STDLIB=""
fi

if [ "$CYGWIN" = "1" -o "$WIN32" = "1" ]
then
  # bash is a heap of crap! The escaped quotes here are
  # required in case the PATH has a filename with spaces
  # However this actually fails on Linux!
  FLXG="env \"PATH=$FLX_INSTALL_DIR/bin:\$PATH\" $FLX_INSTALL_DIR/bin/flxg"
  FLXRUN="env \"PATH=$FLX_INSTALL_DIR/bin:\$PATH\" "
else
  FLXG="env PATH=$FLX_INSTALL_DIR/bin:\$PATH $FLX_INSTALL_DIR/bin/flxg"
  # the mac uses DYLD_LIBRARY_PATH instead of LD_LIBRARY_PATH
  if [ "$MACOSX" = "1" ]
  then
    FLXRUN="env DYLD_LIBRARY_PATH=$FLX_INSTALL_DIR/lib/rtl:\$DYLD_LIBRARY_PATH "
  else
    FLXRUN="env LD_LIBRARY_PATH=$FLX_INSTALL_DIR/lib/rtl:\$LD_LIBRARY_PATH "
  fi
fi

DEBUGSWITCH=""
if [ "$DEBUG" = "1" ]; then DEBUGSWITCH=" --debug"; fi
STATIC_ENV=""
if [ "$DEBUG" = "1" ]; then STATIC_ENV="env FLX_DEBUG=1 "; fi

# No need to compile, just run it
if [ $STATIC = 0 ]
then
  if [ $RECOMPILE = 0 -a -r "$base$EXT_SHLIB" -a "(" ! -r "$base.flx" -o "$base$EXT_SHLIB" -nt "$base.flx" ")" ]
  then
    if [ $RUNIT = 1 ]
    then
      calpackages
      write_include_file $base
      cmd="$FLXRUN$DRIVER$DEBUGSWITCH $base$EXT_SHLIB $args"
      if [ $ECHO = 1 ]; then echo $cmd; fi
      eval $cmd
      exit $?
    fi
  fi
else
  if [ $RECOMPILE = 0 -a -r "$base$EXT_EXE" -a "(" ! -r "$base.flx" -o "$base$EXT_EXE" -nt "$base.flx" ")" ]
  then
    if [ $RUNIT = 1 ]
    then
      cmd="$STATIC_ENV $base $args"
      if [ $ECHO = 1 ]; then echo $cmd; fi
      eval $cmd
      exit $?
    fi
  fi
fi

# Need Felix and c++ compile, then run it

if [ $DEBUG = 1 ]
then
  VERBOSE="-v"
  CCFLAGS="$CCFLAGS$DEBUG_FLAGS"
else
  VERBOSE="-q"
fi

FLXFLAGS="--inline=$INLINE $OUTPUT_DIR"

if [ $STATIC = 0 ]
then
  if [ $FELIX = 1 ]
  then
    FCMD="$FLXG $VERBOSE $FLXFLAGS $FLXLIB $INCLUDE_DIRS $STDIMPORT $IMPORTS $STDLIB $base"
    if [ $ECHO = 1 ]; then echo "$FCMD"; fi
    eval $FCMD || exit $?
  fi
  calpackages
  write_include_file $base
  CCMD="$CCOBJ_DLLIB $CCFLAGS -DTARGET_BUILD $INCLUDE_DIR $INCLUDE_DIRS $MACROS $cpps $base.cpp $SPEC_OBJ_FILENAME$base$EXT_OBJ"
  LCMD="$CCLINK_DLLIB $CCFLAGS $cppos $base$EXT_OBJ $SPEC_EXE_FILENAME$base$EXT_SHLIB $LINK_STRING "
  if [ $ECHO = 1 ]; then echo "$CCMD"; fi
  eval $CCMD || exit $?
	if [ $ECHO = 1 ]; then echo "$LCMD"; fi
	eval $LCMD || exit $?
	if [ $RUNIT = 1 ]
	then
		if [ $TIME = 1 ]
		then
			cmd="time $FLXRUN$DRIVER$DEBUGSWITCH $base$EXT_SHLIB $args"
		else
			cmd="$FLXRUN$DRIVER$DEBUGSWITCH $base$EXT_SHLIB $args"
		fi
		if [ "$STDOUT" != "" ]; then cmd="$cmd > $STDOUT"; fi
		if [ $ECHO = 1 ]; then echo $cmd; fi
		eval $cmd || exit $?
	fi
else
  if [ $FELIX = 1 ]
  then
    FCMD="$FLXG $VERBOSE $FLXFLAGS $FLXLIB $INCLUDE_DIRS $STDIMPORT $IMPORTS $STDLIB $base"
    if [ $ECHO = 1 ]; then echo "$FCMD"; fi
    eval $FCMD || exit $?
    if [ $? != 0 ]; then exit $?; fi
  fi
  calpackages
  write_include_file $base
  CCMD="$CCOBJ_STATIC_LIB $CCFLAGS -DTARGET_BUILD -DFLX_STATIC_LINK $INCLUDE_DIR $INCLUDE_DIRS $MACROS $cpps $base.cpp $SPEC_OBJ_FILENAME$base$EXT_OBJ"
  LCMD="$CCLINK_STATIC $SPEC_EXE_FILENAME$base$EXT_EXE $base$EXT_OBJ ${DRIVER} $cppos $LINK_STRING"
  if [ $ECHO = 1 ]; then echo "$CCMD"; fi
  eval $CCMD || exit $?
  if [ $ECHO = 1 ]; then echo "$LCMD"; fi
  eval $LCMD || exit $?
  # rm -f "$base.cpp"
  if [ $RUNIT = 1 ]
  then
    if [ $TIME = 1 ]
    then
      cmd="time $STATIC_ENV $base $args"
    else
      cmd="$STATIC_ENV $base $args"
    fi
    if [ "$STDOUT" != "" ]; then cmd="$cmd > $STDOUT"; fi
    if [ $ECHO = 1 ]; then echo $cmd; fi
    eval $cmd || exit $?
  fi
fi
@select(tangler('bin/flx-postinstall-check','data'))
#!/usr/bin/env bash
FLX=flx
if [ "x$1" != x ]; then FLX="$1 $2 $3 $4 $5 $6 $7 $8"; fi

echo "Felix command is $FLX"
ok=0
bad=0
total=0
failed[0]=""

for i in test/*/*.flx tut/*/*.flx
do
  expect=`dirname $i`/`basename $i .flx`.expect
  if test -e $expect
  then
    total=$(($total+1))
    echo "$total -- check dynamic $i"
    rm -rf tmp.out
    $FLX --force --stdout=tmp.out $i
    diff -a -b -y --suppress-common-lines $expect tmp.out
    if [ "$?" != "0" ]
    then
      echo "*********ERROR"
      failed[$bad]="$total dynamic $i"
      bad=$(($bad+1))
    else
      ok=$(($ok+1))
    fi
    total=$(($total+1))
    echo "$total -- check static $i"
    rm -rf tmp.out
    $FLX --force --static --stdout=tmp.out $i
    diff -a -b -y --suppress-common-lines $expect tmp.out
    if [ "$?" != "0" ]
    then
      echo "*********ERROR"
      failed[$bad]="$total static $i"
      bad=$(($bad+1))
    else
      ok=$(($ok+1))
    fi
  fi
done

if [ $bad != 0 ]
then
  echo "============="
  echo "$bad FAILURES"
  echo "============="
  for ((i=0; i<$bad; i=$i+1)); do echo ${failed[$i]}; done
  echo $failed
  echo
fi
echo
echo "============"
echo "TEST SUMMARY"
echo "============"
echo "GOOD $ok"
echo "BAD  $bad"
echo "---------"
echo "TOTAL $total"
echo "---------"

exit $bad

@head(1,'Finish up')
Just cleaning up script now.
@make_executable(os.path.join('bin', 'flx.sh'))
@make_executable(os.path.join('bin', 'flx.py'))


