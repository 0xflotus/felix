@import config

@select(tangler('lib/plat/config.flx','data'))
//GENERATED during config
module Config {
False := false;
True := true;
@def ts(x): tangle(x+";")

@def tv(x): ts("var "+x)

@tv("PREFIX='"+config.PREFIX+"'")
@tv("INSTALL_ROOT_TOPDIR=Filename::join(%r, 'lib/felix')" % (config.PREFIX))
@tv("INSTALL_ROOT=Filename::join(INSTALL_ROOT_TOPDIR, 'felix-%s')" % (config.flx_version))
var FLX_INSTALL_DIR = Env::getenv("FLX_INSTALL_DIR", INSTALL_ROOT);
@tv("CYGWIN="+str(config.CYGWIN))
@tv("WIN32="+str(config.WIN32))
@tv("MACOSX="+str(config.MACOSX))
@tv("HAVE_GNU="+str(config.HAVE_GNU))
@tv("HAVE_MSVC="+str(config.HAVE_MSVC))
@if config.TARGET_CXX.options.HAVE_PIC:
  tv('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+' '+config.TARGET_CXX.options.PIC+'"')
 else:
  tv('CCOBJ_DLLIB="'+config.TARGET_CXX.options.CCOBJ_DYNAMIC_FLX+'"')
@tv('CCLINK_DLLIB="'+config.TARGET_CXX.options.CCLINK_DYNAMIC_FLX+'"')
@tv('CCOBJ_STATIC_LIB="'+config.TARGET_CXX.options.CCOBJ_STATIC_FLX+'"')
@tv('CCLINK_STATIC="'+config.TARGET_CXX.options.CCLINK_STATIC+'"')
@tv('VERSION="'+config.flx_version+'"')
@tv('EXT_LIB="'+config.TARGET_CXX.options.EXT_LIB+'"')
@tv('EXT_STATIC_OBJ="'+config.TARGET_CXX.options.EXT_STATIC_OBJ+'"')
@tv('EXT_SHARED_OBJ="'+config.TARGET_CXX.options.EXT_SHARED_OBJ+'"')
@tv('EXT_EXE="'+config.TARGET_CXX.options.EXT_EXE+'"')
@tv('EXT_SHLIB="'+config.TARGET_CXX.options.EXT_SHLIB+'"')
@tv('SPEC_OBJ_FILENAME="'+config.TARGET_CXX.options.SPEC_OBJ_FILENAME+'"')
@tv('SPEC_EXE_FILENAME="'+config.TARGET_CXX.options.SPEC_EXE_FILENAME+'"')
@tv('OPTIMISE="'+config.TARGET_CXX.options.OPTIMISE+' "')
@tv('DEBUG_FLAGS="'+config.TARGET_CXX.options.DEBUG_FLAGS+' "')
@if config.DEFAULT_LINK_MODEL=="dynamic":
   tv("DEFAULT_LINK_STATIC=0;")
 else:
   tv("DEFAULT_LINK_STATIC=1;")


fun link_strings(FLX_INSTALL_DIR:string): string * string =
{
@if config.HAVE_MSVC:
  tv('DLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
  tangle('SLINK_STRING="/link /DLL /LIBPATH:"+FLX_INSTALL_DIR+"\\\\lib\\\\rtl "')
 elif config.CYGWIN or config.WIN32:
  tv('DLINK_STRING="-L"+{FLX_INSTALL_DIR+"/bin "')
  tv('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
 else:
  tv('DLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
  tv('SLINK_STRING="-L"+FLX_INSTALL_DIR+"/lib/rtl "')
@#
  return DLINK_STRING,SLINK_STRING;
}
}


@select(tangler("config/target/flx_meta.hpp"))
#ifndef __FLX_META_H__
#define __FLX_META_H__
// GENERATED during config
// taken from BOOST
@if config.TARGET_CXX.options.HAVE_INCLASS_MEMBER_INITIALIZATION:
  tangle('#define FLX_HAVE_INCLASS_MEMBER_INITIALIZATION 1')
 else:
  tangle('#define FLX_HAVE_INCLASS_MEMBER_INITIALIZATION 0')

#if FLX_HAVE_INCLASS_MEMBER_INITIALIZATION
#  define FLX_STATIC_CONSTANT(type, assignment) static const type assignment
#else
#  define FLX_STATIC_CONSTANT(type, assignment) enum { assignment }
#endif

#include <cstddef>

template <std::size_t> struct type_with_alignment;
@for k, t in config.TARGET_CXX.options.flx_aligns.items():
  tangle('template <> struct type_with_alignment<'+str(k)+'>{ typedef '+t+' type; };')

template <typename T> struct alignment_of;

template <typename T>
struct alignment_of_hack
{
  char c;
  T t;
  alignment_of_hack();
};

template <unsigned A, unsigned S>
struct alignment_logic
{
  FLX_STATIC_CONSTANT(std::size_t, value = A < S ? A : S);
};

template< typename T >
struct alignment_of
{
  FLX_STATIC_CONSTANT(std::size_t, value =
    (alignment_logic<
      sizeof(alignment_of_hack<T>) - sizeof(T),
      sizeof(T)
    >::value));
};

template<std::size_t L, std::size_t A>
struct aligned_storage
{
  union type
  {
    unsigned char data_[ L ];
    typename type_with_alignment<A>::type align_;
  };
};

template<typename T>
struct store_of
{
  typedef typename aligned_storage<sizeof(T), alignment_of<T>::value>::type type;
};

// convert an rvalue to an lvalue
template<typename T>
T const &lvalue(T const &x)
{
  return x;
}

// this reinterpret cast works with rvalues too
template<typename T, typename U>
T &reinterpret(U const &x) {
  return reinterpret_cast<T&>(const_cast<U&>(x));
}

template<typename T> void destroy(T *p){ p->T::~T(); }

#endif
@doc()

@select(tangler("config/host/flx_host_config.hpp"))
#ifndef __FLX_HOST_CONFIG_H__
#define __FLX_HOST_CONFIG_H__

@if config.HOST_CXX.options.WIN32:
  tangle('#define FLX_WIN32 1')
 else:
  tangle('#define FLX_WIN32 0')

@if config.HOST_CXX.options.HAVE_BOOL:
  tangle('#define FLX_HAVE_BOOL 1')
 else:
  tangle('#define FLX_HAVE_BOOL 0')

@if config.HOST_CXX.options.HAVE_LONGLONG:
  tangle('#define FLX_HAVE_LONGLONG 1')
 else:
  tangle('#define FLX_HAVE_LONGLONG 0')

@if config.HOST_CXX.options.HAVE_LONGDOUBLE:
  tangle('#define FLX_HAVE_LONGDOUBLE 1')
 else:
  tangle('#define FLX_HAVE_LONGDOUBLE 0')

#if !defined(FLX_STATIC_LINK) && FLX_WIN32
#define FLX_EXPORT __declspec(dllexport)
#define FLX_IMPORT __declspec(dllimport)
#else
#define FLX_EXPORT
#define FLX_IMPORT
#endif


@def cal_raw_address():
  if config.HOST_CXX.options.SIZEOF_INT      == config.HOST_CXX.options.SIZEOF_VOIDP: return "unsigned"
  if config.HOST_CXX.options.SIZEOF_LONG     == config.HOST_CXX.options.SIZEOF_VOIDP: return "unsigned long"
  if config.HOST_CXX.options.SIZEOF_LONGLONG == config.HOST_CXX.options.SIZEOF_VOIDP: return "unsigned long long"
  raise "Cannot find an int the size of a void pointer"

@tangle("#define FLX_RAWADDRESS " + cal_raw_address())
@tangle('#define FLX_MAX_ALIGN ' + str(config.HOST_CXX.options.MAX_ALIGN))

// get variant index code and pointer from packed variant rep
#define FLX_VP(x) ((void*)((FLX_RAWADDRESS)(x) & ~(FLX_RAWADDRESS)0x03))
#define FLX_VI(x) ((int)((FLX_RAWADDRESS)(x) & (FLX_RAWADDRESS)0x03))

// make a packed variant rep from index code and pointer
#define FLX_VR(i,p) ((void*)((FLX_RAWADDRESS)(p)|(FLX_RAWADDRESS)(i)))

#if FLX_WIN32 && !defined(_WIN32_WINNT)
#define _WIN32_WINNT 0x500 // Require Windows NT5 (2K, XP, 2K3)
#endif


#endif

@select(tangler("config/target/flx_rtl_config.hpp"))
#ifndef __FLX_RTL_CONFIG_H__
#define __FLX_RTL_CONFIG_H__

@if config.TARGET_CXX.options.HAVE_VSNPRINTF:
  tangle('#define FLX_HAVE_VSNPRINTF 1')
 else:
  tangle('#define FLX_HAVE_VSNPRINTF 0')

@if config.TARGET_CXX.options.HAVE_BOOL:
  tangle('#define FLX_HAVE_BOOL 1')
 else:
  tangle('#define FLX_HAVE_BOOL 0')

@if config.TARGET_CXX.options.HAVE_LONGLONG:
  tangle('#define FLX_HAVE_LONGLONG 1')
 else:
  tangle('#define FLX_HAVE_LONGLONG 0')

@if config.TARGET_CXX.options.HAVE_LONGDOUBLE:
  tangle('#define FLX_HAVE_LONGDOUBLE 1')
 else:
  tangle('#define FLX_HAVE_LONGDOUBLE 0')

@if config.HAVE_GNU:
  tangle('#define FLX_HAVE_GNU 1')
 else:
  tangle('#define FLX_HAVE_GNU 0')

@if config.TARGET_CXX.options.HAVE_GNU_X86:
  tangle('#define FLX_HAVE_GNU_X86 1')
 else:
  tangle('#define FLX_HAVE_GNU_X86 0')

@if config.TARGET_CXX.options.HAVE_GNU_X86_64:
  tangle('#define FLX_HAVE_GNU_X86_64 1')
 else:
  tangle('#define FLX_HAVE_GNU_X86_64 0')

@if config.TARGET_CXX.options.HAVE_GNU_BUILTIN_EXPECT:
  # only use these with proper predicates!
  tangle('#define FLX_UNLIKELY(x) __builtin_expect(long(x),0)')
  tangle('#define FLX_LIKELY(x) __builtin_expect(long(x),1)')
 else:
  tangle('#define FLX_UNLIKELY(x) x')
  tangle('#define FLX_LIKELY(x) x')

@if config.TARGET_CXX.options.HAVE_CGOTO:
  tangle("#define FLX_HAVE_CGOTO 1")
 else:
  tangle("#define FLX_HAVE_CGOTO 0")

@if config.TARGET_CXX.options.USE_REGPARM3:
  tangle("#define FLX_USE_REGPARM3 1")
 else:
  tangle("#define FLX_USE_REGPARM3 0")

@if config.TARGET_CXX.options.HAVE_ASM_LABELS:
  tangle("#define FLX_HAVE_ASM_LABELS 1")
 else:
  tangle("#define FLX_HAVE_ASM_LABELS 0")

@if config.TARGET_CXX.options.HAVE_DLOPEN:
  tangle("#define FLX_HAVE_DLOPEN 1")
 else:
  tangle("#define FLX_HAVE_DLOPEN 0")

@if config.TARGET_CXX.options.MACOSX:
  tangle("#define FLX_MACOSX 1")
 else:
  tangle("#define FLX_MACOSX 0")

@if config.TARGET_CXX.options.LINUX:
  tangle("#define FLX_LINUX 1")
 else:
  tangle("#define FLX_LINUX 0")

@if config.TARGET_CXX.options.WIN32:
  tangle("#define FLX_WIN32 1")
 else:
  tangle("#define FLX_WIN32 0")

@if config.TARGET_CXX.options.WIN64:
  tangle("#define FLX_WIN64 1")
 else:
  tangle("#define FLX_WIN64 0")

@if config.TARGET_CXX.options.CYGWIN:
  tangle("#define FLX_CYGWIN 1")
 else:
  tangle("#define FLX_CYGWIN 0")

@if config.TARGET_CXX.options.POSIX:
  tangle("#define FLX_POSIX 1")
 else:
  tangle("#define FLX_POSIX 0")

@if config.TARGET_CXX.options.SOLARIS:
  tangle("#define FLX_SOLARIS 1")
 else:
  tangle("#define FLX_SOLARIS 0")

@if config.HAVE_MSVC:
  tangle("#define FLX_HAVE_MSVC 1")
 else:
  tangle("#define FLX_HAVE_MSVC 0")

@if config.TARGET_CXX.options.HAVE_KQUEUE_DEMUXER:
  tangle("#define FLX_HAVE_KQUEUE_DEMUXER 1")
 else:
  tangle("#define FLX_HAVE_KQUEUE_DEMUXER 0")

@if config.TARGET_CXX.options.HAVE_POLL:
  tangle("#define FLX_HAVE_POLL 1")
 else:
  tangle("#define FLX_HAVE_POLL 0")

@if config.TARGET_CXX.options.HAVE_EPOLL:
  tangle("#define FLX_HAVE_EPOLL 1")
 else:
  tangle("#define FLX_HAVE_EPOLL 0")

@if config.TARGET_CXX.options.HAVE_EVTPORTS:
  tangle("#define FLX_HAVE_EVTPORTS 1")
 else:
  tangle("#define FLX_HAVE_EVTPORTS 0")

@if config.TARGET_CXX.options.HAVE_SHARED_OPENMP:
  tangle("#define FLX_HAVE_OPENMP 1")
 else:
  tangle("#define FLX_HAVE_OPENMP 0")

#include "setjmp.h"

#define FLX_SAVE_REGS \
  jmp_buf reg_save_on_stack; \
  setjmp (reg_save_on_stack)

//
#if FLX_HAVE_CGOTO && FLX_HAVE_ASM_LABELS
#define FLX_CGOTO 1
#else
#define FLX_CGOTO 0
#endif

#if FLX_WIN32 && !defined(_WIN32_WINNT)
#define _WIN32_WINNT 0x0600 // Require Windows NT5 (2K, XP, 2K3)
#endif

#if FLX_WIN32 && !defined(WINVER)
#define WINVER 0x0600 // Require Windows NT5 (2K, XP, 2K3)
#endif

#if FLX_WIN32
// vs windows.h just LOVES to include winsock version 1 headers by default.
// that's bad for everyone, so quit it.
#define _WINSOCKAPI_

// windows.h defines min/max macros, which can cause all sorts of confusion.
#define NOMINMAX
#endif


#if !defined(FLX_STATIC_LINK) && FLX_WIN32
#define FLX_EXPORT __declspec(dllexport)
#define FLX_IMPORT __declspec(dllimport)
#else
#define FLX_EXPORT
#define FLX_IMPORT
#endif


#ifdef BUILD_RTL
#define RTL_EXTERN FLX_EXPORT
#else
#define RTL_EXTERN FLX_IMPORT
#endif

#if FLX_MACOSX && !FLX_HAVE_DLOPEN
#define FLX_MACOSX_NODLCOMPAT 1
#else
#define FLX_MACOSX_NODLCOMPAT 0
#endif

#if FLX_HAVE_GNU
#define FLX_ALWAYS_INLINE __attribute__ ((always_inline))
#define FLX_NOINLINE __attribute__ ((noinline))
#define FLX_CONST __attribute__ ((const))
#define FLX_PURE __attribute__ ((pure))
#define FLX_GXX_PARSER_HACK (void)0,
#define FLX_UNUSED __attribute__((unused))
#else
#define FLX_ALWAYS_INLINE
#define FLX_NOINLINE
#define FLX_CONST
#define FLX_PURE
#define FLX_GXX_PARSER_HACK
#define FLX_UNUSED
#endif

@def cal_raw_address():
  if config.TARGET_CXX.options.SIZEOF_INT      == config.TARGET_CXX.options.SIZEOF_VOIDP: return "unsigned"
  if config.TARGET_CXX.options.SIZEOF_LONG     == config.TARGET_CXX.options.SIZEOF_VOIDP: return "unsigned long"
  if config.TARGET_CXX.options.SIZEOF_LONGLONG == config.TARGET_CXX.options.SIZEOF_VOIDP: return "unsigned long long"
  raise "Cannot find an int the size of a void pointer"

@tangle("#define FLX_RAWADDRESS " + cal_raw_address())
@tangle('#define FLX_MAX_ALIGN ' + str(config.TARGET_CXX.options.MAX_ALIGN))

// get variant index code and pointer from packed variant rep
#define FLX_VP(x) ((void*)((FLX_RAWADDRESS)(x) & ~(FLX_RAWADDRESS)0x03))
#define FLX_VI(x) ((int)((FLX_RAWADDRESS)(x) & (FLX_RAWADDRESS)0x03))

// make a packed variant rep from index code and pointer
#define FLX_VR(i,p) ((void*)((FLX_RAWADDRESS)(p)|(FLX_RAWADDRESS)(i)))


#endif
@doc()


@h = tangler('config/flx_pthread.fpc')
@select(h)
Name: pthread
Description: Pre-emptive threading support
Comment: Generated during configuration

@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:flx_pthread_dynamic")
   tangle("provides_slib: /DEFAULTLIB:flx_pthread_static")
 elif config.WIN32:
   tangle("provides_dlib: -lflx_pthread_dynamic")
   tangle("provides_slib: -lflx_pthread_static")
 else:
   tangle("provides_dlib: -lflx_pthread_dynamic")
   tangle("provides_slib: -lflx_pthread_static")
 if config.TARGET_CXX.options.HAVE_PTHREADS:
   tangle("requires_dlibs: "+config.TARGET_CXX.options.PTHREAD_SWITCH)
   tangle("requires_slibs: "+config.TARGET_CXX.options.PTHREAD_SWITCH)

includes: '"pthread_thread.hpp"'
Requires: flx_gc


@h = tangler('config/demux.fpc')
@select(h)
Name: demux
Description: Event handling
Comment: Generated during configuration

@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:demux_dynamic")
   tangle("requires_dlibs: /DEFAULTLIB:ws2_32 /DEFAULTLIB:mswsock")
   tangle("provides_slib: /DEFAULTLIB:demux_static")
   tangle("requires_slibs: /DEFAULTLIB:ws2_32 /DEFAULTLIB:mswsock")
 elif config.WIN32:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("requires_dlibs: -lws2_32 -lmswsock")
   tangle("provides_slib: -ldemux_static")
   tangle("requires_slibs: -lws2_32 -lmswsock")
 elif config.SOLARIS:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("provides_slib: -ldemux_static -lsocket -lnsl")
 else:
   tangle("provides_dlib: -ldemux_dynamic")
   tangle("provides_slib: -ldemux_static")

Requires: flx_pthread
flx_requires_driver: flx_arun

@select(tangler('config/target/demux_sockety_config.hpp'))
#ifndef __DEMUX_SOCKETY_CONFIG_H__
#define __DEMUX_SOCKETY_CONFIG_H__
#include <sys/socket.h>
// GENERATED DURING CONFIGURATION

@tangle('typedef %s FLX_SOCKLEN_T;' % config.TARGET_CXX.options.FLX_SOCKLEN_T)
#endif


@python("//")
rmap = {}

tmap = {
  # addressing
  "byte"      : "unsigned char",
  "size"      : "size_t",
  "address"   : "void *",
  "offset"    : "ptrdiff_t",
  "ptrdiff"   : "ptrdiff_t",

  #characters
  "char"    : "char",
  "wchar"   : "wchar_t",

  #signed integers
  "tiny"    : "signed char",
  "short"   : "short",
  "int"     : "int",
  "long"    : "long",

  #unsigned integers
  "utiny"   : "unsigned char",
  "ushort"  : "unsigned short",
  "uint"    : "unsigned int",
  "ulong"   : "unsigned long",

  #floating
  "float"   : "float",
  "double"  : "double",
  "ldouble"  : "long double"
 }

tmap["fcomplex" ]="::std::complex<float>"
tmap["dcomplex"]="::std::complex<double>"

rmap["fcomplex" ]="Cxx_headers::complex"
rmap["dcomplex"]="Cxx_headers::complex"
rmap["lcomplex"]="Cxx_headers::complex"

if config.TARGET_CXX.options.HAVE_LONGDOUBLE:
  tmap["ldouble"]="long double"
  tmap["lcomplex"]="::std::complex<long double>"
else:
  tmap["ldouble"]="double"
  tmap["lcomplex"]="::std::complex<double>"

if config.TARGET_CXX.options.HAVE_LONGLONG:
  tmap["vlong"]="long long"
  tmap["uvlong"]="unsigned long long"
else:
  tmap["vlong"]="long"
  tmap["uvlong"]="unsigned long"

if config.TARGET_CXX.options.HAVE_STDINT:
  tmap["int8"]="int8_t"
  tmap["uint8"]="uint8_t"
  tmap["int16"]="int16_t"
  tmap["uint16"]="uint16_t"
  tmap["int32"]="int32_t"
  tmap["uint32"]="uint32_t"
  tmap["int64"]="int64_t"
  tmap["uint64"]="uint64_t"
  tmap["intptr"]="intptr_t"
  tmap["uintptr"]="uintptr_t"
  tmap["intmax"]="intmax_t"
  tmap["uintmax"]="uintmax_t"

  # requirements
  rmap["int8"]="C99_headers::stdint_h"
  rmap["uint8"]="C99_headers::stdint_h"
  rmap["int16"]="C99_headers::stdint_h"
  rmap["uint16"]="C99_headers::stdint_h"
  rmap["int32"]="C99_headers::stdint_h"
  rmap["uint32"]="C99_headers::stdint_h"
  rmap["int64"]="C99_headers::stdint_h"
  rmap["uint64"]="C99_headers::stdint_h"
  rmap["intptr"]="C99_headers::stdint_h"
  rmap["uintptr"]="C99_headers::stdint_h"
  rmap["intmax"]="C99_headers::stdint_h"
  rmap["uintmax"]="C99_headers::stdint_h"
else:
  tmap["int8"]="signed char"
  tmap["uint8"]="unsigned char"
  sizes = {
    config.TARGET_CXX.options.SIZEOF_SHORT*8 : "short",
    config.TARGET_CXX.options.SIZEOF_INT*8: "int",
    config.TARGET_CXX.options.SIZEOF_LONG*8 : "long",
  }
  tmap["intmax"]="long"
  tmap["uintmax"]="unsigned long"
  if config.TARGET_CXX.options.HAVE_LONGLONG:
    sizes[config.TARGET_CXX.options.SIZEOF_LONGLONG*8]="long long"
    tmap["intmax"]="long long"
    tmap["uintmax"]="unsigned long long"
  for size in [16,32,64]:
    try:
      t = sizes[size]
    except KeyError:
      tmap["int"+str(size)]="emul_int"+str(size)
      tmap["uint"+str(size)]="emul_uint"+str(size)
    else:
      tmap["int"+str(size)]=t
      tmap["uint"+str(size)]="unsigned " + t
  try:
    tmap["intptr"]=sizes[config.TARGET_CXX.options.SIZEOF_VOIDP*8]
    tmap["uintptr"]="unsigned "+sizes[config.TARGET_CXX.options.SIZEOF_VOIDP*8]
  except:
    print("NO INTEGER THE SIZE OF A VOID*!")
    sys.exit(1)

tmap["uchar"]=tmap["int32"] # Unicode/ISO10646, note: SIGNED!
//

@fc = {'float':'f', 'double':'','ldouble':'l'}

@def gen_nan(t):
  if config.TARGET_CXX.options.HAVE_CXX_ISNAN_IN_CMATH:
    tangle('  fun isnan: '+t+' -> bool = "::std::isnan($1)" is postfix requires Cxx_headers::cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_MATH:
    tangle('  fun isnan: '+t+' -> bool = "isnan'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISNAN_IN_IEEEFP:
    tangle('  fun isnan: '+t+' -> bool = "isnanf'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>";')
  else:
    tangle('  fun isnan: '+t+' -> bool = "!($1==$1)" is unary;')

  if config.TARGET_CXX.options.HAVE_CXX_ISINF_IN_CMATH:
    tangle('  fun isinf: '+t+' -> bool = "::std::isinf($1)" is postfix requires Cxx_headers::cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISINF_IN_MATH:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_ISINF_IN_IEEEFP:
    tangle('  fun isinf: '+t+' -> bool = "isinf'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>";')
  else:
    tangle('  fun isinf: '+t+' -> bool = "($1==$1 && $1+$1+1.0==$1)" is unary;')

  if config.TARGET_CXX.options.HAVE_CXX_ISFINITE_IN_CMATH:
    tangle('  fun isfinite: '+t+' -> bool = "::std::isfinite($1)" is postfix requires Cxx_headers::cmath;')
  elif config.TARGET_CXX.options.HAVE_C99_ISFINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "isfinite($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_FINITE_IN_MATH:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires C89_headers::math_h;')
  elif config.TARGET_CXX.options.HAVE_BSD_FINITE_IN_IEEEFP:
    tangle('  fun isfinite: '+t+' -> bool = "finite'+fc[t]+'($1)" is postfix requires "#include <ieeefp.h>"')
  else:
    tangle('  fun isfinite: '+t+' -> bool = "($1==$1 && $1!==0.0 && $1+$1!=$1)" is unary;')



@h=tangler('lib/plat/flx.flxh','data')
@select(h)

@plats = ["WIN32","POSIX","LINUX","MACOSX","CYGWIN","SOLARIS","BSD"]

@for i in plats:
  if getattr(config, i):
    tangle("macro val " + i + " = true;")
  else:
    tangle("macro val " + i + " = false;")

@chars = ["char", "wchar", "uchar"]
@fast_sints = [
  "tiny", "short", "int", "long", "vlong"
  ]
@fast_uints = [
  "utiny", "ushort", "uint", "ulong", "uvlong"
  ]
@exact_sints = [
  "int8","int16","int32","int64"
  ]
@exact_uints = [
  "uint8","uint16","uint32","uint64"
  ]
@sints = fast_sints + exact_sints
@uints = fast_uints + exact_uints
@fast_ints = fast_sints + fast_uints
@exact_ints = exact_sints + exact_uints
@ints = uints + sints

@floats = ["float", "double", "ldouble"]

@complex = ["fcomplex","dcomplex","lcomplex"]
@all = [
  "byte", "address",
  "offset",
  ] + chars + fast_ints + floats + complex

@def gen_type(t):
  d = rmap.get(t,None)
  if d:
    tangle('pod type '+t+' = "'+tmap[t]+'" requires '+d+';')
  else:
    tangle('pod type '+t+' = "'+tmap[t]+'";')

@fint2cint={
  'tiny':'signed char',
  'short':'short',
  'int':'int',
  'long':'long',
  'vlong':'long long',
  'utiny':'unsigned char',
  'ushort':'unsigned short',
  'uint':'unsigned int',
  'ulong':'unsigned long',
  'uvlong':'unsigned long long',
  }

@cint2fint = {}
@for f in fint2cint.keys(): cint2fint[fint2cint[f]]=f

@def alias_sint(t):
  if t == 'int8': size = 1
  elif t == 'int16': size = 2
  elif t == 'int32': size = 4
  elif t == 'int64': size = 8
  if SIZEOF_CHAR == size: return 'tiny'
  if SIZEOF_SHORT == size: return 'short'
  if SIZEOF_INT == size: return 'int'
  if SIZEOF_LONG == size: return 'long'
  if SIZEOF_LONGLONG == size: return 'vlong'

@def alias_uint(t):
  if t == 'uint8': size = 1
  elif t == 'uint16': size = 2
  elif t == 'uint32': size = 4
  elif t == 'uint64': size = 8
  if SIZEOF_CHAR == size: return 'utiny'
  if SIZEOF_SHORT == size: return 'ushort'
  if SIZEOF_INT == size: return 'uint'
  if SIZEOF_LONG == size: return 'ulong'
  if SIZEOF_LONGLONG == size: return 'uvlong'

@select(tangler("lib/plat/ctypedefs.flx",'data'))
// GENERATED DURING CONFIGURATION
@for t in all:
  gen_type(t)

// _gc_pointer is a special code which tells the compiler
// that an opaque (primitive) data type is a pointer to be
// followed by the gc.
_gc_pointer type gcaddress = "void*";
_gc_pointer type gcptr[t]= "?1*";

@# mandatory in C
@for t in ['ptrdiff','size','ssize','intmax','uintmax','intptr','uintptr']:
  equiv = cint2fint[getattr(config.TARGET_CXX.options, 'ALIAS_'+t+'_t')]
  tangle('typedef ' + t + ' = ' + equiv + ';')

@# optional in C
@for t in exact_ints:
  equiv = cint2fint[getattr(config.TARGET_CXX.options, 'ALIAS_'+t+'_t')]
  tangle('typedef ' + t + ' = ' + equiv + ';')

@select(tangler('lib/plat/arithmax.flx','data'))
// GENERATED DURING CONFIGURATION
// arithmetic conversion rule
typedef fun arithmax(l: TYPE, r: TYPE): TYPE =>
  typematch integral_promotion l, integral_promotion r with
@for f1 in fint2cint.keys():
  if f1 not in ['tiny','short','utiny','ushort']:
    for f2 in fint2cint.keys():
      if f2 not in ['tiny','short','utiny','ushort']:
        f3 = cint2fint[config.TARGET_CXX.options.arith_conv[(fint2cint[f1],fint2cint[f2])]]
        comment = ""
        if f1 == f2:
          if f2 != f1: comment = "// ERROR"
        if (f1 == 'uvlong' or f2 == 'uvlong') and f3 != 'uvlong':
          comment = "// ERROR, uvlong expected"
        elif f3 != f1 and f3 != f2:
          comment = "// SPECIAL PROMOTION"
        elif f1 == 'uint' and f2=='long' or f1=='long' and f2=='uint':
          comment = '// Representation Dependent (long or ulong)'
        if f1 == 'uvlong' or f2 == 'uvlong' or f3 == 'int':
          pass
        else:
          tangle('  | '+f1+','+f2+' => '+f3+' '+comment)
@#
  | uvlong,_ => uvlong
  | _,uvlong => uvlong
  | _,_ => int
  endmatch
;


@select(tangler('lib/plat/float.flx','data'))
// GENERATED DURING CONFIGURATION
@for t in floats:
  tangle("open module " + t.capitalize())
  tangle("{")
  tangle('  fun _ctor_'+t+': string -> '+t+' = "static_cast<'+tmap[t]+'>(::std::atof($1.data()))" requires Cxx_headers::cstdlib;')
  tangle('  fun _ctor_'+t+'[T:reals]: T -> '+t+' = "static_cast<'+tmap[t]+'>($1)";')
  gen_nan(t)
  tangle('  proc fprint: ostream * '+t+' = "*$1<<$2;" requires Cxx_headers::iostream;')
  tangle("}")
  tangle("")

@h = tangler("lib/std/version.flx")
@select(h)
// GENERATED DURING BUILD (for version number)
publish "System Interface"
module Version
{
@tangle('  const felix_version : string = \'::std::string("'+config.flx_version+'")\';')
}


@h = tangler("lib/plat/filename.flx")
@select(h)
// GENERATED DURING CONFIGURATION
module Plat_Filename
{
@if os.sep == '\\':
   # FFS!!! we put \\\\\\\\ here:
   # Python reduces it to \\\\             !!!
   # Felix then reduces it to \\           !!!
   # and finally C reduces it to plain \   !!!
   # don't remove the !!! because \ at eol is continuation .. argg
   tangle('  val sep  = "\\\\\\\\"')
 else:
   tangle('  val sep = "'+os.sep+'";')
@#
 
}

@h=tangler('src/compiler/flx_version_hook/flx_version_hook.ml')
@select(h)
@import time
@now = time.time()
@gmtime = time.gmtime(now)
@short_time = time.strftime("%a %d %b %Y",gmtime)
open Flx_version
let version_data: version_data_t =
{
@tangle('  version_string = "%s";' % config.flx_version)
@tangle('  build_time_float = %s;' % now)
@tangle('  build_time = "%s";' % time.ctime(now))
@f = open ("VERSION","w")
@f.write(config.flx_version+"\n")
@f.close()
}
;;
let set_version () =
  Flx_version.version_data := version_data
;;
