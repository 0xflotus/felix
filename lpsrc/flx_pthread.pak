@import config

@head(1, 'Pre-emptive threads (pthread)')
Note WE say pthread means 'pre-emptive thread' not
merely Posix thread. Confusing on Solaris especially.
However it fits with name fthread for felix threads
which are actually s- (synchronous) or np- (non-preemptive)
threads.

@h = tangler('config/flx_pthread.fpc')
@select(h)
Name: pthread
Description: Pre-emptive threading support
Version: $Id$

@if config.HAVE_MSVC:
   tangle("provides_dlib: /DEFAULTLIB:flx_pthread_dynamic")
   tangle("provides_slib: /DEFAULTLIB:flx_pthread_static")
 elif config.WIN32:
   tangle("provides_dlib: -lflx_pthread_dynamic")
   tangle("provides_slib: -lflx_pthread_static")
 else:
   tangle("provides_dlib: -lflx_pthread_dynamic")
   tangle("provides_slib: -lflx_pthread_static")
 if config.TARGET_CXX.options.HAVE_PTHREADS:
   tangle("requires_dlibs: "+config.TARGET_CXX.options.PTHREAD_SWITCH)
   tangle("requires_slibs: "+config.TARGET_CXX.options.PTHREAD_SWITCH)

includes: "pthread_thread.hpp"
Requires: flx_gc

@h = tangler('spkgs/flx_pthread.py')
@select(h)
import os

import config

PTHREADRTL_INTERFACES = [
  'src/pthread/pthread_thread.hpp',               # portable
  'src/pthread/pthread_win_posix_condv_emul.hpp', # win32 and posix
  'src/pthread/pthread_mutex.hpp',                # portable
  'src/pthread/pthread_counter.hpp',              # portable
  'src/pthread/pthread_waitable_bool.hpp',        # portable
  'src/pthread/pthread_condv.hpp',                # portable
  'src/pthread/pthread_semaphore.hpp',            # portable
  'src/pthread/pthread_monitor.hpp',              # portable
  'src/pthread/pthread_sleep_queue.hpp',          # portable
  'src/pthread/pthread_work_fifo.hpp',            # portable
]

PTHREAD_CPPS = [
  "src/pthread/pthread_win_posix_condv_emul", # portability hackery
  "src/pthread/pthread_mutex",
  "src/pthread/pthread_condv",
  "src/pthread/pthread_counter",
  "src/pthread/pthread_waitable_bool",
  "src/pthread/pthread_semaphore",
  "src/pthread/pthread_monitor",
  "src/pthread/pthread_sleep_queue",
  "src/pthread/pthread_work_fifo",
  "src/pthread/pthread_thread_control",
]

POSIX_PTHREAD_CPPS = [
  'src/pthread/pthread_posix_thread',
]

LINUX_PTHREAD_CPPS = [
]

SOLARIS_PTHREAD_CPPS = [
]

WINDOWS_PTHREAD_CPPS = [
  'src/pthread/pthread_win_thread',
]

BSD_PTHREAD_CPPS = [
]

EXTRA_SYS_LIBS = ""
if config.WIN32:
  PTHREAD_CPPS = PTHREAD_CPPS + WINDOWS_PTHREAD_CPPS

if config.POSIX:
  PTHREAD_CPPS = PTHREAD_CPPS + POSIX_PTHREAD_CPPS

if config.LINUX:
  PTHREAD_CPPS = PTHREAD_CPPS + LINUX_PTHREAD_CPPS

if config.BSD or config.MACOSX:
  PTHREAD_CPPS = PTHREAD_CPPS + BSD_PTHREAD_CPPS

if config.SOLARIS:
  PTHREAD_CPPS = PTHREAD_CPPS + SOLARIS_PTHREAD_CPPS
  EXTRA_SYS_LIBS = "-lrt " # man sem_wait

if config.TARGET_CXX.options.HAVE_PTHREADS:
  EXTRA_SYS_LIBS=EXTRA_SYS_LIBS+config.TARGET_CXX.options.PTHREAD_SWITCH

root = config.src_dir
completion_tests = [('test', 'pthread', 'pthread-*.flx')]

cpp_cpps = PTHREAD_CPPS
lib_requires = ['libflx_exceptions']
dflags = EXTRA_SYS_LIBS
sflags = EXTRA_SYS_LIBS
build_macro = "PTHREAD"

rtl_interfaces = PTHREADRTL_INTERFACES
felix_rtl = ['src/pthread/pthread.flx']

pkg_requires = ['flx_exceptions','flx_rtl_config']
iscr_source = ["lpsrc/flx_pthread.pak"]
weaver_directory = 'doc/rtl/flx_pthread/'
tmpdir = ['pthread']
xfiles= [os.path.join('src', 'pthread', '*')]

@h=tangler('config/target/flx_pthread_config.hpp')
@select(h)
#ifndef __FLX_PTHREAD_CONFIG_H__
#define __FLX_PTHREAD_CONFIG_H__
#include "flx_rtl_config.hpp"
#ifdef BUILD_PTHREAD
#define PTHREAD_EXTERN FLX_EXPORT
#else
#define PTHREAD_EXTERN FLX_IMPORT
#endif
#endif
