@import config
@from config.flx_data import flx_keywords, flx_syms, cpp_keywords
@set_title('Felix ' + config.flx_version)

@head(1,'The Felix Compiler')

@select(tangler('src/compiler/flx_cpp_backend/flx_backend_config.ml'))
let cpp_keywords = [
@for k in cpp_keywords:
  tangle('  "%s";' % k)
@#
]

@head(1,'Configuration loader')
There is a separate package "flx_config.pak" which should
be used to create the configuration creator script.
@import traceback
@try:
    import config.flx_data
 except:
    xt,xv,tb = sys.exc_info()
    print("ERROR IN config/flx_data.py")
    traceback.print_exception(xt,xv,tb)
    print("You must either")
    print("(a) edit config/__init__.py and fix the error, or,")
    print("(b) i) delete it, and,")
    print("    ii) run 'python script/make_config.py'")
    print("       again to reset it:")
    print("       this is done automatically by 'make boot'")
    sys.exit(1)


@h=tangler('src/compiler/flx_version_hook/flx_version_hook.ml')
@select(h)
@python("//")
def get_buildno():
  fname = "config/buildno.txt"
  try:
    f = open(fname)
    s = f.readline()
    s = s[0:-1]
    i = int(s) + 1
    f.close()
  except:
    i = 1
  s = str(i)
  try: os.mkdir("config")
  except: pass
  f = open(fname,"w")
  f.write("%d\n" % i)
  f.close()
  return s
//
@import time
@now = time.time()
@gmtime = time.gmtime(now)
@short_time = time.strftime("%a %d %b %Y",gmtime)
@buildno = get_buildno()
@print("BUILDNO",buildno)
open Flx_version
let version_data: version_data_t =
{
@tangle('  buildno = '+buildno+";")
@tangle('  version_string = "%s";' % config.flx_version)
@tangle('  build_time_float = %s;' % now)
@tangle('  build_time = "%s";' % time.ctime(now))
@f = open ("VERSION","w")
@f.write(config.flx_version+"\n")
@f.close()
}
;;
let set_version () =
  Flx_version.version_data := version_data
;;
