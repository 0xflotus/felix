@bc = begin_displayed_code
@ec = end_displayed_code
@set_title('Felix')
@head(1,'Purpose')
Felix is a procedural language designed to implement
ultra lightweight threads. An ultra-lightweight thread
is a thread of control which provides cooperative
multitasking and event driven scheduling. It is designed
to support running millions of threads of control on
multiple processors with low overhead
in context switching achieved by event driven dispatch.
@p()
Target applications include graphical user interfaces,
telephony and other asynchronous signalling systems,
and web and other servers.

@head(1,'Language')
Felix is a powerful C++ code generator which uses
a blend of Pascal, C, C++, and ML syntax in the hope
that the power of the ML system can be provided to
C/C++ programmers, together with control inversion.

@head(1,'Implementation')
@head(2,'The Felix Compiler')
@include_file ('flx_types.ipk')
@include_file ('flx_parser.ipk')
@include_file ('flx_string.ipk')
@include_file ('flx_lexer.ipk')
@include_file ('flx_tokeniser.ipk')
@include_file ('flx_pat.ipk')
@include_file ('flx_desugar.ipk')
@include_file ('flx_symtab.ipk')
@include_file ('flx_lookup.ipk')
@include_file ('flx_mbind.ipk')
@include_file ('flx_bbind.ipk')
@include_file ('flx_name.ipk')
@include_file ('flx_tgen.ipk')
@include_file ('flx_gen.ipk')

@head(2,'The Felix Run time')
@include_file ('flx_lib.ipk')
@include_file ('flx_test.ipk')
@include_file ('flx_regress.ipk')

@head(2,'The Unix Build system')
@include_file ('flx_maker.ipk')

