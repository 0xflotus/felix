@h1 Introductory Hands On
Get your hands dirty! You can't learn a programming language just by reading!

@h2 Hello world
Of course there's no better introduction to a language that the infamous hello world:
@felix
println$ "Hello World";
@
Assuming you store this in the file {hello.flx} to can run it by
<pre>
flx hello
</pre>
This will check the code, translate it to C++, compile the C++,
link it including any libraries required, and then run it.
Caching and dependency checking will skip over some of these
steps, or parts thereof: it will be a bit slow the first time
but subsequent runs will load much faster than any VM.

@h2 Environment variables
It's a pretty boring program, so lets try an improvement:
@felix
println$ "Hello " + Env::getenv "USER";
@
The {getenv} command can't fail, it will just return an empty string
of the environment variable is not set. The infix operator {+} you
see is string concatenation.

@h2 Command line arguments
Ok, so here's another way:
@felix
println$ "Hello " + System::argv 1;
@
This reads the first command line argument after the Felix 
program name, for example if you type:
<pre>
flx hello Joachim
</pre>
then Joachim will be welcomed.

@h2 Reading and writing standard streams
Well then, here's another way to get some data in:
@felix
Text_file::write$ Text_file::stdout,"Enter your name: ";
Text_file::fflush Text_file::stdout;
val name = Text_file::readln$ Text_file::stdin; 
Text_file::writeln$ Text_file::stdout, "Hello " + name;
@
Here {val} is declaring and initialising a named value, which you can
think of as an immutable unaddressable variable.

We also see the procedure {write}, which writes a string to a nominated output stream
without appending a newline, {readnln} which reads a line from nominated
input stream, {writeln} which writes a string to a nominated output stream
an then sends a newline, and the standard streams {stdout} and {stdin},
all part of the module {Text_file}.

@h2 Opening a module
Instead of writing the qualifiers all the time we can write the program
like this:
@felix
open Text_file;
write$ stdout,"Enter your name: "; fflush stdout;
val name = readln$ stdin;
writeln$ stdout, "Hello " + name;
@
By {open}ing the module {Text_file} we can use the symbols defined 
in it without qualification. Most standard library modules
are open by default: {Text_file}, however is not.

@h2 Stripping leading and trailing spaces from a string
Unfortunately there's a bug in this program: {readln} reads
in a line including the newline. We can fix this, and remove
excess spaces at the same time as shown here:
@felix
open Text_file;
write$ stdout,"Enter your name: "; fflush stdout;
val name = strip (readln$ stdin));
writeln$ stdout, "Hello " + name + "!";
@
This uses the function {strip} from the  String module
to remove leading and trailing whitespace, including newlines.

@h2 Application and call operators
Those with an OO background may find this more pleasing:
@felix
val name = stdin.readln.strip;
@
It means exactly the same as before, the operator {.} is nothing
more than reverse application.

And those with a Haskell background will readily understand that in
@felix
val name = strip $ readln $ stdin;
@
the {$} is just a low precedence forward application, so 
it is also the same as before.

@h2 Parentheses are purely for grouping
You may have noticed that you can write:
@felix
fflush stdout;
@
which is equivalent to
@felix
fflush (stdout);
@
Parentheses are not required for function application or procedure
calls, just for grouping.

@h2 Summary
We have learned 
<ul>
<li>how to run a simple Felix program with the {flx} tool,</li> 
<li>how to print stuff to standard output with {println},</li> 
<li>how to concatenate strings with operator {+},</li> 
<li>how to get values from the environment with {getenv},</li>
<li> how to get values from command line arguments with {argv},</li>
<li>and how to read and write values from streams such as {stdin} and {stdout}
using {readln}, {write}, {writeln} and {fflush}.</li>
</ul>

We have learned that library functions and procedures 
<ul>
<li>live in modules such as {Env}, {System} and {Text_file} and</li>
<li>how to name them in a qualified way, and</li>
<li>how to get around needing to specify the qualifiers.</li>
</ul>

We've also learned that in Felix there are three ways to apply
a function or procedure to a value:
<ul>
<li>using operator whitespace (juxtaposition), </li>
<li>using operator {.} (dot), and</li>
<li>using operator {$} (dollar).</li>
</ul>

and we also learned how to name a value with {val}.

That's a lot but if you're ready, we can go to the next chapter:

<a href="tut_02.fdoc">Next</a>


